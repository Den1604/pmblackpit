% Script File: 1B Area TIK2.bscr
% Decoded from: 608AB0 to 6186F0 (1B Area TIK2)

% Origin: HEURISTIC
#new:Function $Function_80218000
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_80218058
{
	ADDIU     SP, SP, FFB0
	SW        S1, 1C (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S0, 18 (SP)
	SDC1      F28, 48 (SP)
	SDC1      F26, 40 (SP)
	SDC1      F24, 38 (SP)
	SDC1      F22, 30 (SP)
	SDC1      F20, 28 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F28
	NOP
	CVT.S.W   F28, F28
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F26
	NOP
	CVT.S.W   F26, F26
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F20
	NOP
	CVT.S.W   F20, F20
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	MTC1      V0, F22
	NOP
	CVT.S.W   F22, F22
	JAL       ~Func:get_variable
	COPY      A0, S1
	LIF       F0, 40.0
	MTC1      V0, F24
	NOP
	CVT.S.W   F24, F24
	ADD.S     F0, F22, F0
	MOV.S     F12, F28
	MFC1      A2, F20
	MFC1      A3, F0
	JAL       ~Func:atan2
	MOV.S     F14, F26
	LIF       F2, 10.0
	CLEAR     A0
	SUB.S     F20, F20, F2
	LIF       F2, 60.0
	LIF       F4, 2.5
	ADD.S     F22, F22, F2
	LIF       F2, 20.0
	ADDIU     V0, R0, 28
	SW        V0, 14 (SP)
	SWC1      F4, 10 (SP)
	ADD.S     F24, F24, F2
	MFC1      A1, F20
	MFC1      A2, F22
	MFC1      A3, F24
	JAL       80071B10
	MOV.S     F20, F0
	LW        V1, C (V0)
	SWC1      F20, 38 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 2
	SW        A0, 18 (V1)
	LW        V1, C (V0)
	SW        A0, 1C (V1)
	LW        V1, C (V0)
	SW        A0, 20 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 50
	SW        A0, 28 (V1)
	LW        V1, C (V0)
	SW        A0, 2C (V1)
	LW        V1, C (V0)
	SW        A0, 30 (V1)
	LW        RA, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F28, 48 (SP)
	LDC1      F26, 40 (SP)
	LDC1      F24, 38 (SP)
	LDC1      F22, 30 (SP)
	LDC1      F20, 28 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 802181F4 to 80218200 (00608CA4 to 00608CB0)
00000000 00000000 00000000

#new:Function $Function_80218200
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

% Origin: HEURISTIC
#new:Function $Function_80218258
{
	ADDIU     SP, SP, FFD8
	SW        S0, 10 (SP)
	COPY      S0, A0
	SW        RA, 18 (SP)
	SW        S1, 14 (SP)
	SDC1      F20, 20 (SP)
	LW        V0, C (S0)
	LW        A1, 4 (V0)
	JAL       ~Func:get_float_variable
	LW        S1, 0 (V0)
	MOV.S     F20, F0
	COPY      A0, S0
	JAL       ~Func:get_float_variable
	COPY      A1, S1
	LIO       AT, 40C90FD0
	MTC1      AT, F2
	NOP
	MUL.S     F0, F0, F2
	NOP
	LIF       F12, 360.0
	JAL       ~Func:sin_rad
	DIV.S     F12, F0, F12
	MUL.S     F20, F20, F0
	NOP
	COPY      A0, S0
	MFC1      A2, F20
	JAL       ~Func:set_float_variable
	COPY      A1, S1
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_802182EC
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o48
	SW        RA, 14 (SP)
	JAL       8011D82C
	ADDIU     A0, R0, 1
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	COPY      A3, A0
	LAW       V0, 801512F0
	ADDIU     V1, R0, 1
	JAL       ~Func:set_background_color_blend
	SB        V1, 0 (V0)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o48
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	LW        V1, 70 (S0)
	ADDIU     V0, R0, 14
	SUBU      V0, V0, V1
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       ~Func:set_background_color_blend
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	SW        V0, 70 (S0)
	SLTIU     V0, V0, 1
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	SLL       V0, V0, 1
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80218384
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o1C
	SW        RA, 14 (SP)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o1C
	CLEAR     A0
	COPY      A1, A0
	LW        V0, 70 (S0)
	COPY      A2, A0
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       ~Func:set_background_color_blend
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	BEQ       V0, R0, .o58
	SW        V0, 70 (S0)
	BEQ       R0, R0, .o70
	CLEAR     V0
	.o58
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	JAL       ~Func:set_background_color_blend
	COPY      A3, A0
	ADDIU     V0, R0, 2
	.o70
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80218404
{
	ADDIU     SP, SP, FFC8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	SDC1      F24, 30 (SP)
	SDC1      F22, 28 (SP)
	SDC1      F20, 20 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F24
	NOP
	CVT.S.W   F24, F24
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F22
	NOP
	CVT.S.W   F22, F22
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	MTC1      V0, F20
	NOP
	CVT.S.W   F20, F20
	JAL       ~Func:get_float_variable
	COPY      A0, S1
	LW        V0, C (S2)
	SWC1      F24, 4 (V0)
	LW        V0, C (S2)
	SWC1      F22, 8 (V0)
	LW        V0, C (S2)
	SWC1      F20, C (V0)
	LW        V1, C (S2)
	SWC1      F0, 38 (V1)
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F24, 30 (SP)
	LDC1      F22, 28 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 38
}

#new:Function $Function_802184E4
{
	ADDIU     SP, SP, FFB0
	SW        S1, 1C (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S0, 18 (SP)
	SDC1      F28, 48 (SP)
	SDC1      F26, 40 (SP)
	SDC1      F24, 38 (SP)
	SDC1      F22, 30 (SP)
	SDC1      F20, 28 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F28
	NOP
	CVT.S.W   F28, F28
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F26
	NOP
	CVT.S.W   F26, F26
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F20
	NOP
	CVT.S.W   F20, F20
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	MTC1      V0, F22
	NOP
	CVT.S.W   F22, F22
	JAL       ~Func:get_variable
	COPY      A0, S1
	LIF       F0, 40.0
	MTC1      V0, F24
	NOP
	CVT.S.W   F24, F24
	ADD.S     F0, F22, F0
	MOV.S     F12, F28
	MFC1      A2, F20
	MFC1      A3, F0
	JAL       ~Func:atan2
	MOV.S     F14, F26
	LIF       F2, 10.0
	CLEAR     A0
	SUB.S     F20, F20, F2
	LIF       F2, 60.0
	LIF       F4, 2.5
	ADD.S     F22, F22, F2
	LIF       F2, 20.0
	ADDIU     V0, R0, 28
	SW        V0, 14 (SP)
	SWC1      F4, 10 (SP)
	ADD.S     F24, F24, F2
	MFC1      A1, F20
	MFC1      A2, F22
	MFC1      A3, F24
	JAL       80071B10
	MOV.S     F20, F0
	LW        V1, C (V0)
	SWC1      F20, 38 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 2
	SW        A0, 18 (V1)
	LW        V1, C (V0)
	SW        A0, 1C (V1)
	LW        V1, C (V0)
	SW        A0, 20 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 50
	SW        A0, 28 (V1)
	LW        V1, C (V0)
	SW        A0, 2C (V1)
	LW        V1, C (V0)
	SW        A0, 30 (V1)
	LW        RA, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F28, 48 (SP)
	LDC1      F26, 40 (SP)
	LDC1      F24, 38 (SP)
	LDC1      F22, 30 (SP)
	LDC1      F20, 28 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 50
}

#new:Function $Function_80218680
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

% Origin: HEURISTIC
#new:Function $Function_802186D8
{
	ADDIU     SP, SP, FFD8
	SW        S0, 10 (SP)
	COPY      S0, A0
	SW        RA, 18 (SP)
	SW        S1, 14 (SP)
	SDC1      F20, 20 (SP)
	LW        V0, C (S0)
	LW        A1, 4 (V0)
	JAL       ~Func:get_float_variable
	LW        S1, 0 (V0)
	MOV.S     F20, F0
	COPY      A0, S0
	JAL       ~Func:get_float_variable
	COPY      A1, S1
	LIO       AT, 40C90FD0
	MTC1      AT, F2
	NOP
	MUL.S     F0, F0, F2
	NOP
	LIF       F12, 360.0
	JAL       ~Func:sin_rad
	DIV.S     F12, F0, F12
	MUL.S     F20, F20, F0
	NOP
	COPY      A0, S0
	MFC1      A2, F20
	JAL       ~Func:set_float_variable
	COPY      A1, S1
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_8021876C
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o48
	SW        RA, 14 (SP)
	JAL       8011D82C
	ADDIU     A0, R0, 1
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	COPY      A3, A0
	LAW       V0, 801512F0
	ADDIU     V1, R0, 1
	JAL       ~Func:set_background_color_blend
	SB        V1, 0 (V0)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o48
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	LW        V1, 70 (S0)
	ADDIU     V0, R0, 14
	SUBU      V0, V0, V1
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       ~Func:set_background_color_blend
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	SW        V0, 70 (S0)
	SLTIU     V0, V0, 1
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	SLL       V0, V0, 1
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80218804
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o1C
	SW        RA, 14 (SP)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o1C
	CLEAR     A0
	COPY      A1, A0
	LW        V0, 70 (S0)
	COPY      A2, A0
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       ~Func:set_background_color_blend
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	BEQ       V0, R0, .o58
	SW        V0, 70 (S0)
	BEQ       R0, R0, .o70
	CLEAR     V0
	.o58
	CLEAR     A0
	COPY      A1, A0
	COPY      A2, A0
	JAL       ~Func:set_background_color_blend
	COPY      A3, A0
	ADDIU     V0, R0, 2
	.o70
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80218884
{
	ADDIU     SP, SP, FFB0
	SW        S1, 1C (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S0, 18 (SP)
	SDC1      F28, 48 (SP)
	SDC1      F26, 40 (SP)
	SDC1      F24, 38 (SP)
	SDC1      F22, 30 (SP)
	SDC1      F20, 28 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F28
	NOP
	CVT.S.W   F28, F28
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F26
	NOP
	CVT.S.W   F26, F26
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	MTC1      V0, F20
	NOP
	CVT.S.W   F20, F20
	JAL       ~Func:get_variable
	COPY      A0, S1
	LW        A1, 0 (S0)
	MTC1      V0, F22
	NOP
	CVT.S.W   F22, F22
	JAL       ~Func:get_variable
	COPY      A0, S1
	LIF       F0, 40.0
	MTC1      V0, F24
	NOP
	CVT.S.W   F24, F24
	ADD.S     F0, F22, F0
	MOV.S     F12, F28
	MFC1      A2, F20
	MFC1      A3, F0
	JAL       ~Func:atan2
	MOV.S     F14, F26
	LIF       F2, 10.0
	CLEAR     A0
	SUB.S     F20, F20, F2
	LIF       F2, 60.0
	LIF       F4, 2.5
	ADD.S     F22, F22, F2
	LIF       F2, 20.0
	ADDIU     V0, R0, 28
	SW        V0, 14 (SP)
	SWC1      F4, 10 (SP)
	ADD.S     F24, F24, F2
	MFC1      A1, F20
	MFC1      A2, F22
	MFC1      A3, F24
	JAL       80071B10
	MOV.S     F20, F0
	LW        V1, C (V0)
	SWC1      F20, 38 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 2
	SW        A0, 18 (V1)
	LW        V1, C (V0)
	SW        A0, 1C (V1)
	LW        V1, C (V0)
	SW        A0, 20 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, 50
	SW        A0, 28 (V1)
	LW        V1, C (V0)
	SW        A0, 2C (V1)
	LW        V1, C (V0)
	SW        A0, 30 (V1)
	LW        RA, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F28, 48 (SP)
	LDC1      F26, 40 (SP)
	LDC1      F24, 38 (SP)
	LDC1      F22, 30 (SP)
	LDC1      F20, 28 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 50
}

#new:Function $Function_80218A20
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_80218A78
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S2, F14
	NOP
	CVT.S.W   F14, F14
	MTC1      S0, F0
	NOP
	CVT.S.W   F0, F0
	MFC1      A2, F0
	JAL       802D7460
	COPY      A3, V0
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_80218B2C
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S2, F14
	NOP
	CVT.S.W   F14, F14
	MTC1      S0, F0
	NOP
	CVT.S.W   F0, F0
	MFC1      A2, F0
	JAL       802D74C0
	COPY      A3, V0
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_80218BE0
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 80219074 to 80219080 (00609B24 to 00609B30)
00000000 00000000 00000000

#new:Function $Function_80219080
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 80219514 to 80219520 (00609FC4 to 00609FD0)
00000000 00000000 00000000

#new:Function $Function_80219520
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 802199B4 to 802199C0 (0060A464 to 0060A470)
00000000 00000000 00000000

% Origin: HEURISTIC
#new:Function $Function_802199C0
{
	ADDIU     SP, SP, FFA0
	SW        S0, 20 (SP)
	COPY      S0, A0
	SW        RA, 28 (SP)
	SW        S1, 24 (SP)
	SDC1      F30, 58 (SP)
	SDC1      F28, 50 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S0)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	COPY      S1, V0
	ADDIU     A0, R0, 1
	BEQ       S1, A0, .o100
	SW        S1, 70 (S0)
	SLTI      V0, S1, 2
	BEQ       V0, R0, .o64
	ADDIU     V0, R0, 2
	BEQ       S1, R0, .o7C
	ADDIU     V0, R0, 8E
	BEQ       R0, R0, .o400
	NOP
	.o64
	BEQ       S1, V0, .o27C
	ADDIU     V0, R0, 3
	BEQ       S1, V0, .oBC
	ADDIU     V1, R0, 5B
	BEQ       R0, R0, .o400
	NOP
	.o7C
	LIF       F4, 142.0
	LIF       F30, -118.0
	ADDIU     V1, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V0, 90 (S0)
	ADDIU     V0, R0, 2C
	SW        V0, 9C (S0)
	ADDIU     V0, R0, 3
	SW        R0, 94 (S0)
	SW        V1, 98 (S0)
	SW        V1, A0 (S0)
	BEQ       R0, R0, .oF0
	SW        V0, A4 (S0)
	.oBC
	LIF       F4, 91.0
	LIF       F30, -118.0
	ADDIU     V0, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V1, 90 (S0)
	SW        R0, 94 (S0)
	SW        V0, 98 (S0)
	SW        V1, 9C (S0)
	SW        V0, A0 (S0)
	SW        S1, A4 (S0)
	.oF0
	SW        R0, A8 (S0)
	SW        R0, B0 (S0)
	BEQ       R0, R0, .o400
	SW        A0, 70 (S0)
	.o100
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 2E
	BNE       V0, R0, .o124
	NOP
	ADDIU     V0, R0, 2D
	SW        V0, A8 (S0)
	.o124
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       ~Func:sin_rad
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       ~Func:sin_rad
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	BEQ       R0, R0, .o3F0
	ADDIU     V0, R0, 2D
	.o27C
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 5B
	BNE       V0, R0, .o29C
	ADDIU     V0, R0, 5A
	SW        V0, A8 (S0)
	.o29C
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       ~Func:sin_rad
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       ~Func:sin_rad
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	ADDIU     V0, R0, 5A
	.o3F0
	LW        V1, A8 (S0)
	BNE       V1, V0, .o400
	CVT.S.D   F30, F20
	SW        S1, B0 (S0)
	.o400
	LWC1      F4, 10 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 84 (S0)
	LWC1      F4, 14 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 88 (S0)
	TRUNC.W.S F4, F30
	SWC1      F4, 8C (S0)
	LW        RA, 28 (SP)
	LW        S1, 24 (SP)
	LW        S0, 20 (SP)
	LDC1      F30, 58 (SP)
	LDC1      F28, 50 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 60
}

#new:Function $Function_80219E10
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	SW        RA, 14 (SP)
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o30
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o40
	ADDU      V0, V1, V0
	.o30
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o44
	SUBU      V0, V1, A0
	.o40
	SW        V0, A8 (S0)
	.o44
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o64
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o74
	ADDU      V0, V1, V0
	.o64
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o78
	SUBU      V0, V1, A0
	.o74
	SW        V0, AC (S0)
	.o78
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o98
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA8
	ADDU      V0, V1, V0
	.o98
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oAC
	SUBU      V0, V1, A0
	.oA8
	SW        V0, B0 (S0)
	.oAC
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oCC
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oDC
	ADDU      V0, V1, V0
	.oCC
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE0
	SUBU      V0, V1, A0
	.oDC
	SW        V0, B4 (S0)
	.oE0
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_u
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_v
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_u
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_v
	LW        A1, B4 (S0)
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	CLEAR     V0
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80219F34
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o24
	SW        RA, 14 (SP)
	SW        R0, 70 (S0)
	SW        R0, 74 (S0)
	SW        R0, 78 (S0)
	SW        R0, 7C (S0)
	.o24
	LW        V0, 70 (S0)
	BNE       V0, R0, .o64
	NOP
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o50
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o60
	ADDU      V0, V1, V0
	.o50
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o64
	SUBU      V0, V1, A0
	.o60
	SW        V0, A8 (S0)
	.o64
	LW        V0, 74 (S0)
	BNE       V0, R0, .oA4
	NOP
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o90
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA0
	ADDU      V0, V1, V0
	.o90
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oA4
	SUBU      V0, V1, A0
	.oA0
	SW        V0, AC (S0)
	.oA4
	LW        V0, 78 (S0)
	BNE       V0, R0, .oE4
	NOP
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oD0
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oE0
	ADDU      V0, V1, V0
	.oD0
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE4
	SUBU      V0, V1, A0
	.oE0
	SW        V0, B0 (S0)
	.oE4
	LW        V0, 7C (S0)
	BNE       V0, R0, .o124
	NOP
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o110
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o120
	ADDU      V0, V1, V0
	.o110
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o124
	SUBU      V0, V1, A0
	.o120
	SW        V0, B4 (S0)
	.o124
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_u
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_v
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_u
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_v
	LW        A1, B4 (S0)
	LW        V0, 70 (S0)
	LW        V1, 78 (S0)
	LW        A0, 98 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 70 (S0)
	LW        V0, 74 (S0)
	ADDIU     V1, V1, 1
	SW        V1, 78 (S0)
	LW        V1, 70 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 74 (S0)
	LW        V0, 7C (S0)
	SLT       V1, V1, A0
	ADDIU     V0, V0, 1
	BNE       V1, R0, .o198
	SW        V0, 7C (S0)
	SW        R0, 70 (S0)
	.o198
	LW        V0, 74 (S0)
	LW        V1, 9C (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1AC
	SW        R0, 74 (S0)
	.o1AC
	LW        V0, 78 (S0)
	LW        V1, A0 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1C0
	SW        R0, 78 (S0)
	.o1C0
	LW        V0, 7C (S0)
	LW        V1, A4 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1D4
	SW        R0, 7C (S0)
	.o1D4
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	CLEAR     V0
	JR        RA
	ADDIU     SP, SP, 18
}

PADDING: 8021A11C to 8021A120 (0060ABCC to 0060ABD0)
00000000

#new:Script $Script_8021A120
{
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  00000014
        Sub   *Var[B]  00000014
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[4]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[5]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[6]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Return
    End
}

#new:Script $Script_8021A5FC
{
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[3]  0000000C
    ExecWait  $Script_8021A120
    Return
    End
}

#new:IdleAnimations $IdleAnimations_8021A654
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A690
{
    .Status:Normal    0050000C
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    0050000C
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A6CC
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:DefenseTable $DefenseTable_8021A708
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8021A714
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      70`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy      80`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze   90`
    .Status:Shrink     90`
    .Status:Stop      100`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      1`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_8021A7C0
{
    00020000 01000000 003200FF $IdleAnimations_8021A654 $DefenseTable_8021A708 00000000 00000000 00000000 00000000
    00800000 02001400 001E00FF 00000000 $DefenseTable_8021A708 00000000 00000000 00DB0000 00000000
}

#new:Actor $Blooper
{
    % stats
    [Index]        C7b
    [Level]        44`b
    [MaxHP]        30`b
    [Coins]         0`b
    [Flags]       00000200
    [StatusTable] $StatusTable_8021A714
    % ai
    [PartsCount]    2`s
    [PartsTable]  $PartsTable_8021A7C0
    [Script]      $Script_Init_8021A830
    % move effectiveness
    [Escape]        0`b
    [Item]          0`b
    [AirLift]       0`b
    [Hurricane]     0`b % Bow's "Spook" as well
    [UpAndAway]     0`b
    [PowerBounce]  90`b
    [SpinSmash]     4`b % weight (0-4)
    % ui positions
    [Size]         57`b  61`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]    0`b  22`b % dx dy
    [StatusIcon]   15`b  55`b % dx dy
}

#new:Script $Script_Init_8021A830
{
    Call  SetActorScale ( .Actor:Self *Fixed[0.75] *Fixed[0.75] *Fixed[1.0] )
    Call  ForceHomePos  ( .Actor:Self 0000005A 0000002D FFFFFFF6 )
    Call  HPBarToHome   ( .Actor:Self )
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_Blooper )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021A8C4 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021ACFC )
    Return
    End
}

#new:Script $Script_Idle_8021A8C4
{
    Label  0
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000000
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  B
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A690 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Label  B
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000000A
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  C
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A690 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Wait  3`
    Label  C
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A6CC )
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  FFFFFFF6
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.3] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Wait  1`
    Goto  0
    Return
    End
}

#new:Script $Script_HandleEvent_8021ACFC
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021B13C
            Return
        Case  ==  .Event:BurnHit % E
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
            SetConst  *Var[1]  00500006
            ExecWait  $Script_8021B13C
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021B13C
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            ExecWait  $Script_8021A5FC
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021B13C
            Return
        Case  ==  .Event:EndFirstStrike % 35
            ExecWait  $Script_8021A5FC
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoRecover
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021B13C
{
    SetConst  *Var[0]  00000001
    ExecWait  DoDeath
    Return
    End
}

#new:Script $Script_TakeTurn_Blooper
{
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  !&  00080000
        Call  RandInt   ( 00000064 *Var[0] )
        If  *Var[0]  <  00000032
            ExecWait  $Script_Tackle
        Else
            ExecWait  $Script_SprayInk
        EndIf
    Else
        ExecWait  $Script_Tackle
    EndIf
    Return
    End
}

#new:Script $Script_Tackle
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  !&  00080000
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  0000005F
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 00000190 )
        Call  MoveBattleCamOver ( 00000082 )
    Else
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000048
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 00000154 )
        Call  MoveBattleCamOver ( 00000082 )
    EndIf
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000F
    ExecWait  $Script_8021A120
    Call  PlaySoundAtActor  ( .Actor:Self 000003DD )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Set   *Var[0]  00000000
                Loop  00000024
                    Add   *Var[0]  0000001E
                    Call  SetActorYaw   ( .Actor:Self *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  UseCamPreset  ( 00000002 )
            Call  MoveBattleCamOver     ( 00000014 )
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8021A5FC
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Thread
        Set   *Var[0]  00000000
        Loop  00000010
            Add   *Var[0]  0000001E
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetAnimation      ( .Actor:Self 00000001 0050000D )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000001E
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 00000010 .False .True .False )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000003 00000020 )
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 00000014 )
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000 % 100000
        Call  SetAnimation  ( .Actor:Self 00000001 00500004 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_8021A5FC
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_SprayInk
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000055
    Add   *Var[1]  0000002D
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos       ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  0000001E
        Sub   *Var[B]  0000001E
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Thread
        Call  UseCamPreset      ( 00000013 )
        Sub   *Var[0]  0000001E
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 0000015E )
        Call  MoveBattleCamOver ( 00000032 )
    EndThread
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.5]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.5]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.5]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500003 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  0000001E
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
    Call  SetActorSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FlyToGoal     ( .Actor:Self 00000010 00000000 .Easing:Linear )
    Call  UseCamPreset  ( 00000002 )
    Call  MoveBattleCamOver ( 0000000A )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000028 00000000 )
    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFD8 )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DE )
    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    Add   *Var[3]  00000001
    Sub   *Var[4]  0000001B
    Sub   *Var[5]  00000003
    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Call  $Function_80218058    ( *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Wait  10`
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  30`
            Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
            Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            ExecWait  $Script_8021A5FC
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Wait  10`
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  80269EAC  ( 0000001A )
    Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000000 00000003 00000020 )
    Wait  30`
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
    ExecWait  $Script_8021A5FC
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

PADDING: 8021C064 to 8021C070 (0060CB14 to 0060CB20)
00000000 00000000 00000000

#new:Script $Script_8021C070
{
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  00000014
        Sub   *Var[B]  00000014
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[4]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[5]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[6]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Return
    End
}

#new:Script $Script_8021C54C
{
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[3]  0000000C
    ExecWait  $Script_8021C070
    Return
    End
}

#new:IdleAnimations $IdleAnimations_8021C5A4
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021C5E0
{
    .Status:Normal    0050000C
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    0050000C
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021C61C
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:DefenseTable $DefenseTable_8021C658
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8021C664
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      50`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy      60`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze   50`
    .Status:Shrink     80`
    .Status:Stop       80`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod      -1`
    .Status:End
}

#new:StatusTable $StatusTable_8021C710
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      25`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy      30`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze    0`
    .Status:Shrink     70`
    .Status:Stop        0`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod      -1`
    .Status:End
}

#new:PartsTable $PartsTable_8021C7BC
{
    00020000 01000000 005000FF $IdleAnimations_8021C5A4 $DefenseTable_8021C658 00000000 00000000 00000000 00000000
    00800000 02001400 003C00FF 00000000 $DefenseTable_8021C658 00000000 00000000 00DB0000 00000000
}

#new:Actor $ElectroBlooper
{
    % stats
    [Index]        C8b
    [Level]        50`b
    [MaxHP]        50`b
    [Coins]         0`b
    [Flags]       00000200
    [StatusTable] $StatusTable_8021C664
    % ai
    [PartsCount]    2`s
    [PartsTable]  $PartsTable_8021C7BC
    [Script]      $Script_Init_8021C82C
    % move effectiveness
    [Escape]        0`b
    [Item]          0`b
    [AirLift]       0`b
    [Hurricane]     0`b % Bow's "Spook" as well
    [UpAndAway]     0`b
    [PowerBounce]  85`b
    [SpinSmash]     4`b % weight (0-4)
    % ui positions
    [Size]         95`b 105`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]    0`b  40`b % dx dy
    [StatusIcon]   25`b  85`b % dx dy
}

#new:Script $Script_Init_8021C82C
{
    Call  ForceHomePos  ( .Actor:Self 0000005A 0000002D FFFFFFF6 )
    Call  HPBarToHome   ( .Actor:Self )
    Call  SetActorScale ( .Actor:Self *Fixed[1.25] *Fixed[1.25] *Fixed[1.0] )
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
    Exec  $Script_UpdateElectictyPosition
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8021D40C )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021CAB0 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021CEE8 )
    Return
    End
}

#new:Script $Script_UpdateElectictyPosition
{
    Label  0
    Call  ActorExists   ( .Actor:Self *Var[0] )
    If  *Var[0]  ==  .False
        Return
    EndIf
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  !=  .True
        Goto  63
    EndIf
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    If  *Var[0]  ==  .False
        Goto  63
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[1] *Var[2] *Var[3] )
    Call  GetStatusFlags    ( .Actor:Self *Var[4] )
    If  *Var[4]  !&  00080000
        Add   *Var[2]  0000002D
        SetF  *Var[4]  *Fixed[1.6]
    Else
        Add   *Var[2]  00000012
        SetF  *Var[4]  *Fixed[0.64]
    EndIf
    Call  $Function_80218404    ( *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] )
    Label  63
    Wait  1`
    Goto  0
    Return
    End
}

#new:Script $Script_Idle_8021CAB0
{
    Label  0
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000000
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  B
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021C5E0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Label  B
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000000A
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  C
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021C5E0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Wait  3`
    Label  C
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021C61C )
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  FFFFFFF6
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.3] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Wait  1`
    Goto  0
    Return
    End
}

#new:Script $Script_HandleEvent_8021CEE8
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
            ExecWait  $Script_8021EE44
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
            ExecWait  $Script_8021EE44
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021D3E0
            Return
        Case  ==  .Event:BurnHit % E
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
            ExecWait  $Script_8021EE44
        Case  ==  .Event:BurnDeath % 24
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
            ExecWait  $Script_8021EE44
            SetConst  *Var[1]  00500006
            ExecWait  $Script_8021D3E0
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
            ExecWait  $Script_8021EE44
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
            ExecWait  $Script_8021EE44
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021D3E0
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
        CaseOR  ==  0000001D % 1D
        CaseOR  ==  0000001E % 1E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoImmune
        EndCaseGroup
        CaseOR  ==  .Event:StarBeam % 13
        CaseOR  ==  00000014 % 14
            ExecWait  $Script_8021EE44
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            ExecWait  $Script_8021C54C
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_8021D3E0
            Return
        Case  ==  .Event:EndFirstStrike % 35
            ExecWait  $Script_8021C54C
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoRecover
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021D3E0
{
    SetConst  *Var[0]  00000001
    ExecWait  DoDeath
    Return
    End
}

#new:Script $Script_TakeTurn_8021D40C
{
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
        ExecWait  $Script_ElectroTackle
        Return
    EndIf
    Call  GetActorVar   ( .Actor:Self 00000002 *Var[0] )
    If  *Var[0]  ==  00000001
        ExecWait  $Script_Electrify
        Return
    Else
        Call  GetStatusFlags    ( .Actor:Self *Var[0] )
        If  *Var[0]  !&  00080000
            Call  SetActorVar   ( .Actor:Self 00000002 00000001 )
            Call  RandInt       ( 00000064 *Var[0] )
            If  *Var[0]  <  00000032
                ExecWait  $Script_Tackle_ElectroBlooper
            Else
                ExecWait  $Script_SprayInk_ElectroBlooper
            EndIf
        Else
            ExecWait  $Script_Tackle_ElectroBlooper
        EndIf
    EndIf
    Return
    End
}

#new:Script $Script_Electrify
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000041
    Call  UseCamPreset      ( 00000013 )
    Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
    Call  SetBattleCamZoom  ( 00000140 )
    Call  MoveBattleCamOver ( 00000032 )
    Wait  20`
    Call  $Function_802182EC ( )
    Call  $Function_80218200    ( 00000046 00000050 )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 00000028 *Fixed[0.3] )
    EndThread
    Call  SetAnimation      ( .Actor:Self 00000001 00500009 )
    Wait  10`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000A )
    Wait  10`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000B )
    Wait  10`
    ExecWait  $Script_8021EC88
    Wait  20`
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 0000001E )
    Call  $Function_80218384 ( )
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    Return
    End
}

#new:Script $Script_Tackle_ElectroBlooper
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  !&  00080000
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000070
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 000001F4 )
        Call  MoveBattleCamOver ( 00000082 )
    Else
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000052
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 00000181 )
        Call  MoveBattleCamOver ( 00000082 )
    EndIf
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000F
    ExecWait  $Script_8021C070
    Call  PlaySoundAtActor  ( .Actor:Self 000003DD )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Set   *Var[0]  00000000
                Loop  00000024
                    Add   *Var[0]  0000001E
                    Call  SetActorYaw   ( .Actor:Self *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  UseCamPreset  ( 00000002 )
            Call  MoveBattleCamOver     ( 00000014 )
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8021C54C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Thread
        Set   *Var[0]  00000000
        Loop  00000010
            Add   *Var[0]  0000001E
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetAnimation      ( .Actor:Self 00000001 0050000D )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000001E
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 00000010 .False .True .False )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000004 00000020 )
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 00000014 )
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000 % 100000
        Call  SetAnimation  ( .Actor:Self 00000001 00500004 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_8021C54C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_ElectroTackle
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  !&  00080000
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000070
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 000001F4 )
        Call  MoveBattleCamOver ( 00000082 )
    Else
        Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000052
        Call  UseCamPreset      ( 00000013 )
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 00000181 )
        Call  MoveBattleCamOver ( 00000082 )
    EndIf
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000F
    ExecWait  $Script_8021C070
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:Electric 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Set   *Var[0]  00000000
                Loop  00000024
                    Add   *Var[0]  0000001E
                    Call  SetActorYaw   ( .Actor:Self *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  UseCamPreset  ( 00000002 )
            Call  MoveBattleCamOver     ( 00000014 )
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8021C54C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Thread
        Set   *Var[0]  00000000
        Loop  00000010
            Add   *Var[0]  0000001E
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000001E
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
    Wait  2`
    Call  EnemyDamageTarget     ( .Actor:Self *Var[0] ~Flags:DamageType:Electric 00000008 00000000 00000006 00000020 )
    If  *Var[F]  !=  00000007
        ExecWait  $Script_8021EE44
    EndIf
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 00000014 )
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000
        Call  SetAnimation  ( .Actor:Self 00000001 00500004 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_8021C54C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_SprayInk_ElectroBlooper
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000055
    Add   *Var[1]  0000002D
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos       ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  0000001E
        Sub   *Var[B]  0000001E
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Thread
        Call  UseCamPreset      ( 00000013 )
        Sub   *Var[0]  0000001E
        Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
        Call  SetBattleCamZoom  ( 0000015E )
        Call  MoveBattleCamOver ( 00000050 )
    EndThread
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.5]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.5]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.5]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500003 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  0000001E
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
    Call  SetActorSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FlyToGoal     ( .Actor:Self 00000010 00000000 .Easing:Linear )
    Call  UseCamPreset  ( 00000002 )
    Call  MoveBattleCamOver ( 0000000A )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000028 00000000 )
    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFD8 )
    Call  PlaySoundAtActor  ( .Actor:Self 000003DE )
    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    Add   *Var[3]  00000001
    Sub   *Var[4]  0000001C
    Sub   *Var[5]  00000003
    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Call  $Function_802184E4    ( *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Wait  10`
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  30`
            Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
            Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            ExecWait  $Script_8021C54C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Wait  10`
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  80269EAC  ( 0000001A )
    Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000000 00000004 00000020 )
    Wait  30`
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
    ExecWait  $Script_8021C54C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021EC88
{
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  !=  00000000
        Return
    EndIf
    Call  SetActorVar       ( .Actor:Self 00000000 00000001 )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  GetStatusFlags    ( .Actor:Self *Var[3] )
    If  *Var[3]  !&  00080000
        Add   *Var[1]  0000002D
        SetF  *Var[3]  *Fixed[1.6]
    Else
        Add   *Var[1]  00000012
        SetF  *Var[3]  *Fixed[0.64]
    EndIf
    Call  PlayEffect        ( ~FX:SnakingStatic *Var[0] *Var[1] *Var[2] *Var[3] FFFFFFFF 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
    Call  SetActorVar       ( .Actor:Self 00000001 *Var[F] )
    Call  PlaySoundAtActor  ( .Actor:Self 0000035C )
    Call  SetPartEventFlags ( .Actor:Self 00000002 00400080 )
    Call  8026ED20  ( FFFFFF81 00000001 00000001 )
    Call  8026EA7C  ( FFFFFF81 00000001 00000004 )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_8021C710 )
    Return
    End
}

#new:Script $Script_8021EE44
{
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  !=  00000001
        Return
    EndIf
    Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    If  *Var[0]  !=  00000000
        Call  RemoveEffect  ( *Var[0] )
        Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    EndIf
    Call  SetPartEventFlags ( .Actor:Self 00000002 00000000 )
    Call  8026ED20  ( FFFFFF81 00000001 00000000 )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_8021C664 )
    Return
    End
}

PADDING: 8021EF58 to 8021EF60 (0060FA08 to 0060FA10)
00000000 00000000

#new:Script $Script_8021EF60
{
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  00000014
        Sub   *Var[B]  00000014
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[4]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[5]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[6]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Return
    End
}

#new:Script $Script_8021F43C
{
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[3]  0000000C
    ExecWait  $Script_8021EF60
    Return
    End
}

#new:IdleAnimations $IdleAnimations_8021F494
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F4D0
{
    .Status:Normal    0050000C
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    0050000C
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F50C
{
    .Status:Normal    00500000
    .Status:Stop      00500000
    .Status:Sleep     00500007
    .Status:Paralyze  00500008
    .Status:Paralyze  00500000
    .Status:Dizzy     00500008
    .Status:Shrink    00500000
    .Status:End
}

#new:DefenseTable $DefenseTable_8021F548
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8021F554
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      40`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy      60`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze   50`
    .Status:Shrink     70`
    .Status:Stop       60`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod      -2`
    .Status:End
}

#new:StatusTable $StatusTable_8021F600
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep       0`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy       0`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze    0`
    .Status:Shrink      0`
    .Status:Stop        0`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod      -2`
    .Status:End
}

#new:PartsTable $PartsTable_8021F6AC
{
    00020000 01000000 005000FF $IdleAnimations_8021F494 $DefenseTable_8021F548 00000000 00000000 00000000 00000000
    00800000 02001400 003C00FF 00000000 $DefenseTable_8021F548 00000000 00000000 00E20000 00000000
}

#new:Actor $SuperBlooper
{
    % stats
    [Index]        CAb
    [Level]        65`b
    [MaxHP]        70`b
    [Coins]         0`b
    [Flags]       00000200
    [StatusTable] $StatusTable_8021F554
    % ai
    [PartsCount]    2`s
    [PartsTable]  $PartsTable_8021F6AC
    [Script]      $Script_Init_8021F71C
    % move effectiveness
    [Escape]        0`b
    [Item]          0`b
    [AirLift]       0`b
    [Hurricane]     0`b % Bow's "Spook" as well
    [UpAndAway]     0`b
    [PowerBounce]  75`b
    [SpinSmash]     4`b % weight (0-4)
    % ui positions
    [Size]        -111`b -88`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]    0`b  60`b % dx dy
    [StatusIcon]   40`b  80`b % dx dy
}

#new:Script $Script_Init_8021F71C
{
    Call  ForceHomePos  ( .Actor:Self 0000005A 0000002D FFFFFFF6 )
    Call  HPBarToHome   ( .Actor:Self )
    Call  SetActorScale ( .Actor:Self *Fixed[2.0] *Fixed[2.0] *Fixed[2.0] )
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_SuperBlooper )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021F7E0 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021FC18 )
    Return
    End
}

#new:Script $Script_Idle_8021F7E0
{
    Label  0
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000000
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  B
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F4D0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Label  B
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000000A
    Call  GetActorPos       ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  C
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F4D0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Wait  3`
    Label  C
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F50C )
    Call  SetIdleGoalToHome ( .Actor:Self )
    Call  GetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  FFFFFFF6
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.3] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Wait  1`
    Goto  0
    Return
    End
}

#new:Script $Script_HandleEvent_8021FC18
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_80220100
            Return
        Case  ==  .Event:BurnHit % E
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            Set   *Var[0]  00000001
            Set   *Var[1]  00500005
            Set   *Var[2]  00500006
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500006
            ExecWait  $Script_80220100
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_80220100
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
        CaseOR  ==  0000001D % 1D
        CaseOR  ==  0000001E % 1E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoImmune
        EndCaseGroup
        CaseOR  ==  .Event:StarBeam % 13
        CaseOR  ==  00000014 % 14
            ExecWait  $Script_80221E80
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:ShockHit % 2F
            ExecWait  $Script_80221E80
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            ExecWait  $Script_8021F43C
        Case  ==  .Event:ShockDeath % 26
            ExecWait  $Script_80221E80
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500004
            ExecWait  $Script_80220100
            Return
        Case  ==  .Event:EndFirstStrike % 35
            ExecWait  $Script_8021F43C
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00500000
            ExecWait  DoRecover
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80220100
{
    ExecWait  DoDeath
    Return
    End
}

#new:Script $Script_TakeTurn_SuperBlooper
{
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000003
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            If  *Var[0]  ==  00000000
                Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
            EndIf
        Case  ==  00000001
            Call  GetStatusFlags    ( .Actor:Self *Var[0] )
            If  *Var[0]  &  00080000
                Call  SetActorVar   ( .Actor:Self 00000001 00000002 )
            Else
                Call  ActorExists   ( .Actor:Enemy1 *Var[0] )
                If  *Var[0]  !=  .False
                    Call  ActorExists   ( .Actor:Enemy2 *Var[0] )
                    If  *Var[0]  !=  .False
                        Call  SetActorVar   ( .Actor:Self 00000001 00000002 )
                    EndIf
                EndIf
            EndIf
        Default
    EndSwitch
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    Switch  *Var[0]
        Case  ==  .True
            Call  SetActorVar   ( .Actor:Self 00000001 00000002 )
            ExecWait  $Script_SpawnBabies
            Return
        Case  ==  00000002
            Call  SetActorVar   ( .Actor:Self 00000001 00000003 )
            ExecWait  $Script_Enrage
            Return
        Case  ==  00000003
            Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
            ExecWait  $Script_EnragedTackle
            Return
        Default
            Call  GetStatusFlags    ( .Actor:Self *Var[0] )
            If  *Var[0]  !&  00080000
                Call  SetActorVar   ( .Actor:Self 00000001 00000001 )
                Call  RandInt       ( 00000064 *Var[0] )
                If  *Var[0]  <  00000032
                    ExecWait  $Script_Tackle_SuperBlooper
                Else
                    ExecWait  $Script_SprayInk_SuperBlooper
                EndIf
            Else
                ExecWait  $Script_Tackle_SuperBlooper
            EndIf
    EndSwitch
    Return
    End
}

#new:Script $Script_Tackle_SuperBlooper
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000F
    ExecWait  $Script_8021EF60
    Call  PlaySoundAtActor  ( .Actor:Self 000003DD )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Set   *Var[0]  00000000
                Loop  00000024
                    Add   *Var[0]  0000001E
                    Call  SetActorYaw   ( .Actor:Self *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8021F43C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Thread
        Set   *Var[0]  00000000
        Loop  00000010
            Add   *Var[0]  0000001E
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetAnimation      ( .Actor:Self 00000001 0050000D )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000001E
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 00000010 .False .True .False )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000005 00000020 )
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000 % 100000
        Call  SetAnimation  ( .Actor:Self 00000001 00500004 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_8021F43C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_SprayInk_SuperBlooper
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000055
    Add   *Var[1]  0000002D
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos       ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  0000001E
        Sub   *Var[B]  0000001E
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.5]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.5]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.5]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000C )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DC )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self 0000000F FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00500003 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  0000001E
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
    Call  SetActorSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FlyToGoal     ( .Actor:Self 00000010 00000000 .Easing:Linear )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000028 00000000 )
    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 FFFFFFD8 )
    Call  PlaySoundAtActor      ( .Actor:Self 000003DE )
    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    Add   *Var[3]  00000001
    Sub   *Var[4]  0000001E
    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Call  $Function_80218884    ( *Var[0] *Var[1] *Var[2] *Var[3] *Var[4] *Var[5] )
    Call  EnemyTestTarget       ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Wait  10`
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  30`
            Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
            Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            ExecWait  $Script_8021F43C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Wait  10`
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  80269EAC  ( 0000001A )
    Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:NoContact 00000000 00000000 00000005 00000020 )
    Wait  30`
    Call  SetAnimation      ( .Actor:Self 00000001 00500000 )
    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
    ExecWait  $Script_8021F43C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_SpawnBabies
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  UseCamPreset      ( 00000007 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetBattleCamOffsetZ   ( 00000032 )
    Call  SetBattleCamZoom  ( 0000014A )
    Call  MoveBattleCamOver ( 00000028 )
    Wait  20`
    Call  PlaySoundAtActor  ( .Actor:Self .Sound:BigPowerUp )
    Call  $Function_8021876C ( )
    Call  $Function_80218680    ( 00000032 00000014 )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[0.3] )
    EndThread
    Call  UseCamPreset  ( 00000007 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetBattleCamOffsetZ   ( 00000041 )
    Call  SetBattleCamZoom      ( 000000F0 )
    Call  MoveBattleCamOver     ( 0000000F )
    Call  SetAnimation  ( .Actor:Self 00000001 00500009 )
    Wait  15`
    Call  $Function_80218680    ( 00000064 00000014 )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[0.4] )
    EndThread
    Call  UseCamPreset  ( 00000007 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetBattleCamOffsetZ   ( 00000050 )
    Call  SetBattleCamZoom      ( 00000096 )
    Call  MoveBattleCamOver     ( 0000000F )
    Call  SetAnimation  ( .Actor:Self 00000001 0050000A )
    Wait  15`
    Call  $Function_80218680    ( 00000096 00000014 )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[0.5] )
    EndThread
    Call  UseCamPreset      ( 00000007 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetBattleCamOffsetZ   ( 0000005F )
    Call  SetBattleCamZoom  ( 0000003C )
    Call  MoveBattleCamOver ( 0000000F )
    Call  SetAnimation      ( .Actor:Self 00000001 0050000B )
    Wait  30`
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 00000014 )
    Call  SetAnimation      ( .Actor:Self 00000001 00500003 )
    Wait  10`
    Call  ActorExists       ( .Actor:Enemy1 *Var[1] )
    If  *Var[1]  ==  .False
        Call  PlaySoundAtActor  ( .Actor:Self 000003D9 )
        Call  SummonEnemy       ( $SpecialFormation_80221EFC 00000000 )
    EndIf
    Call  ActorExists   ( .Actor:Enemy2 *Var[1] )
    If  *Var[1]  ==  .False
        Call  PlaySoundAtActor  ( .Actor:Self 000003D9 )
        Call  SummonEnemy       ( $SpecialFormation_80221F18 00000000 )
    EndIf
    Wait  2`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000C )
    Call  $Function_80218804 ( )
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    Return
    End
}

#new:Script $Script_Enrage
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  UseCamPreset      ( 00000007 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetBattleCamOffsetZ   ( 0000001C )
    Call  SetBattleCamZoom  ( 00000129 )
    Call  MoveBattleCamOver ( 00000032 )
    Wait  20`
    Call  PlaySoundAtActor  ( .Actor:Self .Sound:BigPowerUp )
    Call  $Function_8021876C ( )
    Call  $Function_80218680    ( 00000046 00000050 )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 00000028 *Fixed[0.3] )
    EndThread
    Call  SetAnimation      ( .Actor:Self 00000001 00500009 )
    Wait  10`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000A )
    Wait  10`
    Call  SetAnimation      ( .Actor:Self 00000001 0050000B )
    Wait  10`
    ExecWait  $Script_80221DC4
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 0000001E )
    Call  $Function_80218804 ( )
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    Return
    End
}

#new:Script $Script_EnragedTackle
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000F
    ExecWait  $Script_8021EF60
    Call  PlaySoundAtActor  ( .Actor:Self 000003DD )
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Set   *Var[0]  00000000
                Loop  00000024
                    Add   *Var[0]  0000001E
                    Call  SetActorYaw   ( .Actor:Self *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            ExecWait  $Script_80221E80
            If  *Var[F]  ==  00000005
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8021F43C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Thread
        Set   *Var[0]  00000000
        Loop  00000010
            Add   *Var[0]  0000001E
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetAnimation  ( .Actor:Self 00000001 0050000D )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000001E
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
    Call  GetStatusFlags        ( .Actor:Player *Var[E] )
    If  *Var[E]  &  00100000
        Goto  0
    EndIf
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000000 0000000A 00000040 )
    Call  GetPlayerHP       ( *Var[E] )
    If  *Var[E]  ==  00000000
        Goto  1
    EndIf
    Thread
        Set   *Var[0]  00000000
        Loop  00000014
            Add   *Var[0]  00000024
            Call  SetActorYaw   ( .Actor:Self *Var[0] )
            Wait  1`
        EndLoop
        Call  SetActorYaw   ( .Actor:Self 00000000 )
    EndThread
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.4] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 00000014 .False .True .False )
    Label  0
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000000 0000000A 00000020 )
    Label  1
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000
        Call  SetAnimation  ( .Actor:Self 00000001 00500004 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00500000 )
    EndIf
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_80221E80
    ExecWait  $Script_8021F43C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80221DC4
{
    Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
    Call  8026ED20      ( FFFFFF81 00000001 00000001 )
    Call  8026EBF8      ( FFFFFF81 00000001 00000000 00000002 00000000 00000006 0000000C 00000006 00000000 00000000 )
    Call  8026EA7C      ( FFFFFF81 00000001 0000000F )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_8021F600 )
    Call  SetPartEventBits  ( .Actor:Self 00000002 00400000 .True )
    Return
    End
}

#new:Script $Script_80221E80
{
    Call  SetActorVar       ( .Actor:Self 00000000 00000000 )
    Call  8026ED20  ( FFFFFF81 00000001 00000000 )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_8021F554 )
    Call  SetPartEventBits  ( .Actor:Self 00000002 00400000 .False )
    Return
    End
}

#new:Vector3D $Vector3D_80221EF0
{
    400` 0` 0`
}

#new:SpecialFormation $SpecialFormation_80221EFC
{
    $BlooperBaby $Vector3D_80221EF0 0000005F 0000001E 00000044 00000000 00000000
}

#new:SpecialFormation $SpecialFormation_80221F18
{
    $BlooperBaby $Vector3D_80221EF0 0000005E 00000086 0000002D 00000000 00000000
}

PADDING: 80221F34 to 80221F40 (006129E4 to 006129F0)
00000000 00000000 00000000

#new:Script $Script_80221F40
{
    Call  SetAnimation  ( .Actor:Self 00000001 00510000 )
    Call  SetAnimation  ( .Actor:Self 00000001 00510001 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    If  *Var[B]  >  00000014
        Sub   *Var[B]  00000014
    Else
        Set   *Var[B]  00000000
    EndIf
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
    Call  PlaySoundAtActor      ( .Actor:Self 0000035F )
    Set   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[4]
    Add   *Var[7]  *Var[0]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[5]
    Add   *Var[8]  *Var[1]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[6]
    Add   *Var[9]  *Var[2]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00510000 )
    Call  SetAnimation  ( .Actor:Self 00000001 00510001 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 0000035F )
    Set   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[0]
    Add   *Var[7]  *Var[4]
    MulF  *Var[7]  *Fixed[0.33]
    Set   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[1]
    Add   *Var[8]  *Var[5]
    MulF  *Var[8]  *Fixed[0.33]
    Set   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[2]
    Add   *Var[9]  *Var[6]
    MulF  *Var[9]  *Fixed[0.33]
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[7] *Var[8] *Var[9] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Call  SetAnimation  ( .Actor:Self 00000001 00510000 )
    Call  SetAnimation  ( .Actor:Self 00000001 00510001 )
    Call  GetActorPos   ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Sub   *Var[B]  00000014
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  FallToGoal    ( .Actor:Self 00000008 )
    Call  PlaySoundAtActor      ( .Actor:Self 0000035F )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self *Var[3] FFFFFFFE .Easing:CubicOut )
    Return
    End
}

#new:Script $Script_8022241C
{
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[3]  0000000C
    ExecWait  $Script_80221F40
    Return
    End
}

#new:IdleAnimations $IdleAnimations_80222474
{
    .Status:Normal    00510000
    .Status:Stop      00510000
    .Status:Sleep     00510006
    .Status:Paralyze  00510007
    .Status:Paralyze  00510000
    .Status:Dizzy     00510007
    .Status:Shrink    00510000
    .Status:End
}

#new:IdleAnimations $IdleAnimations_802224B0
{
    .Status:Normal    00510001
    .Status:Stop      00510000
    .Status:Sleep     00510006
    .Status:Paralyze  00510007
    .Status:Paralyze  00510000
    .Status:Dizzy     00510007
    .Status:Shrink    00510001
    .Status:End
}

#new:IdleAnimations $IdleAnimations_802224EC
{
    .Status:Normal    00510000
    .Status:Stop      00510000
    .Status:Sleep     00510006
    .Status:Paralyze  00510007
    .Status:Paralyze  00510000
    .Status:Dizzy     00510007
    .Status:Shrink    00510000
    .Status:End
}

#new:DefenseTable $DefenseTable_80222528
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_80222534
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep     100`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy     100`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze  100`
    .Status:Shrink      0`
    .Status:Stop      100`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod  -1`
    .Status:ShrinkTurnMod    -1`
    .Status:StopTurnMod      -2`
    .Status:End
}

#new:PartsTable $PartsTable_802225E0
{
    00020000 01000000 005500FF $IdleAnimations_80222474 $DefenseTable_80222528 00000000 00000000 00000000 00000000
    00800000 02001B00 000000FF 00000000 $DefenseTable_80222528 00000000 00000000 01F30000 00000000
}

#new:Actor $BlooperBaby
{
    % stats
    [Index]        CCb
    [Level]         0`b
    [MaxHP]         6`b
    [Coins]         0`b
    [Flags]       00000200
    [StatusTable] $StatusTable_80222534
    % ai
    [PartsCount]    2`s
    [PartsTable]  $PartsTable_802225E0
    [Script]      $Script_Init_80222650
    % move effectiveness
    [Escape]        0`b
    [Item]          0`b
    [AirLift]       0`b
    [Hurricane]     0`b % Bow's "Spook" as well
    [UpAndAway]     0`b
    [PowerBounce]  95`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         28`b  25`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -12`b  20`b % dx dy
    [StatusIcon]   10`b  25`b % dx dy
}

#new:Script $Script_Init_80222650
{
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8022319C )
    Call  BindHandleEvent       ( .Actor:Self $Script_HandleEvent_80222CF8 )
    Call  PlaySoundAtActor      ( .Actor:Self 0000035F )
    Call  $Function_80218A20    ( 00000050 00000014 )
    Call  SetAnimation  ( .Actor:Self 00000001 00510000 )
    Call  SetAnimation  ( .Actor:Self 00000001 00510001 )
    Call  GetActorPos   ( .Actor:Enemy0 *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  0000000A
    Sub   *Var[2]  0000000A
    Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000014
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
    Call  SetActorSpeed ( .Actor:Self *Fixed[0.3] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self 00000008 00000000 .Easing:Linear )
    Call  PlaySoundAtActor      ( .Actor:Self 0000035F )
    Call  $Function_80218A20    ( 00000050 00000014 )
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[1] )
    Call  GetActorVar   ( .Actor:Self 00000002 *Var[2] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  FlyToGoal     ( .Actor:Self 0000000C FFFFFFFE .Easing:CubicOut )
    Call  ForceHomePos  ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  BindIdle      ( .Actor:Self $Script_Idle_802228C0 )
    Call  HPBarToHome   ( .Actor:Self )
    Return
    End
}

#new:Script $Script_Idle_802228C0
{
    Label  0
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000000
    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  B
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802224B0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00510000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 00510001 )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Label  B
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetGoalToHome ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000005
    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    If  *Var[4]  >=  *Var[1]
        Goto  C
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802224B0 )
    Call  SetAnimation      ( .Actor:Self 00000001 00510000 )
    Wait  9`
    Call  SetAnimation      ( .Actor:Self 00000001 00510001 )
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[1.0] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:SinOut )
    Wait  3`
    Label  C
    Call  GetStatusFlags    ( .Actor:Self *Var[A] )
    If  *Var[A]  &  00351000
        Wait  1`
        Goto  0
    EndIf
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802224EC )
    Call  SetGoalToHome     ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  FFFFFFFB
    Call  SetActorIdleJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.3] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Wait  1`
    Goto  0
    Return
    End
}

#new:Script $Script_HandleEvent_80222CF8
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoNormalHit
            SetConst  *Var[1]  00510003
            ExecWait  $Script_80223170
            Return
        Case  ==  .Event:BurnHit % E
            Set   *Var[0]  00000001
            Set   *Var[1]  00510004
            Set   *Var[2]  00510005
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            Set   *Var[0]  00000001
            Set   *Var[1]  00510004
            Set   *Var[2]  00510005
            ExecWait  DoBurnHit
            SetConst  *Var[1]  00510005
            ExecWait  $Script_80223170
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510003
            ExecWait  $Script_80223170
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510000
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:ShockHit % 2F
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoJumpBack
            ExecWait  $Script_8022241C
        CaseOR  ==  .Event:ShockDeath % 26
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510002
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510003
            ExecWait  $Script_80223170
            Return
        Case  ==  .Event:EndFirstStrike % 35
            ExecWait  $Script_8022241C
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00510000
            ExecWait  DoRecover
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80223170
{
    SetConst  *Var[0]  00000001
    ExecWait  DoDeath
    Return
    End
}

#new:Script $Script_TakeTurn_8022319C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000064
    Set   *Var[3]  0000000C
    ExecWait  $Script_80221F40
    Thread
        Wait  2`
        Call  PlaySoundAtActor  ( .Actor:Self 00000301 )
    EndThread
    Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[F]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Call  SetAnimation  ( .Actor:Self 00000001 00510002 )
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            If  *Var[F]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[F] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000C .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            ExecWait  $Script_8022241C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
        CaseOR  ==  .HitResult:HitStatic % 7
        CaseOR  ==  .HitResult:Immune % 8
            Call  SetAnimation  ( .Actor:Self 00000001 00510002 )
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            If  *Var[F]  ==  00000007
                Call  EnemyDamageTarget ( .Actor:Self *Var[F] ~Flags:DamageType:0 00000000 00000000 00000000 00000040 )
            EndIf
            Add   *Var[0]  0000001E
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
            ExecWait  $Script_8022241C
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  GetActorPos       ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000032
    Call  UseCamPreset      ( 00000013 )
    Call  SetBattleCamTarget    ( *Var[0] *Var[1] *Var[2] )
    Call  SetBattleCamZoom  ( 00000145 )
    Call  MoveBattleCamOver ( 0000001E )
    Call  SetAnimation      ( .Actor:Self 00000001 00510002 )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[1]  0000000A
    Sub   *Var[2]  00000005
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 00000010 .False .True .False )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetAnimation      ( .Actor:Self 00000001 00510008 )
    Call  ShowMessageBox    ( 00000031 00007FFF )
    Call  802694A4  ( 00000001 )
    Call  LoadActionCommand ( 00000006 )
    Call  802A9000 ( )
    Call  802691C8  ( 00000001 0000000F 00000000 00000000 00000000 00000000 )
    Wait  10`
    Call  SetBattleFlagBits ( 00004000 .False )
    Call  802A9110  ( 00000000 00007FFF 00000003 )
    Loop  00000005
        Call  UseIdleAnimation  ( .Actor:Player .False )
        Call  SetAnimation      ( .Actor:Player 00000000 0003000C )
        Set   *Flag[00]  .False
        Loop  0000000A
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
        Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000002
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.1] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000002
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.2] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000003
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000002
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  UseIdleAnimation  ( .Actor:Player .True )
        Call  80269EAC  ( 00000001 )
        Call  EnemyDamageTarget ( .Actor:Self *Var[0] 0A000000 00000000 00000000 00000002 00000040 )
        Call  StartRumble       ( 00000002 )
        Call  GetLastDamage     ( .Actor:Player *Var[3] )
        If  *Var[3]  !=  00000000
            Call  PlaySoundAtActor  ( .Actor:Self 0000206D )
            Call  PlaySoundAtActor  ( .Actor:Self 00000214 )
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  0000000A
            Call  $Function_80218A78    ( *Var[0] *Var[1] *Var[2] *Var[3] )
            Thread
                Wait  15`
                Call  PlaySoundAtActor      ( .Actor:Self 0000025C )
                Call  $Function_80218B2C    ( *Var[0] *Var[1] *Var[2] *Var[3] )
            EndThread
            Add   *Var[0]  00000014
            Add   *Var[1]  00000014
            Call  PlayEffect    ( ~FX:Recover:HP *Var[0] *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
            Call  GetEnemyMaxHP ( .Actor:Self *Var[1] )
            Call  GetActorHP    ( .Actor:Self *Var[0] )
            Add   *Var[0]  *Var[3]
            If  *Var[0]  >  *Var[1]
                Set   *Var[0]  *Var[1]
            EndIf
            Call  SetEnemyHP    ( .Actor:Self *Var[0] )
        Else
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call  80276F1C      ( 00000042 )
            Call  80269470 ( )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000003
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.8] *Fixed[1.2] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000002
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[0.9] *Fixed[1.1] *Fixed[1.0] )
        Set   *Flag[00]  .False
        Loop  00000002
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            Call  UseIdleAnimation  ( .Actor:Player .True )
            BreakLoop
        EndIf
        Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
        Call  GetPlayerHP   ( *Var[1] )
        If  *Var[1]  ==  00000000
            Call  80276F1C  ( 00000042 )
            Call  80269470 ( )
            BreakLoop
        EndIf
        Set   *Flag[00]  .False
        Loop  0000000C
            Call  GetActionSuccessCopy  ( *Var[1] )
            If  *Var[1]  ==  00000001
                Set   *Flag[00]  .True
                BreakLoop
            EndIf
            Wait  1`
        EndLoop
        If  *Flag[00]  ==  .True
            Call  80276F1C  ( 00000042 )
            BreakLoop
        EndIf
    EndLoop
    Call  80276F1C  ( 00000042 )
    Call  80269470 ( )
    Call  UseIdleAnimation  ( .Actor:Player .True )
    Call  UseCamPreset      ( 00000002 )
    Call  MoveBattleCamOver ( 00000014 )
    Call  GetStatusFlags    ( .Actor:Player *Var[0] )
    If  *Var[0]  &  00100000
        Call  SetAnimation  ( .Actor:Self 00000001 00510002 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00510000 )
    EndIf
    Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  0000001E
    Sub   *Var[1]  0000000F
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000A .False .True .False )
    ExecWait  $Script_8022241C
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

PADDING: 80224398 to 802243A0 (00614E48 to 00614E50)
00000000 00000000

#new:Script $Script_802243A0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80224470
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] 00000000 )
        Call  SetTexPanOffset   ( *Var[A] 00000001 *Var[1] 00000000 )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_8022455C
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 00000000 *Var[0] )
        Call  SetTexPanOffset   ( *Var[A] 00000001 00000000 *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

#new:Script $Script_80224648
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80224B18
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt01:o351 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_80218BE0    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_80224648
    Goto  0
    Return
    End
}

#new:Script $Script_80224CE0
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80224B18
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt01:o351 .False )
    Return
    End
}

#new:Unknown $???_80224E9C
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80224EC0
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  0000000D
    Set   *Var[1]  00000000
    Set   *Var[2]  00000000
    Set   *Var[3]  FFFFFE0C
    Exec  $Script_802243A0
    Set   *Var[0]  $???_80224E9C
    Exec  $Script_80224CE0
    Return
    End
}

#new:Script $Script_AfterBattle_80224F64
{
    Return
    End
}

#new:Stage $Stage_80224F74
{
    $ASCII_80227B30  % tik_tex
    $ASCII_80227B20  % tik_bt01_shape
    $ASCII_80227B10  % tik_bt01_hit
    $Script_BeforeBattle_80224EC0
    $Script_AfterBattle_80224F64
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 80224F9C to 80224FA0 (00615A4C to 00615A50)
00000000

#new:Script $Script_80224FA0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80225070
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] 00000000 )
        Call  SetTexPanOffset   ( *Var[A] 00000001 *Var[1] 00000000 )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_8022515C
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 00000000 *Var[0] )
        Call  SetTexPanOffset   ( *Var[A] 00000001 00000000 *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

#new:Script $Script_80225248
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80225718
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt02:o354 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_80219080    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_80225248
    Goto  0
    Return
    End
}

#new:Script $Script_802258E0
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80225718
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt02:o354 .False )
    Return
    End
}

#new:Unknown $???_80225A9C
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80225AC0
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  $???_80225A9C
    Exec  $Script_802258E0
    Set   *Var[0]  0000000E
    Set   *Var[1]  00000000
    Set   *Var[2]  00000000
    Set   *Var[3]  FFFFFE0C
    Exec  $Script_80224FA0
    Return
    End
}

#new:Script $Script_AfterBattle_80225B64
{
    Return
    End
}

#new:Stage $Stage_80225B74
{
    $ASCII_80227B58  % tik_tex
    $ASCII_80227B48  % tik_bt02_shape
    $ASCII_80227B38  % tik_bt02_hit
    $Script_BeforeBattle_80225AC0
    $Script_AfterBattle_80225B64
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 80225B9C to 80225BA0 (0061664C to 00616650)
00000000

#new:Script $Script_80225BA0
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80226070
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt03:o371 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_80219520    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_80225BA0
    Goto  0
    Return
    End
}

#new:Script $Script_80226238
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80226070
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt03:o371 .False )
    Return
    End
}

#new:Unknown $???_802263F4
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80226418
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  $???_802263F4
    Exec  $Script_80226238
    Return
    End
}

#new:Script $Script_AfterBattle_80226470
{
    Return
    End
}

#new:Stage $Stage_80226480
{
    $ASCII_80227B80  % tik_tex
    $ASCII_80227B70  % tik_bt03_shape
    $ASCII_80227B60  % tik_bt03_hit
    $Script_BeforeBattle_80226418
    $Script_AfterBattle_80226470
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 802264A8 to 802264B0 (00616F58 to 00616F60)
00000000 00000000

% Origin: HEURISTIC
#new:Script $Script_802264B0
{
    Set   *Var[A]  *Var[0]
    Label  0
    Call  $Function_802199C0    ( 00000000 )
    Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  1`
    Loop
        Call  $Function_802199C0    ( 00000001 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000001
            BreakLoop
        EndIf
    EndLoop
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
    Wait  5`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
    Wait  2`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
    Wait  3`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  5`
    Loop
        Call  $Function_802199C0    ( 00000002 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000002
            BreakLoop
        EndIf
    EndLoop
    Call  RandInt   ( 00000050 *Var[B] )
    Add   *Var[B]  0000001E
    Loop  *Var[B]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
    EndLoop
    Call  RandInt   ( 00000005 *Var[0] )
    If  *Var[0]  !=  00000000
        Goto  0
    EndIf
    Call  $Function_802199C0    ( 00000003 )
    Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  1`
    Loop
        Call  $Function_802199C0    ( 00000001 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000001
            BreakLoop
        EndIf
    EndLoop
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
    Wait  5`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
    Wait  2`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
    Wait  3`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  5`
    Loop
        Call  $Function_802199C0    ( 00000002 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000002
            BreakLoop
        EndIf
    EndLoop
    Call  RandInt   ( 00000050 *Var[B] )
    Add   *Var[B]  0000001E
    Loop  *Var[B]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
    EndLoop
    Goto  0
    Return
    End
}

#new:Script $Script_80226B40
{
    Set   *Var[A]  *Var[0]
    Loop
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
    EndLoop
    Return
    End
}

#new:IntTable $IntTable_80226EE4
{
    00000000 FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFE FFFFFFFD FFFFFFFB FFFFFFF8
    FFFFFFF8 FFFFFFF9 FFFFFFFA FFFFFFFC FFFFFFFE FFFFFFFF 00000000 000000FF
}

#new:Script $Script_80226F24
{
    Set   *Var[A]  *Var[0]
    Set   *Var[B]  *Var[1]
    Set   *Var[5]  00000005
    UseIntBuffer  $IntTable_80226EE4
    Label  0
    Get1Int  *Var[1]
    If  *Var[1]  ==  000000FF
        UseIntBuffer  $IntTable_80226EE4
        Get1Int  *Var[1]
    EndIf
    Set   *Var[0]  *Var[5]
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
    Wait  1`
    Add   *Var[5]  00000001
    Set   *Var[C]  *Var[B]
    Sub   *Var[C]  00000014
    If  *Var[5]  >  *Var[C]
        Goto  1
    EndIf
    Set   *Var[0]  *Var[5]
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
    Wait  1`
    Add   *Var[5]  00000001
    Set   *Var[C]  *Var[B]
    Sub   *Var[C]  00000014
    If  *Var[5]  >  *Var[C]
        Goto  1
    EndIf
    Goto  0
    Label  1
    Set   *Var[2]  00000000
    Loop  00000014
        Add   *Var[5]  00000001
        Sub   *Var[1]  00000002
        Set   *Var[0]  *Var[5]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
        Wait  1`
    EndLoop
    Sub   *Var[5]  00000118
    Set   *Var[1]  00000000
    Goto  0
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80227190
{
    Set   *Var[A]  *Var[0]
    Loop
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
    EndLoop
    Return
    End
}

#new:Script $Script_BeforeBattle_80227534
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Thread
        Set   *Var[0]  0000000F
        Exec  $Script_80226B40
        Wait  5`
        Set   *Var[0]  00000010
        Exec  $Script_80226B40
        Wait  5`
        Set   *Var[0]  00000011
        Exec  $Script_80226B40
    EndThread
    Thread
        Wait  5`
        Set   *Var[0]  00000009
        Set   *Var[1]  00000091
        Exec  $Script_80226F24
        Set   *Var[0]  0000000A
        Set   *Var[1]  00000091
        Exec  $Script_80226F24
    EndThread
    Set   *Var[0]  0000000C
    Set   *Var[1]  0000003C
    Exec  $Script_80226F24
    Set   *Var[0]  0000000D
    Set   *Var[1]  0000003C
    Exec  $Script_80226F24
    Return
    End
}

#new:Script $Script_AfterBattle_802276B8
{
    Return
    End
}

#new:Stage $Stage_802276C8
{
    $ASCII_80227BA8  % tik_tex
    $ASCII_80227B98  % tik_bt04_shape
    $ASCII_80227B88  % tik_bt04_hit
    $Script_BeforeBattle_80227534
    $Script_AfterBattle_802276B8
    00000000
    00000000
    00000000
    00000000
    00000000
}

#new:Script $Script_802276F0
{
    SetGroup  00000000
    If  *Var[5]  ==  00000001
        If  *Var[6]  ==  00000001
            If  *Var[7]  ==  00000001
                If  *Var[8]  ==  00000001
                    Call  $Function_80219E10 ( )
                    Return
                EndIf
            EndIf
        EndIf
    EndIf
    Call  $Function_80219F34 ( )
    Return
    End
}

#new:Script $Script_BeforeBattle_8022778C
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Call  SetTexPanner      ( ~Model:tik_bt05:taki1 00000001 )
    Call  EnableTexPanning  ( ~Model:tik_bt05:taki1 .True )
    Thread
        Set   *Var[0]  00000001
        Set   *Var[1]  00000000
        Set   *Var[2]  FFFFF574
        Set   *Var[3]  00000000
        Set   *Var[4]  FFFFF448
        Set   *Var[5]  00000001
        Set   *Var[6]  00000001
        Set   *Var[7]  00000001
        Set   *Var[8]  00000001
        Set   *Var[9]  00000000
        Set   *Var[A]  00000000
        Set   *Var[B]  00000000
        Set   *Var[C]  00000000
        Exec  $Script_802276F0
    EndThread
    Call  SetTexPanner      ( ~Model:tik_bt05:taki2 00000002 )
    Call  EnableTexPanning  ( ~Model:tik_bt05:taki2 .True )
    Thread
        Set   *Var[0]  00000002
        Set   *Var[1]  00000032
        Set   *Var[2]  FFFFFF38
        Set   *Var[3]  0000006E
        Set   *Var[4]  FFFFFE0C
        Set   *Var[5]  00000001
        Set   *Var[6]  00000001
        Set   *Var[7]  00000001
        Set   *Var[8]  00000001
        Set   *Var[9]  00000000
        Set   *Var[A]  00000000
        Set   *Var[B]  00000000
        Set   *Var[C]  00000000
        Exec  $Script_802276F0
    EndThread
    Return
    End
}

#new:Script $Script_AfterBattle_802279F0
{
    Return
    End
}

#new:ForegroundModelList $ForegroundModelList_80227A00
{
    ~Model:tik_bt05:taki1
    00000000
}

#new:Stage $Stage_80227A08
{
    $ASCII_80227BD0  % tik_tex
    $ASCII_80227BC0  % tik_bt05_shape
    $ASCII_80227BB0  % tik_bt05_hit
    $Script_BeforeBattle_8022778C
    $Script_AfterBattle_802279F0
    00000000
    $ForegroundModelList_80227A00
    00000000
    00000000
    00000000
}

#new:Vector3D $Vector3D_80227A30
{
    80` 45` -10`
}

#new:Formation $Formation_00
{
    $Blooper $Vector3D_80227A30 0000000A 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_01
{
    $ElectroBlooper $Vector3D_80227A30 0000000A 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_02
{
    $SuperBlooper $Vector3D_80227A30 0000000A 00000000 00000000 00000000 00000000
}

#new:FormationTable $FormationTable
{
    $SJIS_80227C0C 00000001 $Formation_00 $Stage_80224F74 00000000
    $SJIS_80227BF8 00000001 $Formation_01 $Stage_80224F74 00000000 % unused
    $SJIS_80227BD8 00000001 $Formation_02 $Stage_80224F74 00000000 % unused
    00000000 00000000 00000000 00000000 00000000 % unused
}

#new:StageTable $StageTable
{
    $ASCII_80227C38 $Stage_80224F74
    $ASCII_80227C30 $Stage_80225B74
    $ASCII_80227C28 $Stage_80226480
    $ASCII_80227C20 $Stage_802276C8
    $ASCII_80227C18 $Stage_80227A08
    00000000 00000000
}

#new:ASCII $ASCII_80227B10
{
    "tik_bt01_hit"
}

#new:ASCII $ASCII_80227B20
{
    "tik_bt01_shape"
}

#new:ASCII $ASCII_80227B30
{
    "tik_tex"
}

#new:ASCII $ASCII_80227B38
{
    "tik_bt02_hit"
}

#new:ASCII $ASCII_80227B48
{
    "tik_bt02_shape"
}

#new:ASCII $ASCII_80227B58
{
    "tik_tex"
}

#new:ASCII $ASCII_80227B60
{
    "tik_bt03_hit"
}

#new:ASCII $ASCII_80227B70
{
    "tik_bt03_shape"
}

#new:ASCII $ASCII_80227B80
{
    "tik_tex"
}

#new:ASCII $ASCII_80227B88
{
    "tik_bt04_hit"
}

#new:ASCII $ASCII_80227B98
{
    "tik_bt04_shape"
}

#new:ASCII $ASCII_80227BA8
{
    "tik_tex"
}

#new:ASCII $ASCII_80227BB0
{
    "tik_bt05_hit"
}

#new:ASCII $ASCII_80227BC0
{
    "tik_bt05_shape"
}

#new:ASCII $ASCII_80227BD0
{
    "tik_tex"
}

#new:SJIS $SJIS_80227BD8
{
    ビッグゲッソー　チビゲッソー % biggugesso- chibigesso-
}

#new:SJIS $SJIS_80227BF8
{
    ビリビリゲッソー % biribirigesso-
}

#new:SJIS $SJIS_80227C0C
{
    ゲッソー % gesso-
}

#new:ASCII $ASCII_80227C18
{
    "tik_05"
}

#new:ASCII $ASCII_80227C20
{
    "tik_04"
}

#new:ASCII $ASCII_80227C28
{
    "tik_03"
}

#new:ASCII $ASCII_80227C30
{
    "tik_02"
}

#new:ASCII $ASCII_80227C38
{
    "tik_01"
}

