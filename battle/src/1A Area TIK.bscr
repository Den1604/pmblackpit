% Script File: 1A Area TIK.bscr
% Decoded from: 5EC490 to 608AB0 (1A Area TIK)

#new:Function $Function_80218000
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A0, 148 (S1)
	JAL       ~Func:get_actor
	COPY      S1, V0
	COPY      V1, V0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

PADDING: 802180CC to 802180D0 (005EC55C to 005EC560)
00000000

#new:Function $Function_802180D0
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_80218128
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A0, 148 (S1)
	JAL       ~Func:get_actor
	COPY      S1, V0
	COPY      V1, V0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

PADDING: 802181F4 to 80218200 (005EC684 to 005EC690)
00000000 00000000 00000000

#new:Function $Function_80218200
{
	ADDIU     SP, SP, FFD8
	SDC1      F22, 20 (SP)
	MOV.S     F22, F12
	SDC1      F20, 18 (SP)
	SW        RA, 10 (SP)
	JAL       ~Func:length2D
	MOV.S     F20, F14
	TRUNC.W.S F6, F20
	MFC1      V0, F6
	NOP
	BLTZL     V0, .o30
	SUBU      V0, R0, V0
	.o30
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	DIV.S     F4, F2, F0
	CLEAR     A0
	ADDIU     A2, R0, 5A
	COPY      A1, A0
	LIA       A3, $FloatTable_80222DA4
	ANDI      V0, A2, FFFF
	.o58
	ANDI      V1, A0, FFFF
	SUBU      V0, V0, V1
	SRL       V1, V0, 1F
	ADDU      V0, V0, V1
	SRA       V0, V0, 1
	ADDU      V1, A0, V0
	ANDI      V0, V1, FFFF
	SLL       V0, V0, 2
	ADDU      V0, V0, A3
	LWC1      F0, 0 (V0)
	C.LT.S    F0, F4
	NOP
	BC1FL     .o94
	COPY      A2, V1
	COPY      A0, V1
	.o94
	ADDIU     A1, A1, 1
	ANDI      V0, A1, FFFF
	SLTIU     V0, V0, 7
	BNE       V0, R0, .o58
	ANDI      V0, A2, FFFF
	ANDI      V0, A0, FFFF
	SLL       V0, V0, 2
	ANDI      V1, A2, FFFF
	LTF       F2, V0 ($FloatTable_80222DA4)
	SLL       V1, V1, 2
	SUB.S     F2, F2, F4
	LTF       F0, V1 ($FloatTable_80222DA4)
	SUB.S     F0, F0, F4
	ABS.S     F2, F2
	ABS.S     F0, F0
	C.LT.S    F2, F0
	NOP
	BC1F      .oF4
	COPY      V1, A2
	COPY      V1, A0
	.oF4
	MTC1      R0, F0
	NOP
	C.LT.S    F22, F0
	NOP
	BC1F      .o130
	NOP
	C.LE.S    F0, F20
	NOP
	BC1F      .o128
	ADDIU     V0, R0, B4
	SUBU      V1, V0, V1
	MTC1      R0, F0
	NOP
	.o128
	C.LT.S    F22, F0
	NOP
	.o130
	BC1F      .o148
	NOP
	C.LT.S    F20, F0
	NOP
	BC1TL     .o148
	ADDIU     V1, V1, B4
	.o148
	MTC1      R0, F0
	NOP
	C.LE.S    F0, F22
	NOP
	BC1F      .o174
	NOP
	C.LT.S    F20, F0
	NOP
	BC1F      .o174
	ADDIU     V0, R0, 168
	SUBU      V1, V0, V1
	.o174
	LW        RA, 10 (SP)
	LDC1      F22, 20 (SP)
	LDC1      F20, 18 (SP)
	ANDI      V0, V1, FFFF
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_8021838C
{
	ADDIU     SP, SP, FFD8
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S2, C (S4)
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	ADDIU     S2, S2, 4
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S1, V0
	COPY      S3, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	SUBU      S3, S3, S0
	COPY      S0, V0
	COPY      A0, S4
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	SUBU      S0, S0, S1
	BNE       S3, R0, .oA0
	NOP
	BNE       S0, R0, .oA0
	COPY      A0, S4
	LW        A1, 0 (S2)
	BEQ       R0, R0, .oC8
	COPY      A2, V0
	.oA0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S0, F14
	NOP
	JAL       $Function_80218200
	CVT.S.W   F14, F14
	COPY      A0, S4
	LW        A1, 0 (S2)
	ADDIU     A2, V0, FFA6
	.oC8
	JAL       ~Func:set_variable
	NOP
	ADDIU     V0, R0, 2
	LW        RA, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_80218480
{
	ADDIU     SP, SP, FFD8
	SDC1      F22, 20 (SP)
	MOV.S     F22, F12
	SDC1      F20, 18 (SP)
	SW        RA, 10 (SP)
	JAL       ~Func:length2D
	MOV.S     F20, F14
	TRUNC.W.S F6, F20
	MFC1      V0, F6
	NOP
	BLTZL     V0, .o30
	SUBU      V0, R0, V0
	.o30
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	DIV.S     F4, F2, F0
	CLEAR     A0
	ADDIU     A2, R0, 5A
	COPY      A1, A0
	LIA       A3, $FloatTable_80224880
	ANDI      V0, A2, FFFF
	.o58
	ANDI      V1, A0, FFFF
	SUBU      V0, V0, V1
	SRL       V1, V0, 1F
	ADDU      V0, V0, V1
	SRA       V0, V0, 1
	ADDU      V1, A0, V0
	ANDI      V0, V1, FFFF
	SLL       V0, V0, 2
	ADDU      V0, V0, A3
	LWC1      F0, 0 (V0)
	C.LT.S    F0, F4
	NOP
	BC1FL     .o94
	COPY      A2, V1
	COPY      A0, V1
	.o94
	ADDIU     A1, A1, 1
	ANDI      V0, A1, FFFF
	SLTIU     V0, V0, 7
	BNE       V0, R0, .o58
	ANDI      V0, A2, FFFF
	ANDI      V0, A0, FFFF
	SLL       V0, V0, 2
	ANDI      V1, A2, FFFF
	LTF       F2, V0 ($FloatTable_80224880)
	SLL       V1, V1, 2
	SUB.S     F2, F2, F4
	LTF       F0, V1 ($FloatTable_80224880)
	SUB.S     F0, F0, F4
	ABS.S     F2, F2
	ABS.S     F0, F0
	C.LT.S    F2, F0
	NOP
	BC1F      .oF4
	COPY      V1, A2
	COPY      V1, A0
	.oF4
	MTC1      R0, F0
	NOP
	C.LT.S    F22, F0
	NOP
	BC1F      .o130
	NOP
	C.LE.S    F0, F20
	NOP
	BC1F      .o128
	ADDIU     V0, R0, B4
	SUBU      V1, V0, V1
	MTC1      R0, F0
	NOP
	.o128
	C.LT.S    F22, F0
	NOP
	.o130
	BC1F      .o148
	NOP
	C.LT.S    F20, F0
	NOP
	BC1TL     .o148
	ADDIU     V1, V1, B4
	.o148
	MTC1      R0, F0
	NOP
	C.LE.S    F0, F22
	NOP
	BC1F      .o174
	NOP
	C.LT.S    F20, F0
	NOP
	BC1F      .o174
	ADDIU     V0, R0, 168
	SUBU      V1, V0, V1
	.o174
	LW        RA, 10 (SP)
	LDC1      F22, 20 (SP)
	LDC1      F20, 18 (SP)
	ANDI      V0, V1, FFFF
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_8021860C
{
	ADDIU     SP, SP, FFD8
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S2, C (S4)
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	ADDIU     S2, S2, 4
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S1, V0
	COPY      S3, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	SUBU      S3, S3, S0
	COPY      S0, V0
	COPY      A0, S4
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	SUBU      S0, S0, S1
	BNE       S3, R0, .oA0
	NOP
	BNE       S0, R0, .oA0
	COPY      A0, S4
	LW        A1, 0 (S2)
	BEQ       R0, R0, .oC8
	COPY      A2, V0
	.oA0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S0, F14
	NOP
	JAL       $Function_80218480
	CVT.S.W   F14, F14
	COPY      A0, S4
	LW        A1, 0 (S2)
	ADDIU     A2, V0, FFA6
	.oC8
	JAL       ~Func:set_variable
	NOP
	ADDIU     V0, R0, 2
	LW        RA, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_80218700
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	COPY      A0, S0
	JAL       ~Func:start_rumble
	COPY      A1, V0
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_80218758
{
	ADDIU     SP, SP, FFD8
	SDC1      F22, 20 (SP)
	MOV.S     F22, F12
	SDC1      F20, 18 (SP)
	SW        RA, 10 (SP)
	JAL       ~Func:length2D
	MOV.S     F20, F14
	TRUNC.W.S F6, F20
	MFC1      V0, F6
	NOP
	BLTZL     V0, .o30
	SUBU      V0, R0, V0
	.o30
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	DIV.S     F4, F2, F0
	CLEAR     A0
	ADDIU     A2, R0, 5A
	COPY      A1, A0
	LIA       A3, $FloatTable_80227B7C
	ANDI      V0, A2, FFFF
	.o58
	ANDI      V1, A0, FFFF
	SUBU      V0, V0, V1
	SRL       V1, V0, 1F
	ADDU      V0, V0, V1
	SRA       V0, V0, 1
	ADDU      V1, A0, V0
	ANDI      V0, V1, FFFF
	SLL       V0, V0, 2
	ADDU      V0, V0, A3
	LWC1      F0, 0 (V0)
	C.LT.S    F0, F4
	NOP
	BC1FL     .o94
	COPY      A2, V1
	COPY      A0, V1
	.o94
	ADDIU     A1, A1, 1
	ANDI      V0, A1, FFFF
	SLTIU     V0, V0, 7
	BNE       V0, R0, .o58
	ANDI      V0, A2, FFFF
	ANDI      V0, A0, FFFF
	SLL       V0, V0, 2
	ANDI      V1, A2, FFFF
	LTF       F2, V0 ($FloatTable_80227B7C)
	SLL       V1, V1, 2
	SUB.S     F2, F2, F4
	LTF       F0, V1 ($FloatTable_80227B7C)
	SUB.S     F0, F0, F4
	ABS.S     F2, F2
	ABS.S     F0, F0
	C.LT.S    F2, F0
	NOP
	BC1F      .oF4
	COPY      V1, A2
	COPY      V1, A0
	.oF4
	MTC1      R0, F0
	NOP
	C.LT.S    F22, F0
	NOP
	BC1F      .o130
	NOP
	C.LE.S    F0, F20
	NOP
	BC1F      .o128
	ADDIU     V0, R0, B4
	SUBU      V1, V0, V1
	MTC1      R0, F0
	NOP
	.o128
	C.LT.S    F22, F0
	NOP
	.o130
	BC1F      .o148
	NOP
	C.LT.S    F20, F0
	NOP
	BC1TL     .o148
	ADDIU     V1, V1, B4
	.o148
	MTC1      R0, F0
	NOP
	C.LE.S    F0, F22
	NOP
	BC1F      .o174
	NOP
	C.LT.S    F20, F0
	NOP
	BC1F      .o174
	ADDIU     V0, R0, 168
	SUBU      V1, V0, V1
	.o174
	LW        RA, 10 (SP)
	LDC1      F22, 20 (SP)
	LDC1      F20, 18 (SP)
	ANDI      V0, V1, FFFF
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_802188E4
{
	ADDIU     SP, SP, FFD8
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S2, C (S4)
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	ADDIU     S2, S2, 4
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	COPY      S1, V0
	COPY      S3, V0
	LW        A1, 0 (S2)
	ADDIU     S2, S2, 4
	COPY      A0, S4
	JAL       ~Func:get_variable
	SUBU      S3, S3, S0
	COPY      S0, V0
	COPY      A0, S4
	LW        A1, 0 (S2)
	JAL       ~Func:get_variable
	SUBU      S0, S0, S1
	BNE       S3, R0, .oA0
	NOP
	BNE       S0, R0, .oA0
	COPY      A0, S4
	LW        A1, 0 (S2)
	BEQ       R0, R0, .oC8
	COPY      A2, V0
	.oA0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S0, F14
	NOP
	JAL       $Function_80218758
	CVT.S.W   F14, F14
	COPY      A0, S4
	LW        A1, 0 (S2)
	ADDIU     A2, V0, FFA6
	.oC8
	JAL       ~Func:set_variable
	NOP
	ADDIU     V0, R0, 2
	LW        RA, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 28
}

PADDING: 802189D8 to 802189E0 (005ECE68 to 005ECE70)
00000000 00000000

#new:Function $Function_802189E0
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A0, 148 (S1)
	JAL       ~Func:get_actor
	COPY      S1, V0
	COPY      V1, V0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

PADDING: 80218AAC to 80218AB0 (005ECF3C to 005ECF40)
00000000

#new:Function $Function_80218AB0
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S3, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	LW        A0, 148 (S1)
	JAL       ~Func:get_actor
	COPY      S1, V0
	COPY      V1, V0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

PADDING: 80218B7C to 80218B80 (005ED00C to 005ED010)
00000000

#new:Function $Function_80218B80
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 80219014 to 80219020 (005ED4A4 to 005ED4B0)
00000000 00000000 00000000

#new:Function $Function_80219020
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 802194B4 to 802194C0 (005ED944 to 005ED950)
00000000 00000000 00000000

#new:Function $Function_802194C0
{
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	COPY      S4, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	JAL       ~Func:get_model_list_index_from_tree_index
	COPY      A0, V0
	JAL       ~Func:get_model_from_list_index
	COPY      A0, V0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	COPY      S1, V0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	CLEAR     S3
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       ~Func:sqrtf
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	CLEAR     S3
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	CLEAR     S3
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       ~Func:sqrtf
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

PADDING: 80219954 to 80219960 (005EDDE4 to 005EDDF0)
00000000 00000000 00000000

% Origin: HEURISTIC
#new:Function $Function_80219960
{
	ADDIU     SP, SP, FFA0
	SW        S0, 20 (SP)
	COPY      S0, A0
	SW        RA, 28 (SP)
	SW        S1, 24 (SP)
	SDC1      F30, 58 (SP)
	SDC1      F28, 50 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S0)
	JAL       ~Func:get_variable
	LW        A1, 0 (V0)
	COPY      S1, V0
	ADDIU     A0, R0, 1
	BEQ       S1, A0, .o100
	SW        S1, 70 (S0)
	SLTI      V0, S1, 2
	BEQ       V0, R0, .o64
	ADDIU     V0, R0, 2
	BEQ       S1, R0, .o7C
	ADDIU     V0, R0, 8E
	BEQ       R0, R0, .o400
	NOP
	.o64
	BEQ       S1, V0, .o27C
	ADDIU     V0, R0, 3
	BEQ       S1, V0, .oBC
	ADDIU     V1, R0, 5B
	BEQ       R0, R0, .o400
	NOP
	.o7C
	LIF       F4, 142.0
	LIF       F30, -118.0
	ADDIU     V1, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V0, 90 (S0)
	ADDIU     V0, R0, 2C
	SW        V0, 9C (S0)
	ADDIU     V0, R0, 3
	SW        R0, 94 (S0)
	SW        V1, 98 (S0)
	SW        V1, A0 (S0)
	BEQ       R0, R0, .oF0
	SW        V0, A4 (S0)
	.oBC
	LIF       F4, 91.0
	LIF       F30, -118.0
	ADDIU     V0, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V1, 90 (S0)
	SW        R0, 94 (S0)
	SW        V0, 98 (S0)
	SW        V1, 9C (S0)
	SW        V0, A0 (S0)
	SW        S1, A4 (S0)
	.oF0
	SW        R0, A8 (S0)
	SW        R0, B0 (S0)
	BEQ       R0, R0, .o400
	SW        A0, 70 (S0)
	.o100
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 2E
	BNE       V0, R0, .o124
	NOP
	ADDIU     V0, R0, 2D
	SW        V0, A8 (S0)
	.o124
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       ~Func:sin_rad
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       ~Func:sin_rad
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	BEQ       R0, R0, .o3F0
	ADDIU     V0, R0, 2D
	.o27C
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 5B
	BNE       V0, R0, .o29C
	ADDIU     V0, R0, 5A
	SW        V0, A8 (S0)
	.o29C
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       ~Func:sin_rad
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       ~Func:sin_rad
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       ~Func:sin_rad
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	ADDIU     V0, R0, 5A
	.o3F0
	LW        V1, A8 (S0)
	BNE       V1, V0, .o400
	CVT.S.D   F30, F20
	SW        S1, B0 (S0)
	.o400
	LWC1      F4, 10 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 84 (S0)
	LWC1      F4, 14 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 88 (S0)
	TRUNC.W.S F4, F30
	SWC1      F4, 8C (S0)
	LW        RA, 28 (SP)
	LW        S1, 24 (SP)
	LW        S0, 20 (SP)
	LDC1      F30, 58 (SP)
	LDC1      F28, 50 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 60
}

#new:Function $Function_80219DB0
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	SW        RA, 14 (SP)
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o30
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o40
	ADDU      V0, V1, V0
	.o30
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o44
	SUBU      V0, V1, A0
	.o40
	SW        V0, A8 (S0)
	.o44
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o64
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o74
	ADDU      V0, V1, V0
	.o64
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o78
	SUBU      V0, V1, A0
	.o74
	SW        V0, AC (S0)
	.o78
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o98
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA8
	ADDU      V0, V1, V0
	.o98
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oAC
	SUBU      V0, V1, A0
	.oA8
	SW        V0, B0 (S0)
	.oAC
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oCC
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oDC
	ADDU      V0, V1, V0
	.oCC
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE0
	SUBU      V0, V1, A0
	.oDC
	SW        V0, B4 (S0)
	.oE0
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_u
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_v
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_u
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_v
	LW        A1, B4 (S0)
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	CLEAR     V0
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_80219ED4
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o24
	SW        RA, 14 (SP)
	SW        R0, 70 (S0)
	SW        R0, 74 (S0)
	SW        R0, 78 (S0)
	SW        R0, 7C (S0)
	.o24
	LW        V0, 70 (S0)
	BNE       V0, R0, .o64
	NOP
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o50
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o60
	ADDU      V0, V1, V0
	.o50
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o64
	SUBU      V0, V1, A0
	.o60
	SW        V0, A8 (S0)
	.o64
	LW        V0, 74 (S0)
	BNE       V0, R0, .oA4
	NOP
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o90
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA0
	ADDU      V0, V1, V0
	.o90
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oA4
	SUBU      V0, V1, A0
	.oA0
	SW        V0, AC (S0)
	.oA4
	LW        V0, 78 (S0)
	BNE       V0, R0, .oE4
	NOP
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oD0
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oE0
	ADDU      V0, V1, V0
	.oD0
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE4
	SUBU      V0, V1, A0
	.oE0
	SW        V0, B0 (S0)
	.oE4
	LW        V0, 7C (S0)
	BNE       V0, R0, .o124
	NOP
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o110
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o120
	ADDU      V0, V1, V0
	.o110
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o124
	SUBU      V0, V1, A0
	.o120
	SW        V0, B4 (S0)
	.o124
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_u
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_main_pan_v
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_u
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       ~Func:set_aux_pan_v
	LW        A1, B4 (S0)
	LW        V0, 70 (S0)
	LW        V1, 78 (S0)
	LW        A0, 98 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 70 (S0)
	LW        V0, 74 (S0)
	ADDIU     V1, V1, 1
	SW        V1, 78 (S0)
	LW        V1, 70 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 74 (S0)
	LW        V0, 7C (S0)
	SLT       V1, V1, A0
	ADDIU     V0, V0, 1
	BNE       V1, R0, .o198
	SW        V0, 7C (S0)
	SW        R0, 70 (S0)
	.o198
	LW        V0, 74 (S0)
	LW        V1, 9C (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1AC
	SW        R0, 74 (S0)
	.o1AC
	LW        V0, 78 (S0)
	LW        V1, A0 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1C0
	SW        R0, 78 (S0)
	.o1C0
	LW        V0, 7C (S0)
	LW        V1, A4 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1D4
	SW        R0, 7C (S0)
	.o1D4
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	CLEAR     V0
	JR        RA
	ADDIU     SP, SP, 18
}

PADDING: 8021A0BC to 8021A0C0 (005EE54C to 005EE550)
00000000

#new:DefenseTable $DefenseTable_8021A0C0
{
    .Element:Normal 00000002
    .Element:Hammer 00000002
    .Element:Jump   00000002
    .Element:Water  00000002
    .Element:Blast  00000002
    .Element:End
}

#new:DefenseTable $DefenseTable_8021A0EC
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8021A0F8
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      80`
    .Status:Poison     60`
    .Status:Frozen    100`
    .Status:Dizzy      50`
    .Status:Fear        0`
    .Status:Static     80`
    .Status:Paralyze   90`
    .Status:Shrink     75`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod     -1`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   1`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_8021A1A4
{
    00800000 01000000 FE2400FF $IdleAnimations_8021A1F0 $DefenseTable_8021A0C0 00001000 00000000 00F90000 00000000
}

#new:Actor $DarkKoopa
{
    % stats
    [Index]         5b
    [Level]        18`b
    [MaxHP]         8`b
    [Coins]         2`b
    [Flags]       00000000
    [StatusTable] $StatusTable_8021A0F8
    % ai
    [PartsCount]    1`s
    [PartsTable]  $PartsTable_8021A1A4
    [Script]      $Script_Init_8021A36C
    % move effectiveness
    [Escape]       60`b
    [Item]         70`b
    [AirLift]      85`b
    [Hurricane]    75`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce]  90`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         28`b  36`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -15`b  32`b % dx dy
    [StatusIcon]    5`b  32`b % dx dy
}

#new:IdleAnimations $IdleAnimations_8021A1F0
{
    .Status:Normal    00290001
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290001
    .Status:Stop      00290000
    .Status:Static    00290001
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A23C
{
    .Status:Normal    00290003
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290003
    .Status:Stop      00290000
    .Status:Static    00290003
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A288
{
    .Status:Normal    00290002
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290002
    .Status:Stop      00290000
    .Status:Static    00290002
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A2D4
{
    .Status:Normal    00290003
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290003
    .Status:Stop      00290000
    .Status:Static    00290003
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021A320
{
    .Status:Normal    0029000F
    .Status:Stone     00290010
    .Status:Sleep     00290012
    .Status:Poison    0029000F
    .Status:Stop      00290010
    .Status:Static    0029000F
    .Status:Paralyze  00290010
    .Status:Dizzy     00290014
    .Status:Fear      00290014
    .Status:End
}

#new:Script $Script_Init_8021A36C
{
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8021D014 )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021A5E4 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021AE4C )
    Call  RandInt       ( 000003E8 *Var[0] )
    If  *Var[0]  <  0000012C
        Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
    Else
        Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
        Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
        Call  SetAnimation      ( .Actor:Self 00000001 00290002 )
    EndIf
    Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    Return
    End
}

#new:Script $Script_8021A464
{
    Switch  *Var[0]
        CaseOR  ==  00000000
        CaseOR  ==  00000001
            If  *Var[1]  &  00041000
                Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFB 0000000F )
                Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
                Call  $Function_80218000    ( FFFFFFF6 00000014 0000000A 00000014 )
            Else
                Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFC 00000020 )
                Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
                Call  $Function_80218000    ( FFFFFFF1 00000020 00000005 00000020 )
            EndIf
        EndCaseGroup
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFB 0000000F )
            Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
            Call  $Function_80218000    ( FFFFFFF6 00000014 0000000A 00000014 )
        EndCaseGroup
    EndSwitch
    Return
    End
}

#new:Script $Script_Idle_8021A5E4
{
    Label  0
    Call  RandInt   ( 00000050 *Var[A] )
    Add   *Var[A]  00000050
    Loop  *Var[A]
        Label  1
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021A464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  1
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  1
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A23C )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A2D4 )
    EndSwitch
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal ( .Actor:Self 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A1F0 )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A320 )
        EndCaseGroup
    EndSwitch
    Loop  00000014
        Label  2
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021A464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  2
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  2
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A23C )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A2D4 )
    EndSwitch
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal ( .Actor:Self 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A1F0 )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A320 )
        EndCaseGroup
    EndSwitch
    Loop  00000032
        Label  3
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021A464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  3
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  3
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  3
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000001
            Call  SetActorVar   ( .Actor:Self 00000001 00000001 )
            Thread
                Call  MakeLerp      ( 000002D0 00000000 0000001E .Easing:CosInOut )
                Label  A
                Call  UpdateLerp ( )
                Call  SetActorYaw   ( .Actor:Self *Var[0] )
                If  *Var[1]  ==  00000001
                    Call  GetActorVar   ( .Actor:Self 00000001 *Var[2] )
                    If  *Var[2]  ==  00000001
                        Wait  1`
                        Goto  A
                    EndIf
                EndIf
                Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Wait  8`
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:Whirlwind )
            Wait  15`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  8`
            Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
        Case  ==  00000000
        Case  ==  00000002
        Case  ==  00000003
    EndSwitch
    Goto  0
    Return
    End
}

#new:IntTable $IntTable_8021ADF4
{
    00000009 00000010 00000016 0000001A 0000001E 00000020 00000021 00000020
    0000001E 0000001A 00000016 00000010 00000009 00000000 00000004 00000006
    00000007 00000006 00000004 00000000 00000002 00000000
}

#new:Script $Script_HandleEvent_8021AE4C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  GetActorVar       ( .Actor:Self 00000001 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
        Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    EndIf
    Call  GetLastEvent  ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000C
            SetConst  *Var[2]  0029000D
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000C
            SetConst  *Var[2]  0029000D
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000D
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        Case  ==  .Event:FlipTrigger % D
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    Call  SetActorVar   ( .Actor:Self 00000008 00000002 )
                Case  ==  00000001
                    Call  SetActorVar   ( .Actor:Self 00000008 00000003 )
            EndSwitch
            Call  SetActorVar       ( .Actor:Self 00000009 00000001 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021A0EC )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A320 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 FFFFFFFB 0000000F )
            Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
            Call  SetAnimation      ( .Actor:Self 00000001 0029000B )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
            Thread
                Wait  4`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 0000001E )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFE2 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFC4 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFB5 )
                Wait  1`
            EndThread
            UseIntBuffer  $IntTable_8021ADF4
            Loop  00000016
                Get1Int  *Var[0]
                Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var[0] 00000000 )
                Wait  1`
            EndLoop
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 0029000F )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[0.5] )
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoJumpBack
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290007
                    ExecWait  DoImmune
                    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
                    If  *Var[0]  !&  0035D000
                        Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
                        Wait  10`
                    EndIf
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        Case  ==  .Event:EndFirstStrike % 35
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000000
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00290004
                ExecWait  DoReturnHome
            EndIf
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetHomePos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000000
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00290002
                ExecWait  DoRecover
            EndIf
        Case  ==  .Event:ScareAway % 39
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290004
                    SetConst  *Var[2]  0029000B
                    ExecWait  DoScareAway
                    Return
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
        Case  ==  .Event:BeginAirLift % 3A
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290017
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                EndCaseGroup
            EndSwitch
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290017
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                EndCaseGroup
            EndSwitch
            ExecWait  DoBlowAway
            Return
        Case  ==  .Event:AirLiftFailed % 1F
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290001
                    ExecWait  DoImmune
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021BB78
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetAnimation  ( .Actor:Self 00000001 00290006 )
    Else
        Call  UseCamPreset  ( 0000003F )
        Call  BattleCamTargetActor  ( .Actor:Self )
        Wait  10`
        Call  SetAnimation  ( .Actor:Self 00000001 00290007 )
        Wait  10`
        Thread
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  00000004
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
            Wait  3`
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
            Wait  2`
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        EndThread
        Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
        Call  SetAnimation      ( .Actor:Self 00000001 00290006 )
        Wait  10`
        Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    EndIf
    Call  PlaySoundAtActor  ( .Actor:Self 000020D3 )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Walk 00000000 00000000 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] 40000000 00000000 00000003 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  GetStatusFlags        ( .Actor:Self *Var[5] )
            Call  AddGoalPos    ( .Actor:Self FFFFFFD8 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[16.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Wait  8`
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Wait  4`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  SetAnimation  ( .Actor:Self 00000001 00290015 )
            Wait  1`
            Call  SetAnimation  ( .Actor:Self 00000001 00290016 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Wait  6`
            Sub   *Var[1]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290001 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[16.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] 40000000 0000FFFF 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Wait  8`
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00290001 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021C420
{
    Label  A
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    Wait  1`
    If  *Var[0]  ==  00000001
        Goto  A
    EndIf
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  &  00080000
        Call  AddGoalPos    ( .Actor:Self 00000008 00000000 00000000 )
    Else
        Call  AddGoalPos    ( .Actor:Self 00000014 00000000 00000000 )
    EndIf
    Call  SetAnimation  ( .Actor:Self 00000001 00290004 )
    Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
    Call  RunToGoal     ( .Actor:Self 00000000 .False )
    Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
    Wait  10`
    Call  SetAnimation  ( .Actor:Self 00000001 00290007 )
    Wait  10`
    Thread
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000004
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  3`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  2`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
    EndThread
    Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
    Call  SetAnimation      ( .Actor:Self 00000001 00290006 )
    Wait  20`
    Call  PlaySoundAtActor  ( .Actor:Self 00002026 )
    Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:Whirlwind )
    Wait  40`
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] 40000000 00000000 00000000 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  10`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  10`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Return
        EndCaseGroup
    EndSwitch
    Wait  2`
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:NoContact 0000FFFF 8004023C 00000000 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Thread
                Call  WasStatusInflicted    ( .Actor:Self *Var[0] )
                If  *Var[0]  ==  00000001 % 1
                    Call  MakeLerp      ( 00000000 00000438 0000001E .Easing:CosInOut )
                    Label  0
                    Call  UpdateLerp ( )
                    Call  SetActorYaw   ( .Actor:Player *Var[0] )
                    Wait  1`
                    If  *Var[1]  ==  00000001
                        Goto  0
                    EndIf
                EndIf
            EndThread
            Wait  20`
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  10`
            Wait  10`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021CB70
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetActorVar       ( .Actor:Self 00000009 *Var[0] )
    Sub   *Var[0]  00000001
    If  *Var[0]  >  00000000
        Call  SetActorVar   ( .Actor:Self 00000009 *Var[0] )
        Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
        Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
        Wait  30`
        Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[0.5] )
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
    Else
        Call  AddActorDecoration        ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
        Wait  20`
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[0.5] )
        Call  RemoveActorDecoration     ( .Actor:Self 00000001 00000000 )
        Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
        Call  PlaySoundAtActor  ( .Actor:Self .Sound:Jump )
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
        Call  SetAnimation      ( .Actor:Self 00000001 0029000F )
        Set   *Var[0]  00000000
        Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
        Thread
            Loop  00000005
                Add   *Var[0]  0000000F
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                Wait  1`
            EndLoop
        EndThread
        Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetActorJumpGravity       ( .Actor:Self *Fixed[3.0] )
        Call  JumpToGoal        ( .Actor:Self 00000008 .False .True .False )
        Call  PlaySoundAtActor  ( .Actor:Self 000020BA )
        Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetActorDispOffset        ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021A0C0 )
        Call  SetTargetOffset   ( .Actor:Self 00000001 FFFFFFFC 00000020 )
        Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
        Call  SetActorFlagBits  ( .Actor:Self 00000400 .False )
        Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Switch  *Var[0]
            Case  ==  00000002
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A1F0 )
            Case  ==  00000003
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
        EndSwitch
    EndIf
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8021D014
{
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
    EndIf
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            ExecWait  $Script_8021BB78
            Call  RandInt   ( 000003E8 *Var[0] )
            If  *Var[0]  <  0000012C
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A1F0 )
            Else
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
            EndIf
        Case  ==  00000001
            ExecWait  $Script_8021C420
            Call  RandInt   ( 000003E8 *Var[0] )
            If  *Var[0]  <  0000012C
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A1F0 )
            Else
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021A288 )
            EndIf
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            ExecWait  $Script_8021CB70
        EndCaseGroup
    EndSwitch
    Return
    End
}

PADDING: 8021D214 to 8021D220 (005F16A4 to 005F16B0)
00000000 00000000 00000000

#new:DefenseTable $DefenseTable_8021D220
{
    .Element:Normal 00000002
    .Element:Hammer 00000002
    .Element:Jump   00000002
    .Element:Water  00000002
    .Element:Blast  00000002
    .Element:End
}

#new:DefenseTable $DefenseTable_8021D24C
{
    .Element:Normal 00000002
    .Element:End
}

#new:DefenseTable $DefenseTable_8021D258
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8021D264
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      80`
    .Status:Poison     60`
    .Status:Frozen    100`
    .Status:Dizzy      50`
    .Status:Fear        0`
    .Status:Static     80`
    .Status:Paralyze   90`
    .Status:Shrink     75`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod     -1`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   1`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:StatusTable $StatusTable_8021D310
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      80`
    .Status:Poison     60`
    .Status:Frozen    100`
    .Status:Dizzy      90`
    .Status:Fear        0`
    .Status:Static     80`
    .Status:Paralyze   90`
    .Status:Shrink     75`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   1`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_8021D3BC
{
    00020001 01000000 FE2400FF $IdleAnimations_8021F1F0 $DefenseTable_8021D220 00001000 00000000 00F90000 00000000
    00800000 02000000 FC2400FF $IdleAnimations_8021D450 $DefenseTable_8021D24C 00004000 00000000 02F20000 00000000
    00020001 03000000 002000FF $IdleAnimations_8021D4E8 $DefenseTable_8021D220 00000000 00000000 00F60000 00000000
}

#new:Actor $DarkParatroopa
{
    % stats
    [Index]         6b
    [Level]        18`b
    [MaxHP]         8`b
    [Coins]         2`b
    [Flags]       00000200
    [StatusTable] $StatusTable_8021D310
    % ai
    [PartsCount]    3`s
    [PartsTable]  $PartsTable_8021D3BC
    [Script]      $Script_Init_8021D55C
    % move effectiveness
    [Escape]       50`b
    [Item]         70`b
    [AirLift]      90`b
    [Hurricane]    80`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce]  85`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         50`b  38`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  29`b % dx dy
    [StatusIcon]    8`b  30`b % dx dy
}

#new:IdleAnimations $IdleAnimations_8021D450
{
    .Status:Normal    002A0001
    .Status:Stone     002A0000
    .Status:Sleep     002A0012
    .Status:Poison    002A0000
    .Status:Stop      002A0000
    .Status:Static    002A0001
    .Status:Paralyze  002A0000
    .Status:Dizzy     002A0013
    .Status:Fear      002A0013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021D49C
{
    .Status:Normal    002A0001
    .Status:Stone     002A0000
    .Status:Sleep     002A0012
    .Status:Poison    002A0000
    .Status:Stop      002A0000
    .Status:Static    002A0001
    .Status:Paralyze  002A0000
    .Status:Dizzy     002A0013
    .Status:Fear      002A0013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021D4E8
{
    .Status:Normal    002A000F
    .Status:Stone     002A0000
    .Status:Sleep     002A0012
    .Status:Poison    002A0000
    .Status:Stop      002A0000
    .Status:Static    002A000F
    .Status:Paralyze  002A0000
    .Status:Dizzy     002A0013
    .Status:Fear      002A0013
    .Status:End
}

#new:Script $Script_NextTurn_8021D534
{
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Return
    End
}

#new:Script $Script_Init_8021D55C
{
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8021E174 )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021D6AC )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021DA3C )
    Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8021D534 )
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Return
    End
}

#new:Script $Script_8021D5D4
{
    If  *Var[1]  &  00041000
        Call  SetTargetOffset       ( .Actor:Self 00000002 00000000 00000019 )
        Call  8027D4C8  ( FFFFFF81 00000002 00000003 FFFFFFFA )
        Call  $Function_80218128    ( FFFFFFED 00000019 00000004 0000001C )
    Else
        Call  SetTargetOffset       ( .Actor:Self 00000002 FFFFFFFE 00000024 )
        Call  8027D4C8  ( FFFFFF81 00000002 00000000 FFFFFFF9 )
        Call  $Function_80218128    ( FFFFFFF6 0000001D 00000008 0000001E )
    EndIf
    Return
    End
}

#new:Script $Script_Idle_8021D6AC
{
    Label  A
    Call  RandInt   ( 00000050 *Var[0] )
    Add   *Var[0]  00000050
    Loop  *Var[0]
        Label  0
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021D5D4
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  0
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.6] )
    Call  SetIdleAnimations ( .Actor:Self 00000002 $IdleAnimations_8021D49C )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 FFFFFFFB .Easing:Linear )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021D450 )
    Loop  00000014
        Label  1
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021D5D4
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.6] )
    Call  SetIdleAnimations ( .Actor:Self 00000002 $IdleAnimations_8021D49C )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 FFFFFFFB .Easing:Linear )
    Call  SetIdleAnimations ( .Actor:Self 00000002 $IdleAnimations_8021D450 )
    Loop  00000028
        Label  2
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021D5D4
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Goto  A
    Return
    End
}

#new:Script $Script_8021D9BC
{
    Call  SetAnimation  ( .Actor:Self 00000002 002A0003 )
    Call  SetGoalToHome ( .Actor:Self )
    Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
    Call  FlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Call  SetAnimation  ( .Actor:Self 00000002 002A0001 )
    Return
    End
}

#new:Script $Script_HandleEvent_8021DA3C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        Case  ==  .Event:HitCombo % 9
            Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoNormalHit
        Case  ==  .Event:Hit % A
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoNormalHit
            Call  GetBattlePhase    ( *Var[0] )
            If  *Var[0]  ==  00000001
                Call  GetEncounterState ( *Var[0] )
                If  *Var[0]  ==  00000004
                    ExecWait  $Script_8021EC2C
                EndIf
            EndIf
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0006
            ExecWait  DoDeath
            Return
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0008
            SetConst  *Var[2]  002A0009
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0008
            SetConst  *Var[2]  002A0009
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0009
            ExecWait  DoDeath
            Return
        Case  ==  .Event:FallTrigger % C
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoNormalHit
            ExecWait  $Script_8021EC2C
        Case  ==  0000000F % F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  002A0008
            SetConst  *Var[1]  002A0009
            ExecWait  DoBurnHit
            ExecWait  $Script_8021EC2C
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  002A0007
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  002A0006
            ExecWait  DoJumpBack
            ExecWait  $Script_8021D9BC
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0006
            ExecWait  DoDeath
            Return
        Case  ==  00000017 % 17
            Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A000B
            ExecWait  DoImmune
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A000B
            ExecWait  DoImmune
            Call  GetBattlePhase    ( *Var[0] )
            If  *Var[0]  ==  00000001
                Call  GetEncounterState ( *Var[0] )
                If  *Var[0]  ==  00000004
                    ExecWait  $Script_8021EC2C
                EndIf
            EndIf
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0006
            ExecWait  DoDeath
            Return
        Case  ==  .Event:BeginFirstStrike % 38
            Call  SetActorPos       ( .Actor:Self 00000014 00000000 00000000 )
            Call  HPBarToCurrent    ( .Actor:Self )
        Case  ==  .Event:EndFirstStrike % 35
            ExecWait  $Script_8021D9BC
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0001
            ExecWait  DoRecover
        Case  ==  .Event:ScareAway % 39
            Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0003
            SetConst  *Var[2]  002A0007
            ExecWait  DoScareAway
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0003
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  002A0007
            ExecWait  DoBlowAway
            Return
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8021E174
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  UseCamPreset      ( 00000005 )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetAnimation      ( .Actor:Self 00000002 002A0003 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  AddGoalPos        ( .Actor:Self 00000028 0000001E 00000000 )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[7.0] )
    Call  FlyToGoal ( .Actor:Self 00000000 FFFFFFF0 .Easing:Linear )
    Call  8024E664  ( 00000001 )
    Wait  5`
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000003 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  PlaySoundAtActor  ( .Actor:Self 000020E0 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000002 002A0004 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  AddGoalPos    ( .Actor:Self 00000006 00000006 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[2.0] )
            Call  FlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:Linear )
            Wait  6`
            Call  PlaySoundAtActor  ( .Actor:Self 000002C1 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
            Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  00000019
            Set   *Var[1]  00000000
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 002A000C )
            Call  FlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:Linear )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[4.0] )
            Thread
                Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000A 00000000 )
                Set   *Var[0]  00000000
                Loop  00000008
                    Add   *Var[0]  0000005A
                    If  *Var[0]  >=  00000168
                        Sub   *Var[0]  00000168
                    EndIf
                    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Call  SetActorRotationOffset    ( .Actor:Self 00000000 FFFFFFF6 00000000 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[4.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 002A0007 )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[4.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 002A0007 )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  0000001E
            Call  SetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Wait  20`
            Call  UseCamPreset      ( 00000002 )
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  AddActorDecoration    ( .Actor:Self 00000002 00000000 .Decoration:Sweat )
            Call  SetActorYaw       ( .Actor:Self 000000B4 )
            ExecWait  $Script_8021D9BC
            Call  SetActorYaw       ( .Actor:Self 00000000 )
            Call  RemoveActorDecoration ( .Actor:Self 00000002 00000000 )
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  PlaySoundAtActor  ( .Actor:Self 000020E0 )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
    Call  SetAnimation  ( .Actor:Self 00000002 002A0004 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  AddGoalPos    ( .Actor:Self 00000006 00000006 00000000 )
    Call  SetActorSpeed ( .Actor:Self *Fixed[2.0] )
    Call  FlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:Linear )
    Wait  6`
    Call  PlaySoundAtActor  ( .Actor:Self 000002C1 )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
    Call  SetAnimation  ( .Actor:Self 00000002 002A000C )
    Call  FlyToGoal     ( .Actor:Self 00000000 00000000 .Easing:Linear )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  AddGoalPos    ( .Actor:Self 00000028 0000001E 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 002A000D )
            Thread
                Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000A 00000000 )
                Set   *Var[0]  00000000
                Loop  0000000C
                    Sub   *Var[0]  0000005A
                    If  *Var[0]  <  00000000
                        Add   *Var[0]  00000168
                    EndIf
                    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Call  SetActorRotationOffset    ( .Actor:Self 00000000 FFFFFFF6 00000000 )
                Call  SetAnimation  ( .Actor:Self 00000002 002A0001 )
            EndThread
            Call  FlyToGoal ( .Actor:Self 00000000 0000001E .Easing:Linear )
            Wait  10`
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            ExecWait  $Script_8021D9BC
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8021EC2C
{
    Call  SetPartDispOffset ( .Actor:Self 00000002 00000000 00000000 00000000 )
    Call  8027D32C      ( FFFFFF81 )
    Call  SetPartFlags  ( .Actor:Self 00000002 00020005 )
    Call  SetPartFlags  ( .Actor:Self 00000003 00120004 )
    Call  SetPartFlags  ( .Actor:Self 00000001 00800004 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[1]  00000008
    Sub   *Var[2]  00000002
    Call  SetPartPos    ( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
    Call  SetAnimation  ( .Actor:Self 00000001 0029000B )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[A] )
    If  *Var[A]  ==  00000000
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Set   *Var[1]  00000000
        Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
        Call  $Function_802180D0    ( 00000080 00000007 )
        Thread
            Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[0.3] )
        EndThread
        Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Loop  0000000A
            Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
            Wait  1`
            Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
            Wait  1`
        EndLoop
        Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
    Else
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Set   *Var[1]  00000000
        Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
        Thread
            Loop  0000000A
                Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
                Wait  1`
                Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
                Wait  1`
            EndLoop
            Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
        EndThread
        Call  $Function_802180D0    ( 00000096 00000007 )
        Thread
            Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[0.3] )
        EndThread
        Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
    EndIf
    Call  GetIndexFromHome  ( .Actor:Self *Var[0] )
    Mod   *Var[0]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[0] )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetHomePos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetAnimation      ( .Actor:Self 00000001 00290001 )
    Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_8021D264 )
    Call  BindNextTurn      ( .Actor:Self 00000000 )
    ExecWait  $Script_8021F36C
    Call  SetActorType      ( .Actor:Self 00000005 )
    Call  SetActorFlagBits  ( .Actor:Self 00001000 .True )
    Call  HPBarToHome       ( .Actor:Self )
    Call  ResetAllActorSounds   ( .Actor:Self )
    If  *Var[A]  !=  00000000
        Call  DispatchEvent ( .Actor:Self .Event:FlipTrigger )
    EndIf
    Return
    End
}

#new:IdleAnimations $IdleAnimations_8021F1F0
{
    .Status:Normal    00290001
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290001
    .Status:Stop      00290000
    .Status:Static    00290001
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F23C
{
    .Status:Normal    00290003
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290003
    .Status:Stop      00290000
    .Status:Static    00290003
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F288
{
    .Status:Normal    00290002
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290002
    .Status:Stop      00290000
    .Status:Static    00290002
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F2D4
{
    .Status:Normal    00290003
    .Status:Stone     00290000
    .Status:Sleep     00290011
    .Status:Poison    00290003
    .Status:Stop      00290000
    .Status:Static    00290003
    .Status:Paralyze  00290000
    .Status:Dizzy     00290013
    .Status:Fear      00290013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8021F320
{
    .Status:Normal    0029000F
    .Status:Stone     00290010
    .Status:Sleep     00290012
    .Status:Poison    0029000F
    .Status:Stop      00290010
    .Status:Static    0029000F
    .Status:Paralyze  00290010
    .Status:Dizzy     00290014
    .Status:Fear      00290014
    .Status:End
}

#new:Script $Script_8021F36C
{
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80222014 )
    Call  BindIdle      ( .Actor:Self $Script_Idle_8021F5E4 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021FE4C )
    Call  RandInt       ( 000003E8 *Var[0] )
    If  *Var[0]  <  0000012C
        Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
    Else
        Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
        Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
        Call  SetAnimation      ( .Actor:Self 00000001 00290002 )
    EndIf
    Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    Return
    End
}

#new:Script $Script_8021F464
{
    Switch  *Var[0]
        CaseOR  ==  00000000
        CaseOR  ==  00000001
            If  *Var[1]  &  00041000
                Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFB 0000000F )
                Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
                Call  $Function_80218128    ( FFFFFFF6 00000014 0000000A 00000014 )
            Else
                Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFC 00000020 )
                Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
                Call  $Function_80218128    ( FFFFFFF1 00000020 00000005 00000020 )
            EndIf
        EndCaseGroup
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetTargetOffset       ( .Actor:Self 00000001 FFFFFFFB 0000000F )
            Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
            Call  $Function_80218128    ( FFFFFFF6 00000014 0000000A 00000014 )
        EndCaseGroup
    EndSwitch
    Return
    End
}

#new:Script $Script_Idle_8021F5E4
{
    Label  0
    Call  RandInt   ( 00000050 *Var[A] )
    Add   *Var[A]  00000050
    Loop  *Var[A]
        Label  1
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021F464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  1
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  1
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F23C )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F2D4 )
    EndSwitch
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal ( .Actor:Self 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F1F0 )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F320 )
        EndCaseGroup
    EndSwitch
    Loop  00000014
        Label  2
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021F464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  2
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  2
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F23C )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F2D4 )
    EndSwitch
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleGoal   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal ( .Actor:Self 00000000 )
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F1F0 )
        Case  ==  00000001
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F320 )
        EndCaseGroup
    EndSwitch
    Loop  00000032
        Label  3
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        ExecWait  $Script_8021F464
        If  *Var[0]  ==  00000002
            Wait  1`
            Goto  3
        EndIf
        If  *Var[0]  ==  00000003
            Wait  1`
            Goto  3
        EndIf
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  3
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000001
            Call  SetActorVar   ( .Actor:Self 00000001 00000001 )
            Thread
                Call  MakeLerp      ( 000002D0 00000000 0000001E .Easing:CosInOut )
                Label  A
                Call  UpdateLerp ( )
                Call  SetActorYaw   ( .Actor:Self *Var[0] )
                If  *Var[1]  ==  00000001
                    Call  GetActorVar   ( .Actor:Self 00000001 *Var[2] )
                    If  *Var[2]  ==  00000001
                        Wait  1`
                        Goto  A
                    EndIf
                EndIf
                Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
                Call  SetActorYaw   ( .Actor:Self 00000000 )
            EndThread
            Wait  8`
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:Whirlwind )
            Wait  15`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  8`
            Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
        Case  ==  00000000
        Case  ==  00000002
        Case  ==  00000003
    EndSwitch
    Goto  0
    Return
    End
}

#new:IntTable $IntTable_8021FDF4
{
    00000009 00000010 00000016 0000001A 0000001E 00000020 00000021 00000020
    0000001E 0000001A 00000016 00000010 00000009 00000000 00000004 00000006
    00000007 00000006 00000004 00000000 00000002 00000000
}

#new:Script $Script_HandleEvent_8021FE4C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  GetActorVar       ( .Actor:Self 00000001 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
        Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    EndIf
    Call  GetLastEvent  ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000C
            SetConst  *Var[2]  0029000D
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000C
            SetConst  *Var[2]  0029000D
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000D
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        Case  ==  .Event:FlipTrigger % D
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    Call  SetActorVar   ( .Actor:Self 00000008 00000002 )
                Case  ==  00000001
                    Call  SetActorVar   ( .Actor:Self 00000008 00000003 )
            EndSwitch
            Call  SetActorVar       ( .Actor:Self 00000009 00000001 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021D258 )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F320 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 FFFFFFFB 0000000F )
            Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
            Call  SetAnimation      ( .Actor:Self 00000001 0029000B )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
            Thread
                Wait  4`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 0000001E )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFE2 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFC4 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFB5 )
                Wait  1`
            EndThread
            UseIntBuffer  $IntTable_8021FDF4
            Loop  00000016
                Get1Int  *Var[0]
                Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var[0] 00000000 )
                Wait  1`
            EndLoop
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 0029000F )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[0.5] )
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoJumpBack
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290007
                    ExecWait  DoImmune
                    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
                    If  *Var[0]  !&  0035D000
                        Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
                        Wait  10`
                    EndIf
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0029000B
            ExecWait  DoDeath
            Return
        Case  ==  .Event:EndFirstStrike % 35
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000000
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00290004
                ExecWait  DoReturnHome
            EndIf
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetHomePos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000000
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00290002
                ExecWait  DoRecover
            EndIf
        Case  ==  .Event:ScareAway % 39
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290004
                    SetConst  *Var[2]  0029000B
                    ExecWait  DoScareAway
                    Return
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
        Case  ==  .Event:BeginAirLift % 3A
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290017
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                EndCaseGroup
            EndSwitch
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290017
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                EndCaseGroup
            EndSwitch
            ExecWait  DoBlowAway
            Return
        Case  ==  .Event:AirLiftFailed % 1F
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            Switch  *Var[0]
                CaseOR  ==  00000000
                CaseOR  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  00290001
                    ExecWait  DoImmune
                EndCaseGroup
                CaseOR  ==  00000002
                CaseOR  ==  00000003
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  0029000F
                    ExecWait  DoImmune
                EndCaseGroup
            EndSwitch
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80220B78
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetAnimation  ( .Actor:Self 00000001 00290006 )
    Else
        Call  UseCamPreset  ( 0000003F )
        Call  BattleCamTargetActor  ( .Actor:Self )
        Wait  10`
        Call  SetAnimation  ( .Actor:Self 00000001 00290007 )
        Wait  10`
        Thread
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  00000004
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
            Wait  3`
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
            Wait  2`
            Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        EndThread
        Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
        Call  SetAnimation      ( .Actor:Self 00000001 00290006 )
        Wait  10`
        Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    EndIf
    Call  PlaySoundAtActor  ( .Actor:Self 000020D3 )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Walk 00000000 00000000 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] 40000000 00000000 00000003 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  GetStatusFlags        ( .Actor:Self *Var[5] )
            Call  AddGoalPos    ( .Actor:Self FFFFFFD8 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[16.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Wait  8`
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Wait  4`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  SetAnimation  ( .Actor:Self 00000001 00290015 )
            Wait  1`
            Call  SetAnimation  ( .Actor:Self 00000001 00290016 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[1]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Wait  6`
            Sub   *Var[1]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290001 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[16.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] 40000000 0000FFFF 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Wait  8`
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00290001 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80221420
{
    Label  A
    Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
    Wait  1`
    If  *Var[0]  ==  00000001
        Goto  A
    EndIf
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetStatusFlags    ( .Actor:Self *Var[0] )
    If  *Var[0]  &  00080000
        Call  AddGoalPos    ( .Actor:Self 00000008 00000000 00000000 )
    Else
        Call  AddGoalPos    ( .Actor:Self 00000014 00000000 00000000 )
    EndIf
    Call  SetAnimation  ( .Actor:Self 00000001 00290004 )
    Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
    Call  RunToGoal     ( .Actor:Self 00000000 .False )
    Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
    Wait  10`
    Call  SetAnimation  ( .Actor:Self 00000001 00290007 )
    Wait  10`
    Thread
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Add   *Var[1]  00000004
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  3`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  2`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
    EndThread
    Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
    Call  SetAnimation      ( .Actor:Self 00000001 00290006 )
    Wait  20`
    Call  PlaySoundAtActor  ( .Actor:Self 00002026 )
    Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:Whirlwind )
    Wait  40`
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] 40000000 00000000 00000000 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  10`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  10`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimation  ( .Actor:Self 00000001 00290017 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Return
        EndCaseGroup
    EndSwitch
    Wait  2`
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:NoContact 0000FFFF 8004023C 00000000 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Thread
                Call  WasStatusInflicted    ( .Actor:Self *Var[0] )
                If  *Var[0]  ==  00000001 % 1
                    Call  MakeLerp      ( 00000000 00000438 0000001E .Easing:CosInOut )
                    Label  0
                    Call  UpdateLerp ( )
                    Call  SetActorYaw   ( .Actor:Player *Var[0] )
                    Wait  1`
                    If  *Var[1]  ==  00000001
                        Goto  0
                    EndIf
                EndIf
            EndThread
            Wait  20`
            Call  SetAnimation  ( .Actor:Self 00000001 00290008 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
            Wait  10`
            Wait  10`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00290004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00290002 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80221B70
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorYaw       ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetActorVar       ( .Actor:Self 00000009 *Var[0] )
    Sub   *Var[0]  00000001
    If  *Var[0]  >  00000000
        Call  SetActorVar   ( .Actor:Self 00000009 *Var[0] )
        Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
        Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
        Wait  30`
        Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[0.5] )
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
    Else
        Call  AddActorDecoration        ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
        Wait  20`
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[0.5] )
        Call  RemoveActorDecoration     ( .Actor:Self 00000001 00000000 )
        Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
        Call  PlaySoundAtActor  ( .Actor:Self .Sound:Jump )
        Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
        Call  SetAnimation      ( .Actor:Self 00000001 0029000F )
        Set   *Var[0]  00000000
        Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
        Thread
            Loop  00000005
                Add   *Var[0]  0000000F
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                Wait  1`
            EndLoop
        EndThread
        Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetActorJumpGravity       ( .Actor:Self *Fixed[3.0] )
        Call  JumpToGoal        ( .Actor:Self 00000008 .False .True .False )
        Call  PlaySoundAtActor  ( .Actor:Self 000020BA )
        Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetActorDispOffset        ( .Actor:Self 00000000 00000000 00000000 )
        Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021D220 )
        Call  SetTargetOffset   ( .Actor:Self 00000001 FFFFFFFC 00000020 )
        Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
        Call  SetActorFlagBits  ( .Actor:Self 00000400 .False )
        Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
        Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
        Switch  *Var[0]
            Case  ==  00000002
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F1F0 )
            Case  ==  00000003
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
        EndSwitch
    EndIf
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_80222014
{
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
    EndIf
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
    Switch  *Var[0]
        Case  ==  00000000
            ExecWait  $Script_80220B78
            Call  RandInt   ( 000003E8 *Var[0] )
            If  *Var[0]  <  0000012C
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F1F0 )
            Else
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
            EndIf
        Case  ==  00000001
            ExecWait  $Script_80221420
            Call  RandInt   ( 000003E8 *Var[0] )
            If  *Var[0]  <  0000012C
                Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F1F0 )
            Else
                Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
                Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021F288 )
            EndIf
        CaseOR  ==  00000002
        CaseOR  ==  00000003
            ExecWait  $Script_80221B70
        EndCaseGroup
    EndSwitch
    Return
    End
}

PADDING: 80222214 to 80222220 (005F66A4 to 005F66B0)
00000000 00000000 00000000

#new:DefenseTable $DefenseTable_80222220
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8022222C
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      70`
    .Status:Poison    100`
    .Status:Frozen    100`
    .Status:Dizzy      80`
    .Status:Fear      100`
    .Status:Static    100`
    .Status:Paralyze   90`
    .Status:Shrink     80`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_802222D8
{
    00800000 01000000 001400FF $IdleAnimations_80222324 $DefenseTable_80222220 00000000 00000000 00F60000 00000000
}

#new:Actor $Gloomba
{
    % stats
    [Index]         2b
    [Level]        11`b
    [MaxHP]         7`b
    [Coins]         1`b
    [Flags]       00000000
    [StatusTable] $StatusTable_8022222C
    % ai
    [PartsCount]    1`s
    [PartsTable]  $PartsTable_802222D8
    [Script]      $Script_Init_802223BC
    % move effectiveness
    [Escape]       70`b
    [Item]         80`b
    [AirLift]      90`b
    [Hurricane]    85`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce] 100`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  24`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:IdleAnimations $IdleAnimations_80222324
{
    .Status:Normal    00260401
    .Status:Stone     00260400
    .Status:Sleep     00260408
    .Status:Poison    00260401
    .Status:Stop      00260400
    .Status:Static    00260401
    .Status:Paralyze  00260400
    .Status:Dizzy     00260407
    .Status:Fear      00260407
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80222370
{
    .Status:Normal    00260403
    .Status:Stone     00260400
    .Status:Sleep     00260408
    .Status:Poison    00260401
    .Status:Stop      00260400
    .Status:Static    00260403
    .Status:Paralyze  00260400
    .Status:Dizzy     00260407
    .Status:Fear      00260407
    .Status:End
}

#new:Script $Script_Init_802223BC
{
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_80222F10 )
    Call  BindIdle  ( .Actor:Self $Script_Idle_80222408 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_802226E4 )
    Return
    End
}

#new:Script $Script_Idle_80222408
{
    Label  A
    Call  RandInt   ( 00000050 *Var[0] )
    Add   *Var[0]  00000050
    Loop  *Var[0]
        Label  0
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  0
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80222370 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80222324 )
    Loop  00000014
        Label  1
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80222370 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80222324 )
    Loop  00000050
        Label  2
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Goto  A
    Return
    End
}

#new:Script $Script_HandleEvent_802226E4
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260409
            SetConst  *Var[2]  0026040A
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260409
            SetConst  *Var[2]  0026040A
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040A
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040E
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoJumpBack
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260407 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040E
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:StarBeam % 13
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260401
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:EndFirstStrike % 35
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260403 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260401
            ExecWait  DoRecover
        Case  ==  .Event:ScareAway % 39
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260403
            SetConst  *Var[2]  00260405
            ExecWait  DoScareAway
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260403
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoBlowAway
            Return
        Default
    EndSwitch
    Call  SetAnimation      ( .Actor:Self 00000001 00260401 )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:FloatTable $FloatTable_80222DA4
{
    0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
    0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
    0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
    0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
    0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
    0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
    0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
    0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
    0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
    0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
    0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
    0.999391 0.999848 1.0
}

#new:Script $Script_TakeTurn_80222F10
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00260403 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  SetAnimation      ( .Actor:Self 00000001 00260401 )
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
    Wait  1`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
    Wait  5`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00260404 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000000A
            Set   *Var[1]  0000000A
            Add   *Var[2]  00000003
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_8021838C    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260408 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00260405 )
            Wait  5`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  5`
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation      ( .Actor:Self 00000001 00260404 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000014
            Set   *Var[1]  00000000
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
            Thread
                Wait  4`
                Set   *Var[0]  000000B4
                Loop  00000004
                    Sub   *Var[0]  0000002D
                    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260407 )
            Wait  5`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
        Default
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_8021838C    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 0026040B )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Wait  1`
    EndSwitch
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000002 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Wait  1`
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Wait  3`
            Call  YieldTurn ( )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260403 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

PADDING: 80223BD8 to 80223BE0 (005F8068 to 005F8070)
00000000 00000000

#new:DefenseTable $DefenseTable_80223BE0
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_80223BEC
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      70`
    .Status:Poison     80`
    .Status:Frozen    100`
    .Status:Dizzy      80`
    .Status:Fear       80`
    .Status:Static     80`
    .Status:Paralyze   90`
    .Status:Shrink     80`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_80223C98
{
    00800000 01000000 001800FF $IdleAnimations_80223CE4 $DefenseTable_80223BE0 00000010 00000000 00F40000 00000000
}

#new:Actor $SpikedGloomba
{
    % stats
    [Index]         4b
    [Level]        12`b
    [MaxHP]         7`b
    [Coins]         1`b
    [Flags]       00000000
    [StatusTable] $StatusTable_80223BEC
    % ai
    [PartsCount]    1`s
    [PartsTable]  $PartsTable_80223C98
    [Script]      $Script_Init_80223D7C
    % move effectiveness
    [Escape]       65`b
    [Item]         75`b
    [AirLift]      90`b
    [Hurricane]    85`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce] 100`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  28`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:IdleAnimations $IdleAnimations_80223CE4
{
    .Status:Normal    00270101
    .Status:Stone     00270100
    .Status:Sleep     0027010A
    .Status:Poison    00270101
    .Status:Stop      00270100
    .Status:Static    00270101
    .Status:Paralyze  00270100
    .Status:Dizzy     00270109
    .Status:Fear      00270109
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80223D30
{
    .Status:Normal    00270103
    .Status:Stone     00270100
    .Status:Sleep     0027010A
    .Status:Poison    00270101
    .Status:Stop      00270100
    .Status:Static    00270103
    .Status:Paralyze  00270100
    .Status:Dizzy     00270109
    .Status:Fear      00270109
    .Status:End
}

#new:Script $Script_Init_80223D7C
{
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_802249EC )
    Call  BindIdle  ( .Actor:Self $Script_Idle_80223DC8 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_802240A4 )
    Return
    End
}

#new:Script $Script_Idle_80223DC8
{
    Label  A
    Call  RandInt   ( 00000050 *Var[0] )
    Add   *Var[0]  00000050
    Loop  *Var[0]
        Label  0
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  0
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80223D30 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80223CE4 )
    Loop  00000014
        Label  1
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80223D30 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80223CE4 )
    Loop  00000050
        Label  2
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Goto  A
    Return
    End
}

#new:Script $Script_HandleEvent_802240A4
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270107
            SetConst  *Var[2]  00270108
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270107
            SetConst  *Var[2]  00270108
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270108
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270105
            ExecWait  DoDeath
            Return
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0027010C
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoJumpBack
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00270109 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00270101 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0027010C
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270105
            ExecWait  DoDeath
            Return
        Case  ==  .Event:StarBeam % 13
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270101
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270105
            ExecWait  DoDeath
            Return
        Case  ==  .Event:EndFirstStrike % 35
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00270103 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270101
            ExecWait  DoRecover
        Case  ==  .Event:ScareAway % 39
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270103
            SetConst  *Var[2]  00270106
            ExecWait  DoScareAway
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270103
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00270106
            ExecWait  DoBlowAway
            Return
        Case  ==  .Event:SpikeTaunt % 1B
            Call  GetStatusFlags    ( .Actor:Self *Var[0] )
            If  *Var[0]  !&  0035D000
                Call  SetAnimation  ( .Actor:Self 00000001 0027010B )
            EndIf
            Wait  10`
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  GetStatusFlags    ( .Actor:Self *Var[3] )
            If  *Var[3]  &  00080000
                Add   *Var[1]  0000000A
            Else
                Add   *Var[1]  0000001A
            EndIf
            Call  PlayEffect    ( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
            Wait  20`
        Default
    EndSwitch
    Call  SetAnimation      ( .Actor:Self 00000001 00270101 )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:FloatTable $FloatTable_80224880
{
    0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
    0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
    0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
    0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
    0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
    0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
    0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
    0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
    0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
    0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
    0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
    0.999391 0.999848 1.0
}

#new:Script $Script_TakeTurn_802249EC
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00270103 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  SetAnimation      ( .Actor:Self 00000001 00270101 )
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
    Wait  1`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
    Wait  5`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00270104 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000000A
            Set   *Var[1]  0000000A
            Add   *Var[2]  00000003
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_8021860C    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00270104 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 0027010A )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00270106 )
            Wait  5`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  5`
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation      ( .Actor:Self 00000001 00270104 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000014
            Set   *Var[1]  00000000
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
            Thread
                Wait  4`
                Set   *Var[0]  000000B4
                Loop  00000004
                    Sub   *Var[0]  0000002D
                    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetAnimation  ( .Actor:Self 00000001 00270104 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00270109 )
            Wait  5`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00270101 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
        Default
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_8021860C    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00270104 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00270104 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Wait  1`
    EndSwitch
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Wait  1`
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00270101 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  GetLastDamage ( .Actor:Player *Var[0] )
            If  *Var[0]  >  00000000
                Call  SetAnimation  ( .Actor:Self 00000001 0027010B )
                Wait  15`
            Else
                Call  SetAnimation  ( .Actor:Self 00000001 00270101 )
                Wait  3`
            EndIf
            Call  YieldTurn ( )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00270103 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

PADDING: 8022570C to 80225710 (005F9B9C to 005F9BA0)
00000000

#new:DefenseTable $DefenseTable_80225710
{
    .Element:Normal 00000000
    .Element:End
}

#new:DefenseTable $DefenseTable_8022571C
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_80225728
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      70`
    .Status:Poison    100`
    .Status:Frozen    100`
    .Status:Dizzy      80`
    .Status:Fear      100`
    .Status:Static    100`
    .Status:Paralyze   90`
    .Status:Shrink     80`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:StatusTable $StatusTable_802257D4
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      70`
    .Status:Poison     80`
    .Status:Frozen    100`
    .Status:Dizzy      90`
    .Status:Fear       80`
    .Status:Static     80`
    .Status:Paralyze   90`
    .Status:Shrink     80`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      1`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_80225880
{
    00020001 01000000 001400FF $IdleAnimations_802270FC $DefenseTable_80225710 00000000 00000000 00F60000 00000000
    00800000 02000000 001800FF $IdleAnimations_80225938 $DefenseTable_8022571C 00004000 00000000 00F60000 00000000
    00020001 03000000 F01800FF $IdleAnimations_802259D0 $DefenseTable_80225710 00000000 00000000 00F60000 00000000
    00020001 04000000 F01800FF $IdleAnimations_802259DC $DefenseTable_80225710 00000000 00000000 00F60000 00000000
}

#new:Actor $Paragloomba
{
    % stats
    [Index]         3b
    [Level]        11`b
    [MaxHP]         7`b
    [Coins]         1`b
    [Flags]       00000200
    [StatusTable] $StatusTable_802257D4
    % ai
    [PartsCount]    4`s
    [PartsTable]  $PartsTable_80225880
    [Script]      $Script_Init_802259E8
    % move effectiveness
    [Escape]       65`b
    [Item]         80`b
    [AirLift]      95`b
    [Hurricane]    90`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce] 100`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         36`b  26`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:IdleAnimations $IdleAnimations_80225938
{
    .Status:Normal    00280301
    .Status:Stone     00280300
    .Status:Sleep     0028030B
    .Status:Poison    00280301
    .Status:Stop      00280300
    .Status:Static    00280301
    .Status:Paralyze  00280300
    .Status:Dizzy     0028030C
    .Status:Fear      0028030C
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80225984
{
    .Status:Normal    00280304
    .Status:Stone     00280300
    .Status:Sleep     0028030B
    .Status:Poison    00280301
    .Status:Stop      00280300
    .Status:Static    00280304
    .Status:Paralyze  00280300
    .Status:Dizzy     0028030C
    .Status:Fear      0028030C
    .Status:End
}

#new:IdleAnimations $IdleAnimations_802259D0
{
    .Status:Normal    00280309
    .Status:End
}

#new:IdleAnimations $IdleAnimations_802259DC
{
    .Status:Normal    0028030A
    .Status:End
}

#new:Script $Script_Init_802259E8
{
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022635C )
    Call  BindIdle  ( .Actor:Self $Script_Idle_80225A34 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80225D68 )
    Return
    End
}

#new:Script $Script_Idle_80225A34
{
    Label  A
    Call  RandInt   ( 00000050 *Var[0] )
    Add   *Var[0]  00000050
    Loop  *Var[0]
        Label  0
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  0
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.6] )
    Call  SetIdleAnimations ( .Actor:Self 00000002 $IdleAnimations_80225984 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 FFFFFFFB .Easing:Linear )
    Loop  00000014
        Label  1
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[0.6] )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleFlyToGoal     ( .Actor:Self 00000000 FFFFFFFB .Easing:Linear )
    Call  SetIdleAnimations ( .Actor:Self 00000002 $IdleAnimations_80225938 )
    Loop  00000028
        Label  2
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Goto  A
    Return
    End
}

#new:Script $Script_80225CF0
{
    Call  ResetAllActorSounds   ( .Actor:Self )
    Call  SetGoalToHome ( .Actor:Self )
    Call  SetActorSpeed ( .Actor:Self *Fixed[7.0] )
    Call  FlyToGoal     ( .Actor:Self 00000000 00000001 .Easing:SinOut )
    Call  SetAnimation  ( .Actor:Self 00000002 00280301 )
    Return
    End
}

#new:Script $Script_HandleEvent_80225D68
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280306
            ExecWait  DoNormalHit
            Call  GetBattlePhase    ( *Var[0] )
            If  *Var[0]  ==  00000001
                Call  GetEncounterState ( *Var[0] )
                If  *Var[0]  ==  00000004
                    ExecWait  $Script_80226B74
                EndIf
            EndIf
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030D
            SetConst  *Var[2]  0028030E
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030D
            SetConst  *Var[2]  0028030E
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030E
            ExecWait  DoDeath
            Return
        Case  ==  .Event:FallTrigger % C
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280306
            ExecWait  DoNormalHit
            ExecWait  $Script_80226B74
        Case  ==  0000000F % F
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030D
            SetConst  *Var[2]  0028030E
            ExecWait  DoBurnHit
            ExecWait  $Script_80226B74
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030F
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280306
            ExecWait  DoJumpBack
            Call  SetAnimation  ( .Actor:Self 00000002 0028030C )
            ExecWait  $Script_80225CF0
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  0028030F
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280307
            ExecWait  DoDeath
            Return
        Case  ==  .Event:StarBeam % 13
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280301
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280306
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280307
            ExecWait  DoDeath
            Return
        Case  ==  .Event:BeginFirstStrike % 38
            Call  SetActorPos       ( .Actor:Self 00000014 00000000 00000000 )
            Call  HPBarToCurrent    ( .Actor:Self )
        Case  ==  .Event:EndFirstStrike % 35
            Call  SetAnimation  ( .Actor:Self 00000002 00280304 )
            ExecWait  $Script_80225CF0
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280301
            ExecWait  DoRecover
        Case  ==  .Event:ScareAway % 39
            Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280304
            SetConst  *Var[2]  00280306
            ExecWait  DoScareAway
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280304
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            SetConst  *Var[0]  00000002
            SetConst  *Var[1]  00280306
            ExecWait  DoBlowAway
            Return
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022635C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000002 00280304 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
    Call  FlyToGoal ( .Actor:Self 00000000 FFFFFFFC .Easing:Linear )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000002 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Wait  10`
            Call  UseCamPreset  ( 00000042 )
            Call  SetBattleCamZoom  ( 0000012C )
            Call  BattleCamTargetActor  ( .Actor:Self )
            Call  8024ECF8      ( FFFFFFFF 00000001 00000000 )
            Call  PlaySoundAtActor  ( .Actor:Self 000020E0 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetAnimation  ( .Actor:Self 00000002 00280305 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .False .False )
            Call  PlaySoundAtActor  ( .Actor:Self 000002C1 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Sub   *Var[0]  00000050
            Set   *Var[1]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 00280305 )
            Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFF6 .Easing:QuadraticOut )
            Thread
                Loop  00000004
                    Call  PlaySoundAtActor  ( .Actor:Self 000020DF )
                    Wait  4`
                EndLoop
            EndThread
            Call  SetAnimation  ( .Actor:Self 00000002 00280302 )
            Call  AddActorDecoration    ( .Actor:Self 00000002 00000000 .Decoration:Sweat )
            Call  SetAnimationRate      ( .Actor:Self 00000002 *Fixed[3.0] )
            Wait  10`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  10`
            Call  SetAnimationRate  ( .Actor:Self 00000002 *Fixed[1.0] )
            Call  UseCamPreset      ( 00000002 )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  YieldTurn ( )
            Call  SetAnimation      ( .Actor:Self 00000002 00280304 )
            Call  SetActorYaw       ( .Actor:Self 000000B4 )
            ExecWait  $Script_80225CF0
            Call  SetActorYaw       ( .Actor:Self 00000000 )
            Call  RemoveActorDecoration ( .Actor:Self 00000002 00000000 )
            Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
        Default
            Wait  10`
            Call  UseCamPreset  ( 00000042 )
            Call  SetBattleCamZoom  ( 0000012C )
            Call  BattleCamTargetActor  ( .Actor:Self )
            Call  8024ECF8      ( FFFFFFFF 00000001 00000000 )
            Call  PlaySoundAtActor  ( .Actor:Self 000020E0 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetAnimation  ( .Actor:Self 00000002 00280305 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .False .False )
            Call  PlaySoundAtActor  ( .Actor:Self 000002C1 )
            Call  SetActorSounds    ( .Actor:Self .ActorSound:Fly 00000000 00000000 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 00280305 )
            Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
    EndSwitch
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000002 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  AddGoalPos    ( .Actor:Self 00000032 0000000A 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetAnimation  ( .Actor:Self 00000002 00280304 )
            Call  FlyToGoal     ( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Wait  5`
            Call  YieldTurn ( )
            Call  SetAnimation  ( .Actor:Self 00000002 00280304 )
            ExecWait  $Script_80225CF0
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_80226B74
{
    Call  8027D32C      ( FFFFFF81 )
    Call  SetPartFlags  ( .Actor:Self 00000002 00020005 )
    Call  SetPartFlags  ( .Actor:Self 00000003 00120004 )
    Call  SetPartFlags  ( .Actor:Self 00000004 00120004 )
    Call  SetPartFlags  ( .Actor:Self 00000001 00800004 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetPartPos    ( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] )
    Call  SetPartDispOffset ( .Actor:Self 00000003 FFFFFFF7 00000007 FFFFFFFE )
    Call  SetPartPos    ( .Actor:Self 00000004 *Var[0] *Var[1] *Var[2] )
    Call  SetPartDispOffset ( .Actor:Self 00000004 0000000B 00000007 FFFFFFFE )
    Call  GetLastEvent  ( .Actor:Self *Var[0] )
    If  *Var[0]  ==  0000000F % F
        Call  SetAnimation  ( .Actor:Self 00000001 0026040A )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00260405 )
    EndIf
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000000
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal        ( .Actor:Self 0000000F .False .True .False )
    Call  $Function_80218700    ( 00000064 0000000A )
    Thread
        Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[0.3] )
    EndThread
    Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
    Call  GetLastEvent      ( .Actor:Self *Var[3] )
    If  *Var[3]  ==  0000000F % F
        Call  SetAnimation  ( .Actor:Self 00000001 00260405 )
        Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
        Add   *Var[4]  0000000A
        Add   *Var[5]  00000005
        Call  PlayEffect    ( ~FX:SmokeBurst:Black *Var[3] *Var[4] *Var[5] *Fixed[1.0] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
    EndIf
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
    Loop  0000000A
        Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
        Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .True )
        Wait  1`
        Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
        Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .False )
        Wait  1`
    EndLoop
    Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
    Call  SetPartFlagBits   ( .Actor:Self 00000004 00000001 .True )
    Call  GetIndexFromHome  ( .Actor:Self *Var[0] )
    Mod   *Var[0]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[0] )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetHomePos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetAnimation      ( .Actor:Self 00000001 00260401 )
    Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
    Call  SetStatusTable    ( .Actor:Self $StatusTable_80225728 )
    Call  SetActorType      ( .Actor:Self 00000002 )
    ExecWait  $Script_80227194
    Call  SetActorFlagBits  ( .Actor:Self 00001000 .True )
    Call  HPBarToHome       ( .Actor:Self )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Return
    End
}

#new:IdleAnimations $IdleAnimations_802270FC
{
    .Status:Normal    00260401
    .Status:Stone     00260400
    .Status:Sleep     00260408
    .Status:Poison    00260401
    .Status:Stop      00260400
    .Status:Static    00260401
    .Status:Paralyze  00260400
    .Status:Dizzy     00260407
    .Status:Fear      00260407
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80227148
{
    .Status:Normal    00260403
    .Status:Stone     00260400
    .Status:Sleep     00260408
    .Status:Poison    00260401
    .Status:Stop      00260400
    .Status:Static    00260403
    .Status:Paralyze  00260400
    .Status:Dizzy     00260407
    .Status:Fear      00260407
    .Status:End
}

#new:Script $Script_80227194
{
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_80227CE8 )
    Call  BindIdle  ( .Actor:Self $Script_Idle_802271E0 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_802274BC )
    Return
    End
}

#new:Script $Script_Idle_802271E0
{
    Label  A
    Call  RandInt   ( 00000050 *Var[0] )
    Add   *Var[0]  00000050
    Loop  *Var[0]
        Label  0
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  0
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Add   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80227148 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802270FC )
    Loop  00000014
        Label  1
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  1
        EndIf
        Wait  1`
    EndLoop
    Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[0]  00000005
    Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80227148 )
    Call  SetIdleGoal       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  IdleRunToGoal     ( .Actor:Self 00000000 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_802270FC )
    Loop  00000050
        Label  2
        Call  GetStatusFlags    ( .Actor:Self *Var[1] )
        If  *Var[1]  &  0035D000
            Wait  1`
            Goto  2
        EndIf
        Wait  1`
    EndLoop
    Goto  A
    Return
    End
}

#new:Script $Script_HandleEvent_802274BC
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260409
            SetConst  *Var[2]  0026040A
            ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260409
            SetConst  *Var[2]  0026040A
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040A
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040E
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoJumpBack
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260407 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  0026040E
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:StarBeam % 13
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260401
            ExecWait  DoImmune
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260406
            ExecWait  DoDeath
            Return
        Case  ==  .Event:EndFirstStrike % 35
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260403 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  HPBarToHome   ( .Actor:Self )
        Case  ==  .Event:RecoverStatus % 31
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260401
            ExecWait  DoRecover
        Case  ==  .Event:ScareAway % 39
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260403
            SetConst  *Var[2]  00260405
            ExecWait  DoScareAway
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260403
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00260405
            ExecWait  DoBlowAway
            Return
        Default
    EndSwitch
    Call  SetAnimation      ( .Actor:Self 00000001 00260401 )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:FloatTable $FloatTable_80227B7C
{
    0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
    0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
    0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
    0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
    0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
    0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
    0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
    0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
    0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
    0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
    0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
    0.999391 0.999848 1.0
}

#new:Script $Script_TakeTurn_80227CE8
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00260403 )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  AddGoalPos        ( .Actor:Self 00000032 00000000 00000000 )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  SetAnimation      ( .Actor:Self 00000001 00260401 )
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
    Wait  1`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
    Wait  5`
    Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
    Call  SetAnimation      ( .Actor:Self 00000001 00260404 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[0]  0000000A
            Set   *Var[1]  0000000A
            Add   *Var[2]  00000003
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_802188E4    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260408 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00260405 )
            Wait  5`
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Wait  5`
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation      ( .Actor:Self 00000001 00260404 )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000014
            Set   *Var[1]  00000000
            Call  SetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
            Thread
                Wait  4`
                Set   *Var[0]  000000B4
                Loop  00000004
                    Sub   *Var[0]  0000002D
                    Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var[0] )
                    Wait  1`
                EndLoop
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260407 )
            Wait  5`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
        Default
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
            Thread
                Call  GetActorPos   ( .Actor:Self *Var[1] *Var[2] *Var[0] )
                Set   *Var[0]  00000000
                Loop  00000010
                    Call  GetActorPos   ( .Actor:Self *Var[4] *Var[5] *Var[6] )
                    Call  $Function_802188E4    ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
                    Call  SetActorRotation      ( .Actor:Self 00000000 00000000 *Var[0] )
                    Set   *Var[1]  *Var[4]
                    Set   *Var[2]  *Var[5]
                    Set   *Var[3]  *Var[6]
                    Wait  1`
                EndLoop
            EndThread
            Thread
                Wait  6`
                Call  SetAnimation  ( .Actor:Self 00000001 00260404 )
            EndThread
            Call  JumpToGoal    ( .Actor:Self 00000010 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 0026040B )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
            Wait  1`
    EndSwitch
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000000 00000002 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
            Wait  1`
            Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Wait  1`
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00260401 )
            Wait  3`
            Call  YieldTurn ( )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00260403 )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:DefenseTable $DefenseTable_802289B0
{
    .Element:Normal 00000002
    .Element:Fire   00000063
    .Element:Blast  00000063
    .Element:End
}

#new:DefenseTable $DefenseTable_802289CC
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_802289D8
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      90`
    .Status:Poison     50`
    .Status:Frozen      0`
    .Status:Dizzy      75`
    .Status:Fear        0`
    .Status:Static     50`
    .Status:Paralyze   75`
    .Status:Shrink     90`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_80228A84
{
    00800000 01000000 001000FF $IdleAnimations_80228B1C $DefenseTable_802289B0 00001000 00000000 01070000 00000000
}

#new:Actor $BuzzyBeetle
{
    % stats
    [Index]        17b
    [Level]        10`b
    [MaxHP]         3`b
    [Coins]         1`b
    [Flags]       00000800
    [StatusTable] $StatusTable_802289D8
    % ai
    [PartsCount]    1`s
    [PartsTable]  $PartsTable_80228A84
    [Script]      $Script_Init_80228BAC
    % move effectiveness
    [Escape]       60`b
    [Item]         75`b
    [AirLift]      75`b
    [Hurricane]    75`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce]  90`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         22`b  18`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]   -8`b  16`b % dx dy
    [StatusIcon]    8`b  13`b % dx dy
}

#new:IdleAnimations $IdleAnimations_80228AD0
{
    .Status:Normal    00330001
    .Status:Stone     00330000
    .Status:Sleep     00330009
    .Status:Poison    00330001
    .Status:Stop      00330000
    .Status:Static    00330001
    .Status:Paralyze  00330000
    .Status:Dizzy     0033000A
    .Status:Fear      0033000A
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80228B1C
{
    .Status:Normal    0033000F
    .Status:Stone     0033000E
    .Status:Sleep     00330014
    .Status:Poison    0033000F
    .Status:Stop      0033000E
    .Status:Static    0033000F
    .Status:Paralyze  0033000E
    .Status:Dizzy     00330015
    .Status:Fear      00330015
    .Status:End
}

#new:IdleAnimations $IdleAnimations_80228B68
{
    .Status:Normal    00330002
    .Status:Stone     0033001A
    .Status:Sleep     0033001B
    .Status:Poison    00330002
    .Status:Stop      0033001A
    .Status:Static    00330002
    .Status:Dizzy     0033001C
    .Status:Fear      0033001C
    .Status:End
}

#new:Script $Script_Init_80228BAC
{
    Call  BindIdle      ( .Actor:Self $Script_Idle_80228D7C )
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
        Call  $Function_802189E0    ( FFFFFFF6 00000000 0000000A 00000000 )
        Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022A47C )
        Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_802291C0 )
        Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .False )
    Else
        Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
        Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
        Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
        Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022AF34 )
        Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80229718 )
        Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80228AD0 )
        Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
        Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    EndIf
    Call  HPBarToHome       ( .Actor:Self )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_Idle_80228D7C
{
    Return
    End
}

#new:Script $Script_80228D8C
{
    Call  8027D32C      ( FFFFFF81 )
    Call  SetActorVar   ( .Actor:Self 00000008 00000002 )
    Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
    Call  8027D4C8      ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
    Call  $Function_802189E0    ( FFFFFFF6 00000014 0000000A 00000014 )
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8022AF34 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80229718 )
    Call  SetActorVar   ( .Actor:Self 00000009 00000001 )
    Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_802289CC )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80228B68 )
    Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00000010 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
    Call  SetAnimation  ( .Actor:Self 00000001 00330008 )
    Call  SetActorYaw   ( .Actor:Self 000000B4 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[1]  00000018
    Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000000
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
    Call  GetIndexFromPos   ( .Actor:Self *Var[A] )
    Mod   *Var[A]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[A] )
    Call  GetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetHomePos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Set   *Var[D]  *Var[A]
    Set   *Var[E]  *Var[B]
    Set   *Var[F]  *Var[C]
    Sub   *Var[D]  *Var[0]
    Sub   *Var[E]  *Var[1]
    Sub   *Var[F]  *Var[2]
    Div   *Var[D]  00000002
    Div   *Var[E]  00000002
    Div   *Var[F]  00000002
    Add   *Var[0]  *Var[D]
    Add   *Var[1]  *Var[E]
    Add   *Var[2]  *Var[F]
    Call  ResetAllActorSounds   ( .Actor:Self )
    Call  SetAnimation  ( .Actor:Self 00000001 00330002 )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
    Call  HPBarToHome   ( .Actor:Self )
    Return
    End
}

#new:Script $Script_HandleEvent_802291C0
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        Case  ==  .Event:HitCombo % 9
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoNormalHit
        Case  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoNormalHit
            ExecWait  $Script_80228D8C
        Case  ==  .Event:FlipTrigger % D
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoNormalHit
            ExecWait  $Script_80228D8C
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330018
            SetConst  *Var[2]  00330018
            ExecWait  DoBurnHit
            ExecWait  $Script_80228D8C
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330018
            SetConst  *Var[2]  00330018
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330018
            ExecWait  DoDeath
            Return
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330004
            ExecWait  DoReturnHome
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoDeath
            Return
        Case  ==  00000017 % 17
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330016
            ExecWait  DoImmune
        Case  ==  .Event:Immune % 19
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330016
            ExecWait  DoImmune
            Wait  2`
            Call  GetStatusFlags    ( .Actor:Self *Var[0] )
            If  *Var[0]  !&  00200000
                ExecWait  $Script_80228D8C
            EndIf
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330013
            ExecWait  DoDeath
            Return
        Case  ==  .Event:RecoverStatus % 31
        Case  ==  .Event:ScareAway % 39
            Call  SetActorFlagBits  ( .Actor:Self 00000200 .True )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330011
            SetConst  *Var[2]  00330013
            ExecWait  DoScareAway
            Return
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8022967C
{
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[3] )
    If  *Var[3]  ==  00000002
        Set   *Var[1]  *Var[2]
    EndIf
    Return
    End
}

#new:IntTable $IntTable_802296CC
{
    00000007 0000000D 00000011 00000015 00000017 00000018 00000017 00000015
    00000011 0000000D 00000007 00000000 00000004 00000007 00000006 00000004
    00000000 00000002 00000000
}

#new:Script $Script_HandleEvent_80229718
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  !=  00000002
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000B
                SetConst  *Var[2]  0033000B
                ExecWait  DoBurnHit
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033001D
                SetConst  *Var[2]  0033001D
                ExecWait  DoBurnHit
            EndIf
        Case  ==  .Event:BurnDeath % 24
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  !=  00000002
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000B
                SetConst  *Var[2]  0033000B
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000B
                ExecWait  DoDeath
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033001D
                SetConst  *Var[2]  0033001D
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033001D
                ExecWait  DoDeath
            EndIf
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:FlipTrigger % D
            Call  SetActorVar       ( .Actor:Self 00000008 00000002 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
            Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
            Call  SetActorVar       ( .Actor:Self 00000009 00000001 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_802289CC )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80228B68 )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
            Call  SetAnimation      ( .Actor:Self 00000001 00330007 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
            Thread
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFD3 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFA6 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF79 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF4C )
                Wait  1`
            EndThread
            UseIntBuffer  $IntTable_802296CC
            Loop  00000013
                Get1Int  *Var[0]
                Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var[0] 00000000 )
                Wait  1`
            EndLoop
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 00330019 )
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330004
            ExecWait  DoReturnHome
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            ExecWait  DoDeath
            Return
        Case  ==  00000017 % 17
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000C
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 00330017 )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330002
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:Immune % 19
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000C
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 0033000D )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330002
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:SpikeTaunt % 1B
            Wait  10`
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  GetStatusFlags    ( .Actor:Self *Var[3] )
            If  *Var[3]  &  00080000
                Add   *Var[1]  00000009
            Else
                Add   *Var[1]  00000018
            EndIf
            Call  PlayEffect    ( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
            Wait  20`
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330007
            SetConst  *Var[2]  00330019
            ExecWait  $Script_8022967C
            ExecWait  DoDeath
            Return
        Case  ==  .Event:RecoverStatus % 31
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330001
                ExecWait  DoRecover
            EndIf
        Case  ==  .Event:ScareAway % 39
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330004
                SetConst  *Var[2]  00330007
                ExecWait  DoScareAway
                Return
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330002
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:BeginAirLift % 3A
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330004
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330002
            EndIf
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330007
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330008
            EndIf
            ExecWait  DoBlowAway
            Return
        Case  ==  .Event:AirLiftFailed % 1F
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  0033000C
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 0033000D )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  00330002
                ExecWait  DoImmune
            EndIf
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022A47C
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
    Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
    Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
    Call  $Function_802189E0    ( FFFFFFF6 00000014 0000000A 00000014 )
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022AF34 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80229718 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80228AD0 )
    Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    Call  GetIndexFromPos   ( .Actor:Self *Var[0] )
    Mod   *Var[0]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[0] )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetHomePos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  HPBarToHome       ( .Actor:Self )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetGoalToTarget   ( .Actor:Self )
        Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
        Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetActorPos   ( .Actor:Self *Var[0] *Var[4] *Var[2] )
        Call  SetAnimation  ( .Actor:Self 00000001 0033000E )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 00330011 )
        Call  SetGoalToTarget   ( .Actor:Self )
        Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
        Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[4] *Var[2] )
        Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
        Call  RunToGoal     ( .Actor:Self 00000000 .False )
        Call  SetAnimation  ( .Actor:Self 00000001 0033000E )
        Wait  8`
    EndIf
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  UseCamPreset      ( 00000005 )
        Call  SetBattleCamZoom  ( 000001AE )
        Call  SetBattleCamOffsetZ   ( 00000014 )
        Call  MoveBattleCamOver ( 0000000A )
        Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    EndIf
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000003 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  SetPartYaw    ( .Actor:Self 00000001 000000B4 )
            Call  SetAnimation  ( .Actor:Self 00000001 00330008 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[1]  00000018
            Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Set   *Var[1]  00000000
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  ResetAllActorSounds   ( .Actor:Self )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Thread
                Wait  5`
                Call  SetAnimation  ( .Actor:Self 00000001 00330000 )
            EndThread
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Wait  8`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 00330004 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00330001 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetActorYaw   ( .Actor:Self 000000B4 )
    Call  SetAnimation  ( .Actor:Self 00000001 00330008 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[1]  00000018
    Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalToTarget       ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  *Var[4]
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Wait  2`
    Call  EnemyDamageTarget     ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  0000001E
            Set   *Var[1]  00000000
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Thread
                Wait  5`
                Call  SetAnimation  ( .Actor:Self 00000001 00330000 )
            EndThread
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Wait  8`
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00330001 )
        EndCaseGroup
    EndSwitch
    Label  A
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022AF34
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
    If  *Var[0]  ==  00000002
        Call  GetActorVar   ( .Actor:Self 00000009 *Var[0] )
        Sub   *Var[0]  00000001
        If  *Var[0]  >  00000000
            Call  SetActorVar   ( .Actor:Self 00000009 *Var[0] )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  30`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  UseCamPreset  ( 00000002 )
        Else
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  20`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330002
            SetConst  *Var[2]  00330001
            ExecWait  8029BBB4
            Call  SetActorYaw       ( .Actor:Self 00000000 )
            Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
            Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_802289B0 )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80228AD0 )
            Call  BindIdle  ( .Actor:Self $Script_Idle_80228D7C )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .False )
        EndIf
        Call  EnableIdleScript  ( .Actor:Self 00000001 )
        Call  UseIdleAnimation  ( .Actor:Self .True )
        Return
    EndIf
    Call  SetTargetActor        ( .Actor:Self .Actor:Player )
    Call  UseCamPreset  ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8      ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation  ( .Actor:Self 00000001 0033000C )
    Wait  10`
    Call  SetAnimation  ( .Actor:Self 00000001 00330006 )
    Thread
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  10`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  5`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
    EndThread
    Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
    Call  SetAnimation      ( .Actor:Self 00000001 00330005 )
    Wait  20`
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Walk 00000000 00000000 )
    Call  PlaySoundAtActor  ( .Actor:Self 000020D3 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000002 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Thread
                Loop
                    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
                    Add   *Var[0]  0000001E
                    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
                    If  *Var[0]  >  *Var[3]
                        BreakLoop
                    EndIf
                    Wait  1`
                EndLoop
                Call  UseCamPreset  ( 00000001 )
                If  *Var[A]  ==  .HitResult:Lucky % 5
                    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
                EndIf
                Wait  15`
                Call  UseCamPreset  ( 00000002 )
            EndThread
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  AddGoalPos    ( .Actor:Self FFFFFF6A 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[14.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Wait  15`
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetGoalToHome ( .Actor:Self )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  000000C8
            Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Wait  10`
            Call  SetAnimation  ( .Actor:Self 00000001 0033000D )
            Wait  10`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[14.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000002 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 00330001 )
            Wait  8`
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  00330004
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 00330001 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

PADDING: 8022B93C to 8022B940 (005FFDCC to 005FFDD0)
00000000

#new:DefenseTable $DefenseTable_8022B940
{
    .Element:Normal 00000004
    .Element:Fire   00000063
    .Element:Blast  00000063
    .Element:End
}

#new:DefenseTable $DefenseTable_8022B95C
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8022B968
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      60`
    .Status:Poison     50`
    .Status:Frozen      0`
    .Status:Dizzy      75`
    .Status:Fear        0`
    .Status:Static     50`
    .Status:Paralyze   75`
    .Status:Shrink     75`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod     -1`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      1`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_8022BA14
{
    00800000 01000000 001800FF $IdleAnimations_8022BAAC $DefenseTable_8022B940 00001010 00000000 000E0000 00000000
}

#new:Actor $SpikeTop
{
    % stats
    [Index]        2Cb
    [Level]        17`b
    [MaxHP]         4`b
    [Coins]         1`b
    [Flags]       00000800
    [StatusTable] $StatusTable_8022B968
    % ai
    [PartsCount]    1`s
    [PartsTable]  $PartsTable_8022BA14
    [Script]      $Script_Init_8022BB3C
    % move effectiveness
    [Escape]       60`b
    [Item]         60`b
    [AirLift]      70`b
    [Hurricane]    65`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce]  90`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  24`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]   -8`b  16`b % dx dy
    [StatusIcon]    8`b  13`b % dx dy
}

#new:IdleAnimations $IdleAnimations_8022BA60
{
    .Status:Normal    004D0003
    .Status:Stone     004D0000
    .Status:Sleep     004D001B
    .Status:Poison    004D0003
    .Status:Stop      004D0000
    .Status:Static    004D0003
    .Status:Paralyze  004D0000
    .Status:Dizzy     004D001E
    .Status:Fear      004D001E
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8022BAAC
{
    .Status:Normal    004D0004
    .Status:Stone     004D0001
    .Status:Sleep     004D001C
    .Status:Poison    004D0004
    .Status:Stop      004D0001
    .Status:Static    004D0004
    .Status:Paralyze  004D0001
    .Status:Dizzy     004D001F
    .Status:Fear      004D001F
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8022BAF8
{
    .Status:Normal    004D0005
    .Status:Stone     004D0002
    .Status:Sleep     004D001D
    .Status:Poison    004D0005
    .Status:Stop      004D0002
    .Status:Static    004D0005
    .Status:Dizzy     004D0020
    .Status:Fear      004D0020
    .Status:End
}

#new:Script $Script_Init_8022BB3C
{
    Call  BindIdle      ( .Actor:Self $Script_Idle_8022BD0C )
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
        Call  $Function_80218AB0    ( FFFFFFF6 00000000 0000000A 00000000 )
        Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022D444 )
        Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022C150 )
        Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .False )
    Else
        Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
        Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000018 )
        Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
        Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022DEFC )
        Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022C6A8 )
        Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022BA60 )
        Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
        Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    EndIf
    Call  HPBarToHome       ( .Actor:Self )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_Idle_8022BD0C
{
    Return
    End
}

#new:Script $Script_8022BD1C
{
    Call  8027D32C      ( FFFFFF81 )
    Call  SetActorVar   ( .Actor:Self 00000008 00000002 )
    Call  SetTargetOffset   ( .Actor:Self 00000001 00000001 00000014 )
    Call  8027D4C8      ( FFFFFF81 00000001 FFFFFFFD FFFFFFF8 )
    Call  $Function_80218AB0    ( FFFFFFF6 00000014 0000000A 00000014 )
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8022DEFC )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022C6A8 )
    Call  SetActorVar   ( .Actor:Self 00000009 00000001 )
    Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022B95C )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022BAF8 )
    Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00000010 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
    Call  SetAnimation  ( .Actor:Self 00000001 004D0015 )
    Call  SetActorYaw   ( .Actor:Self 000000B4 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[1]  00000018
    Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  00000000
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
    Call  GetIndexFromPos   ( .Actor:Self *Var[A] )
    Mod   *Var[A]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[A] )
    Call  GetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  SetHomePos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Set   *Var[D]  *Var[A]
    Set   *Var[E]  *Var[B]
    Set   *Var[F]  *Var[C]
    Sub   *Var[D]  *Var[0]
    Sub   *Var[E]  *Var[1]
    Sub   *Var[F]  *Var[2]
    Div   *Var[D]  00000002
    Div   *Var[E]  00000002
    Div   *Var[F]  00000002
    Add   *Var[0]  *Var[D]
    Add   *Var[1]  *Var[E]
    Add   *Var[2]  *Var[F]
    Call  ResetAllActorSounds   ( .Actor:Self )
    Call  SetAnimation  ( .Actor:Self 00000001 004D0005 )
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
    Call  SetGoalPos    ( .Actor:Self *Var[A] *Var[B] *Var[C] )
    Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
    Call  HPBarToHome   ( .Actor:Self )
    Return
    End
}

#new:Script $Script_HandleEvent_8022C150
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        Case  ==  .Event:HitCombo % 9
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoNormalHit
        Case  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoNormalHit
            ExecWait  $Script_8022BD1C
        Case  ==  .Event:FlipTrigger % D
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoNormalHit
            ExecWait  $Script_8022BD1C
        Case  ==  .Event:BurnHit % E
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0019
            SetConst  *Var[2]  004D001A
            ExecWait  DoBurnHit
            ExecWait  $Script_8022BD1C
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0019
            SetConst  *Var[2]  004D001A
            ExecWait  DoBurnHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D001A
            ExecWait  DoDeath
            Return
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0008
            ExecWait  DoReturnHome
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoDeath
            Return
        Case  ==  00000017 % 17
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D000D
            ExecWait  DoImmune
        Case  ==  .Event:Immune % 19
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D000D
            ExecWait  DoImmune
            Wait  2`
            Call  GetStatusFlags    ( .Actor:Self *Var[0] )
            If  *Var[0]  !&  00200000
                ExecWait  $Script_8022BD1C
            EndIf
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0014
            ExecWait  DoDeath
            Return
        Case  ==  .Event:RecoverStatus % 31
        Case  ==  .Event:ScareAway % 39
            Call  SetActorFlagBits  ( .Actor:Self 00000200 .True )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0009
            SetConst  *Var[2]  004D0014
            ExecWait  DoScareAway
            Return
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_8022C60C
{
    Call  GetActorVar   ( .Actor:Self 00000008 *Var[3] )
    If  *Var[3]  ==  00000002
        Set   *Var[1]  *Var[2]
    EndIf
    Return
    End
}

#new:IntTable $IntTable_8022C65C
{
    00000007 0000000D 00000011 00000015 00000017 00000018 00000017 00000015
    00000011 0000000D 00000007 00000000 00000004 00000007 00000006 00000004
    00000000 00000002 00000000
}

#new:Script $Script_HandleEvent_8022C6A8
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  !=  00000002
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0016
                SetConst  *Var[2]  004D0017
                ExecWait  DoBurnHit
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0018
                SetConst  *Var[2]  004D0018
                ExecWait  DoBurnHit
            EndIf
        Case  ==  .Event:BurnDeath % 24
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  !=  00000002
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0016
                SetConst  *Var[2]  004D0017
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0017
                ExecWait  DoDeath
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0018
                SetConst  *Var[2]  004D0018
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0018
                ExecWait  DoDeath
            EndIf
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:FlipTrigger % D
            Call  SetActorVar       ( .Actor:Self 00000008 00000002 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 00000001 00000014 )
            Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFD FFFFFFF8 )
            Call  SetActorVar       ( .Actor:Self 00000009 00000001 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022B95C )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022BAF8 )
            Call  SetPartEventBits  ( .Actor:Self 00000001 00000010 .False )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
            Call  SetAnimation      ( .Actor:Self 00000001 004D0013 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
            Thread
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFD3 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFA6 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF79 )
                Wait  1`
                Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF4C )
                Wait  1`
            EndThread
            UseIntBuffer  $IntTable_8022C65C
            Loop  00000013
                Get1Int  *Var[0]
                Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var[0] 00000000 )
                Wait  1`
            EndLoop
            Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
            Call  SetAnimation  ( .Actor:Self 00000001 004D0015 )
        Case  ==  .Event:ShockHit % 2F
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoJumpBack
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0008
            ExecWait  DoReturnHome
        Case  ==  .Event:ShockDeath % 26
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoShockHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            ExecWait  DoDeath
            Return
        Case  ==  00000017 % 17
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D000B
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 004D000E )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0005
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:Immune % 19
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D000B
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 004D000C )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0005
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:SpikeTaunt % 1B
            Wait  10`
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  GetStatusFlags    ( .Actor:Self *Var[3] )
            If  *Var[3]  &  00080000
                Add   *Var[1]  00000009
            Else
                Add   *Var[1]  00000018
            EndIf
            Call  PlayEffect    ( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
            Wait  20`
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoDeath
            Return
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0013
            SetConst  *Var[2]  004D0015
            ExecWait  $Script_8022C60C
            ExecWait  DoDeath
            Return
        Case  ==  .Event:RecoverStatus % 31
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0003
                ExecWait  DoRecover
            EndIf
        Case  ==  .Event:ScareAway % 39
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0008
                SetConst  *Var[2]  004D0013
                ExecWait  DoScareAway
                Return
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0005
                ExecWait  DoImmune
            EndIf
        Case  ==  .Event:BeginAirLift % 3A
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0008
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0005
            EndIf
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            Call  SetActorDispOffset    ( .Actor:Self 00000007 00000000 00000000 )
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0013
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0015
            EndIf
            ExecWait  DoBlowAway
            Return
        Case  ==  .Event:AirLiftFailed % 1F
            Call  GetActorVar   ( .Actor:Self 00000008 *Var[0] )
            If  *Var[0]  ==  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D000B
                ExecWait  DoImmune
                Call  SetAnimation  ( .Actor:Self 00000001 004D000C )
                Wait  8`
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004D0005
                ExecWait  DoImmune
            EndIf
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022D444
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
    Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000018 )
    Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
    Call  $Function_80218AB0    ( FFFFFFF6 00000014 0000000A 00000014 )
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8022DEFC )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022C6A8 )
    Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022BA60 )
    Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
    Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
    Call  GetIndexFromPos   ( .Actor:Self *Var[0] )
    Mod   *Var[0]  00000004
    Call  SetGoalToIndex    ( .Actor:Self *Var[0] )
    Call  GetGoalPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetHomePos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  HPBarToHome       ( .Actor:Self )
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  SetGoalToTarget   ( .Actor:Self )
        Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
        Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetActorPos   ( .Actor:Self *Var[0] *Var[4] *Var[2] )
        Call  SetAnimation  ( .Actor:Self 00000001 004D0001 )
    Else
        Call  SetAnimation  ( .Actor:Self 00000001 004D0009 )
        Call  SetGoalToTarget   ( .Actor:Self )
        Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
        Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[4] *Var[2] )
        Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
        Call  RunToGoal     ( .Actor:Self 00000000 .False )
        Call  SetAnimation  ( .Actor:Self 00000001 004D0001 )
        Wait  8`
    EndIf
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000301 00000000 )
    Call  GetBattlePhase    ( *Var[0] )
    If  *Var[0]  ==  00000001
        Call  UseCamPreset      ( 00000005 )
        Call  SetBattleCamZoom  ( 000001AE )
        Call  SetBattleCamOffsetZ   ( 00000014 )
        Call  MoveBattleCamOver ( 0000000A )
        Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    EndIf
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000004 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Call  SetActorYaw   ( .Actor:Self 000000B4 )
            Call  SetPartYaw    ( .Actor:Self 00000001 000000B4 )
            Call  SetAnimation  ( .Actor:Self 00000001 004D0015 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Sub   *Var[1]  00000018
            Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Set   *Var[1]  00000000
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            If  *Var[A]  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  ResetAllActorSounds   ( .Actor:Self )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Thread
                Wait  5`
                Call  SetAnimation  ( .Actor:Self 00000001 004D0000 )
            EndThread
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Wait  8`
            Call  UseCamPreset  ( 00000002 )
            Call  YieldTurn ( )
            Call  SetGoalToHome ( .Actor:Self )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            Call  SetAnimation  ( .Actor:Self 00000001 004D0008 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Call  SetAnimation  ( .Actor:Self 00000001 004D0003 )
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  SetActorYaw   ( .Actor:Self 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetActorYaw   ( .Actor:Self 000000B4 )
    Call  SetAnimation  ( .Actor:Self 00000001 004D0015 )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Sub   *Var[1]  00000018
    Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    Call  SetGoalToTarget       ( .Actor:Self )
    Call  GetGoalPos    ( .Actor:Self *Var[3] *Var[4] *Var[5] )
    Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Set   *Var[1]  *Var[4]
    Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
    Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Wait  2`
    Call  EnemyDamageTarget     ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000004 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  0000001E
            Set   *Var[1]  00000000
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000F .False .True .False )
            Thread
                Wait  5`
                Call  SetAnimation  ( .Actor:Self 00000001 004D0000 )
            EndThread
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Wait  8`
            Call  YieldTurn ( )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0008
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 004D0003 )
        EndCaseGroup
    EndSwitch
    Label  A
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022DEFC
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorVar       ( .Actor:Self 00000008 *Var[0] )
    If  *Var[0]  ==  00000002
        Call  GetActorVar   ( .Actor:Self 00000009 *Var[0] )
        Sub   *Var[0]  00000001
        If  *Var[0]  >  00000000
            Call  SetActorVar   ( .Actor:Self 00000009 *Var[0] )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  30`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  UseCamPreset  ( 00000002 )
        Else
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  20`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0005
            SetConst  *Var[2]  004D0003
            ExecWait  8029BBB4
            Call  SetActorYaw       ( .Actor:Self 00000000 )
            Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
            Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000018 )
            Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022B940 )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022BA60 )
            Call  BindIdle  ( .Actor:Self $Script_Idle_8022BD0C )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .False )
            Call  SetPartEventBits  ( .Actor:Self 00000001 00000010 .True )
        EndIf
        Call  EnableIdleScript  ( .Actor:Self 00000001 )
        Call  UseIdleAnimation  ( .Actor:Self .True )
        Return
    EndIf
    Call  SetTargetActor        ( .Actor:Self .Actor:Player )
    Call  UseCamPreset  ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8      ( FFFFFFFF 00000001 00000000 )
    Call  SetAnimation  ( .Actor:Self 00000001 004D000B )
    Wait  10`
    Call  SetAnimation  ( .Actor:Self 00000001 004D000F )
    Thread
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  10`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  5`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
    EndThread
    Call  PlaySoundAtActor  ( .Actor:Self 00002021 )
    Call  SetAnimation      ( .Actor:Self 00000001 004D000A )
    Wait  20`
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Walk 00000000 00000000 )
    Call  PlaySoundAtActor  ( .Actor:Self 000020D3 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:0 00000000 00000003 00000010 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *Var[A]  *Var[0]
            Thread
                Loop
                    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
                    Add   *Var[0]  0000001E
                    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
                    If  *Var[0]  >  *Var[3]
                        BreakLoop
                    EndIf
                    Wait  1`
                EndLoop
                Call  UseCamPreset  ( 00000001 )
                If  *Var[A]  ==  .HitResult:Lucky % 5
                    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
                EndIf
                Wait  15`
                Call  UseCamPreset  ( 00000002 )
            EndThread
            Call  SetGoalToTarget       ( .Actor:Self )
            Call  AddGoalPos    ( .Actor:Self FFFFFF6A 00000000 00000000 )
            Call  SetActorSpeed ( .Actor:Self *Fixed[14.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Wait  15`
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetGoalToHome ( .Actor:Self )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  000000C8
            Call  SetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
            Call  RunToGoal     ( .Actor:Self 00000000 .False )
            Wait  10`
            Call  SetAnimation  ( .Actor:Self 00000001 004D000C )
            Wait  10`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Call  EnableIdleScript      ( .Actor:Self 00000001 )
            Call  UseIdleAnimation      ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[14.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000003 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000028
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000001E
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000008 .False .True .False )
            Add   *Var[0]  00000014
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000006 .False .True .False )
            Call  SetAnimation  ( .Actor:Self 00000001 004D0003 )
            Wait  8`
            Call  YieldTurn ( )
            Call  ResetAllActorSounds   ( .Actor:Self )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004D0008
            ExecWait  DoReturnHome
            Call  SetAnimation  ( .Actor:Self 00000001 004D0003 )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:IdleAnimations $IdleAnimations_8022E920
{
    .Status:Normal    004A0001
    .Status:Stone     004A0000
    .Status:Sleep     004A0010
    .Status:Poison    004A0001
    .Status:Stop      004A0000
    .Status:Static    004A0001
    .Status:Paralyze  004A0000
    .Status:Dizzy     004A0012
    .Status:Fear      004A0012
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8022E96C
{
    .Status:Normal    004A0002
    .Status:Stone     004A0015
    .Status:Sleep     004A0011
    .Status:Poison    004A0002
    .Status:Stop      004A0015
    .Status:Static    004A0002
    .Status:Paralyze  004A0015
    .Status:Dizzy     004A0013
    .Status:Fear      004A0013
    .Status:End
}

#new:IdleAnimations $IdleAnimations_8022E9B8
{
    .Status:Normal    0049000B
    .Status:End
}

#new:DefenseTable $DefenseTable_8022E9C4
{
    .Element:Normal 00000003
    .Element:End
}

#new:DefenseTable $DefenseTable_8022E9D0
{
    .Element:Normal 00000000
    .Element:End
}

#new:StatusTable $StatusTable_8022E9DC
{
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep      60`
    .Status:Poison     50`
    .Status:Frozen      0`
    .Status:Dizzy      75`
    .Status:Fear        0`
    .Status:Static     50`
    .Status:Paralyze   75`
    .Status:Shrink     75`
    .Status:Stop       90`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
}

#new:PartsTable $PartsTable_8022EA88
{
    00800000 01000000 001400FF $IdleAnimations_8022E920 $DefenseTable_8022E9C4 00201000 00000000 00FC0000 00000000
    00020001 02000000 000000FF $IdleAnimations_8022E9B8 $DefenseTable_8022E9C4 00000000 00000000 00000000 00000000
}

#new:Actor $Spiny
{
    % stats
    [Index]        2Fb
    [Level]        19`b
    [MaxHP]         5`b
    [Coins]         1`b
    [Flags]       00000000
    [StatusTable] $StatusTable_8022E9DC
    % ai
    [PartsCount]    2`s
    [PartsTable]  $PartsTable_8022EA88
    [Script]      $Script_Init_8022EAF8
    % move effectiveness
    [Escape]       60`b
    [Item]         60`b
    [AirLift]      75`b
    [Hurricane]    75`b % Bow's "Spook" as well
    [UpAndAway]    95`b
    [PowerBounce]  90`b
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  24`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:Script $Script_Init_8022EAF8
{
    Call  BindIdle      ( .Actor:Self $Script_Idle_8022EB74 )
    Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8022F810 )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022ED44 )
    Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
    Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
    Return
    End
}

#new:Script $Script_Idle_8022EB74
{
    Return
    End
}

#new:Script $Script_8022EB84
{
    Call  SetAnimation  ( .Actor:Self 00000002 0049000C )
    Call  SetPartFlagBits   ( .Actor:Self 00000001 00000001 .True )
    Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
    Call  SetActorYaw   ( .Actor:Self 000000B4 )
    Call  SetGoalToHome ( .Actor:Self )
    Call  RunToGoal     ( .Actor:Self 00000000 .False )
    Call  SetActorYaw   ( .Actor:Self 00000000 )
    Call  SetPartFlagBits   ( .Actor:Self 00000001 00000001 .False )
    Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
    Call  SetAnimation  ( .Actor:Self 00000001 004A001A )
    Wait  8`
    Call  SetAnimation  ( .Actor:Self 00000001 004A0001 )
    Return
    End
}

#new:Script $Script_8022ECA8
{
    Call  GetActorVar   ( .Actor:Self 00000000 *Var[3] )
    If  *Var[3]  ==  00000001
        Set   *Var[1]  *Var[2]
    EndIf
    Return
    End
}

#new:IntTable $IntTable_8022ECF8
{
    00000007 0000000D 00000011 00000015 00000017 00000018 00000017 00000015
    00000011 0000000D 00000007 00000000 00000004 00000007 00000006 00000004
    00000000 00000002 00000000
}

#new:Script $Script_HandleEvent_8022ED44
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetLastEvent      ( .Actor:Self *Var[0] )
    Switch  *Var[0]
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            If  *Var[0]  !=  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000B
                SetConst  *Var[2]  004A000C
                ExecWait  DoBurnHit
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000D
                SetConst  *Var[2]  004A000E
                ExecWait  DoBurnHit
            EndIf
        Case  ==  .Event:BurnDeath % 24
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            If  *Var[0]  !=  00000001
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000B
                SetConst  *Var[2]  004A000C
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000C
                ExecWait  DoDeath
            Else
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000D
                SetConst  *Var[2]  004A000E
                ExecWait  DoBurnHit
                SetConst  *Var[0]  00000001
                SetConst  *Var[1]  004A000E
                ExecWait  DoDeath
            EndIf
            Return
        Case  ==  .Event:SpinSmashHit % B
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoSpinSmashHit
        Case  ==  .Event:SpinSmashDeath % 21
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoSpinSmashHit
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoDeath
            Return
        Case  ==  .Event:FlipTrigger % D
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            If  *Var[0]  ==  00000001
                Call  SetAnimation  ( .Actor:Self 00000001 004A000A )
            Else
                Call  SetAnimation  ( .Actor:Self 00000001 004A0016 )
            EndIf
            Call  SetActorVar       ( .Actor:Self 00000000 00000001 )
            Call  SetActorVar       ( .Actor:Self 00000001 00000001 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022E9D0 )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022E96C )
            Call  SetPartEventBits  ( .Actor:Self 00000001 00200000 .False )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
            UseIntBuffer  $IntTable_8022ECF8
            Loop  00000013
                Get1Int  *Var[0]
                Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var[0] 00000000 )
                Wait  1`
            EndLoop
            Wait  20`
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
        CaseOR  ==  .Event:AirLiftFailed % 1F
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0006
                    ExecWait  DoImmune
                    Call  SetAnimation  ( .Actor:Self 00000001 004A0007 )
                    Wait  10`
                Case  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0002
                    ExecWait  DoImmune
            EndSwitch
        EndCaseGroup
        Case  ==  .Event:SpikeTaunt % 1B
            Wait  10`
            Call  GetActorPos       ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  GetStatusFlags    ( .Actor:Self *Var[3] )
            If  *Var[0]  &  00080000
                Call  GetActorVar   ( .Actor:Self 00000000 *Var[A] )
                If  *Var[A]  ==  00000000
                    Add   *Var[0]  00000000
                EndIf
                Add   *Var[1]  00000008
            Else
                Call  GetActorVar   ( .Actor:Self 00000000 *Var[A] )
                If  *Var[A]  ==  00000000
                    Add   *Var[0]  FFFFFFFF
                EndIf
                Add   *Var[1]  00000016
            EndIf
            Call  PlayEffect    ( ~FX:LensFlare:Rotating *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
            Wait  20`
        Case  ==  .Event:Death % 20
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0009
            SetConst  *Var[2]  004A000A
            ExecWait  $Script_8022ECA8
            ExecWait  DoDeath
            Return
        Case  ==  .Event:RecoverStatus % 31
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0001
                    ExecWait  DoRecover
                Case  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0002
                    ExecWait  DoImmune
            EndSwitch
        Case  ==  .Event:ScareAway % 39
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0004
                    SetConst  *Var[2]  004A0009
                    ExecWait  DoScareAway
                    Return
                Case  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0002
                    ExecWait  DoImmune
            EndSwitch
        Case  ==  .Event:BeginAirLift % 3A
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0004
                Case  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0002
            EndSwitch
            ExecWait  DoAirLift
        Case  ==  .Event:BlowAway % 16
            Call  GetActorVar   ( .Actor:Self 00000000 *Var[0] )
            Switch  *Var[0]
                Case  ==  00000000
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0004
                Case  ==  00000001
                    SetConst  *Var[0]  00000001
                    SetConst  *Var[1]  004A0002
            EndSwitch
            ExecWait  DoBlowAway
            Return
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_TakeTurn_8022F810
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  GetActorVar       ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  ==  00000001
        Call  GetActorVar   ( .Actor:Self 00000001 *Var[0] )
        Sub   *Var[0]  00000001
        Call  SetActorVar   ( .Actor:Self 00000001 *Var[0] )
        If  *Var[0]  >  00000000
            Call  SetAnimation  ( .Actor:Self 00000001 004A0014 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  30`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
        Else
            Call  SetAnimation      ( .Actor:Self 00000001 004A0014 )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Wait  20`
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            SetConst  *Var[0]  00000001
            SetConst  *Var[1]  004A0002
            SetConst  *Var[2]  004A0001
            ExecWait  8029BBB4
            Call  SetActorVar       ( .Actor:Self 00000000 00000000 )
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022E9C4 )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022E920 )
            Call  SetPartEventBits  ( .Actor:Self 00000001 00200000 .True )
            Call  SetActorFlagBits  ( .Actor:Self 00000400 .False )
        EndIf
        Call  EnableIdleScript  ( .Actor:Self 00000001 )
        Call  UseIdleAnimation  ( .Actor:Self .True )
        Return
    EndIf
    Call  UseCamPreset      ( 0000003F )
    Call  BattleCamTargetActor  ( .Actor:Self )
    Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  GetActorVar       ( .Actor:Self 00000000 *Var[0] )
    If  *Var[0]  ==  00000000
        Wait  10`
        Call  SetAnimation  ( .Actor:Self 00000001 004A0019 )
        Wait  8`
        Call  SetAnimation  ( .Actor:Self 00000001 004A0018 )
        Wait  10`
    Else
        Wait  20`
    EndIf
    Thread
        Call  GetActorPos   ( .Actor:Self *Var[0] *Var[1] *Var[2] )
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  10`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
        Wait  5`
        Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
    EndThread
    Call  EnableActorBlur   ( .Actor:Self 00000001 )
    Call  SetPartFlagBits   ( .Actor:Self 00000001 00000001 .True )
    Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
    Call  SetAnimation      ( .Actor:Self 00000002 0049000C )
    Wait  10`
    Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002C7 )
    Call  SetActorSounds    ( .Actor:Self .ActorSound:Walk 00000000 00000000 )
    Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
    Call  EnemyTestTarget   ( .Actor:Self *Var[A] ~Flags:DamageType:0 00000000 00000004 00000010 )
    Switch  *Var[A]
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Thread
                Loop
                    Call  GetActorPos   ( .Actor:Player *Var[0] *Var[1] *Var[2] )
                    Add   *Var[0]  0000001E
                    Call  GetActorPos   ( .Actor:Self *Var[3] *Var[4] *Var[5] )
                    If  *Var[0]  >  *Var[3]
                        BreakLoop
                    EndIf
                    Wait  1`
                EndLoop
                Call  UseCamPreset  ( 00000001 )
                If  *Var[A]  ==  .HitResult:Lucky % 5
                    Call  EnemyTestTarget   ( .Actor:Self *Var[0] ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
                EndIf
                Wait  15`
                Call  UseCamPreset  ( 00000002 )
            EndThread
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  AddGoalPos        ( .Actor:Self FFFFFF38 00000000 00000000 )
            Call  SetActorSpeed     ( .Actor:Self *Fixed[16.0] )
            Call  RunToGoal ( .Actor:Self 00000000 .False )
            Call  ResetAllActorSounds   ( .Actor:Self )
            Call  EnableActorBlur   ( .Actor:Self 00000000 )
            Call  UseCamPreset      ( 00000002 )
            Call  YieldTurn ( )
            Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
            Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
            ExecWait  $Script_8022EB84
            Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  SetActorSpeed     ( .Actor:Self *Fixed[16.0] )
    Call  RunToGoal ( .Actor:Self 00000000 .False )
    Call  ResetAllActorSounds   ( .Actor:Self )
    Wait  2`
    Call  EnemyDamageTarget ( .Actor:Self *Var[0] ~Flags:DamageType:0 0000FFFF 00000000 00000004 00000020 )
    Switch  *Var[0]
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  00000002 % 2
            Call  UseCamPreset  ( 00000002 )
            Call  SetAnimation  ( .Actor:Self 00000002 0049000B )
            Call  GetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Add   *Var[0]  00000014
            Set   *Var[1]  00000000
            Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.0] )
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000014 .False .True .False )
            Add   *Var[0]  0000000A
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 0000000A .False .True .False )
            Add   *Var[0]  0000000A
            Call  SetGoalPos    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
            Call  JumpToGoal    ( .Actor:Self 00000005 .False .True .False )
            Call  EnableActorBlur       ( .Actor:Self 00000000 )
            Call  YieldTurn ( )
            Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
            ExecWait  $Script_8022EB84
        EndCaseGroup
    EndSwitch
    Call  EnableActorBlur   ( .Actor:Self 00000000 )
    Call  EnableIdleScript  ( .Actor:Self 00000001 )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:Script $Script_802301F0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_802302C0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] 00000000 )
        Call  SetTexPanOffset   ( *Var[A] 00000001 *Var[1] 00000000 )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_802303AC
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 00000000 *Var[0] )
        Call  SetTexPanOffset   ( *Var[A] 00000001 00000000 *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

#new:Script $Script_80230498
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80230968
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt01:o351 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_80218B80    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_80230498
    Goto  0
    Return
    End
}

#new:Script $Script_80230B30
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80230968
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt01:o351 .False )
    Return
    End
}

#new:Unknown $???_80230CEC
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80230D10
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  0000000D
    Set   *Var[1]  00000000
    Set   *Var[2]  00000000
    Set   *Var[3]  FFFFFE0C
    Exec  $Script_802301F0
    Set   *Var[0]  $???_80230CEC
    Exec  $Script_80230B30
    Return
    End
}

#new:Script $Script_AfterBattle_80230DB4
{
    Return
    End
}

#new:Stage $Stage_80230DC4
{
    $ASCII_80234310  % tik_tex
    $ASCII_80234300  % tik_bt01_shape
    $ASCII_802342F0  % tik_bt01_hit
    $Script_BeforeBattle_80230D10
    $Script_AfterBattle_80230DB4
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 80230DEC to 80230DF0 (0060527C to 00605280)
00000000

#new:Script $Script_80230DF0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80230EC0
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 *Var[0] 00000000 )
        Call  SetTexPanOffset   ( *Var[A] 00000001 *Var[1] 00000000 )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80230FAC
{
    Set   *Var[A]  *Var[1]
    Set   *Var[B]  *Var[2]
    Set   *Var[C]  *Var[3]
    Call  SetTexPanner  ( *Var[0] *Var[1] )
    Set   *Var[0]  00000000
    Set   *Var[1]  00000000
    Loop
        Call  SetTexPanOffset   ( *Var[A] 00000000 00000000 *Var[0] )
        Call  SetTexPanOffset   ( *Var[A] 00000001 00000000 *Var[1] )
        Add   *Var[0]  *Var[B]
        Add   *Var[1]  *Var[C]
        Wait  1`
    EndLoop
    Return
    End
}

#new:Script $Script_80231098
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80231568
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt02:o354 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_80219020    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_80231098
    Goto  0
    Return
    End
}

#new:Script $Script_80231730
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80231568
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt02:o354 .False )
    Return
    End
}

#new:Unknown $???_802318EC
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80231910
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  $???_802318EC
    Exec  $Script_80231730
    Set   *Var[0]  0000000E
    Set   *Var[1]  00000000
    Set   *Var[2]  00000000
    Set   *Var[3]  FFFFFE0C
    Exec  $Script_80230DF0
    Return
    End
}

#new:Script $Script_AfterBattle_802319B4
{
    Return
    End
}

#new:Stage $Stage_802319C4
{
    $ASCII_80234338  % tik_tex
    $ASCII_80234328  % tik_bt02_shape
    $ASCII_80234318  % tik_bt02_hit
    $Script_BeforeBattle_80231910
    $Script_AfterBattle_802319B4
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 802319EC to 802319F0 (00605E7C to 00605E80)
00000000

#new:Script $Script_802319F0
{
    Set   *Var[1]  *Array[5]
    Add   *Var[1]  00000001
    Set   *Var[2]  *Array[0]
    Set   *Var[3]  *Array[1]
    Set   *Var[4]  *Array[5]
    Add   *Var[4]  00000002
    Set   *Var[5]  *Array[0]
    Set   *Var[6]  *Array[1]
    Set   *Var[7]  *Array[5]
    Add   *Var[7]  00000003
    Set   *Var[8]  *Array[0]
    Set   *Var[9]  *Array[1]
    Set   *Var[A]  *Array[5]
    Add   *Var[A]  00000004
    Set   *Var[B]  *Array[0]
    Set   *Var[C]  *Array[1]
    Call  EnableModel   ( *Var[1] .True )
    Call  EnableModel   ( *Var[4] .True )
    Call  EnableModel   ( *Var[7] .True )
    Call  EnableModel   ( *Var[A] .True )
    Loop  00000005
        Add   *Var[0]  00000001
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Loop  00000005
        Add   *Var[0]  FFFFFFFF
        Add   *Var[2]  00000001
        Add   *Var[3]  00000001
        Call  TranslateModel    ( *Var[1] *Var[2] *Var[0] *Var[3] )
        Call  ScaleModel        ( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[5]  FFFFFFFF
        Add   *Var[6]  00000001
        Call  TranslateModel    ( *Var[4] *Var[5] *Var[0] *Var[6] )
        Call  ScaleModel        ( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[8]  00000001
        Add   *Var[9]  FFFFFFFF
        Call  TranslateModel    ( *Var[7] *Var[8] *Var[0] *Var[9] )
        Call  ScaleModel        ( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Add   *Var[B]  FFFFFFFF
        Add   *Var[C]  FFFFFFFF
        Call  TranslateModel    ( *Var[A] *Var[B] *Var[0] *Var[C] )
        Call  ScaleModel        ( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
        Wait  1`
    EndLoop
    Call  EnableModel   ( *Var[1] .False )
    Call  EnableModel   ( *Var[4] .False )
    Call  EnableModel   ( *Var[7] .False )
    Call  EnableModel   ( *Var[A] .False )
    Return
    End
}

#new:Script $Script_80231EC0
{
    SetGroup  00000000
    UseArray  *Var[A]
    Set   *Var[5]  *Array[5]
    Loop  00000005
        Call  CloneModel        ( ~Model:tik_bt03:o371 *Var[5] )
        Call  TranslateModel    ( *Var[5] *Array[0] *Array[2] *Array[1] )
        Add   *Var[5]  00000001
    EndLoop
    Label  0
    Call  RandInt   ( 000000C8 *Var[0] )
    Add   *Var[0]  00000032
    Wait  *Var[0]
    Call  EnableModel       ( *Array[5] .True )
    Call  MakeLerp  ( *Array[2] *Array[3] *Array[4] .Easing:QuadraticIn )
    Label  1
    Call  UpdateLerp ( )
    Call  TranslateModel    ( *Array[5] *Array[0] *Var[0] *Array[1] )
    Wait  1`
    Call  $Function_802194C0    ( *Array[5] )
    If  *Var[2]  ==  00000001
        Goto  A
    EndIf
    If  *Var[1]  ==  00000001
        Goto  1
    EndIf
    Label  A
    Call  EnableModel   ( *Array[5] .False )
    ExecWait  $Script_802319F0
    Goto  0
    Return
    End
}

#new:Script $Script_80232088
{
    Set   *Var[F]  00002710
    UseIntBuffer  *Var[0]
    Get1Int  *Var[1]
    Loop  *Var[1]
        Get4Int  *Var[2] *Var[3] *Var[4] *Var[5]
        Get3Int  *Var[6] *Var[7] *Var[8]
        Get1Int  *Var[9]
        Loop  *Var[9]
            NewArray  00000006 *Var[A]
            UseArray  *Var[A]
            Call  RandInt   ( *Var[4] *Var[B] )
            Call  RandInt   ( *Var[5] *Var[C] )
            Set   *Var[D]  *Var[2]
            Set   *Var[E]  *Var[3]
            Add   *Var[D]  *Var[B]
            Add   *Var[E]  *Var[C]
            Set   *Array[0]  *Var[D]
            Set   *Array[1]  *Var[E]
            Set   *Array[2]  *Var[6]
            Set   *Array[3]  *Var[7]
            Set   *Array[4]  *Var[8]
            Set   *Array[5]  *Var[F]
            ChildThread
                Exec  $Script_80231EC0
            EndChildThread
            Add   *Var[F]  00000005
        EndLoop
    EndLoop
    Call  EnableModel   ( ~Model:tik_bt03:o371 .False )
    Return
    End
}

#new:Unknown $???_80232244
{
    00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C
    00000004
}

#new:Script $Script_BeforeBattle_80232268
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Set   *Var[0]  $???_80232244
    Exec  $Script_80232088
    Return
    End
}

#new:Script $Script_AfterBattle_802322C0
{
    Return
    End
}

#new:Stage $Stage_802322D0
{
    $ASCII_80234360  % tik_tex
    $ASCII_80234350  % tik_bt03_shape
    $ASCII_80234340  % tik_bt03_hit
    $Script_BeforeBattle_80232268
    $Script_AfterBattle_802322C0
    00000000
    00000000
    00000000
    00000000
    00000000
}

PADDING: 802322F8 to 80232300 (00606788 to 00606790)
00000000 00000000

% Origin: HEURISTIC
#new:Script $Script_80232300
{
    Set   *Var[A]  *Var[0]
    Label  0
    Call  $Function_80219960    ( 00000000 )
    Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  1`
    Loop
        Call  $Function_80219960    ( 00000001 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000001
            BreakLoop
        EndIf
    EndLoop
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
    Wait  5`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
    Wait  2`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
    Wait  3`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  5`
    Loop
        Call  $Function_80219960    ( 00000002 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000002
            BreakLoop
        EndIf
    EndLoop
    Call  RandInt   ( 00000050 *Var[B] )
    Add   *Var[B]  0000001E
    Loop  *Var[B]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
    EndLoop
    Call  RandInt   ( 00000005 *Var[0] )
    If  *Var[0]  !=  00000000
        Goto  0
    EndIf
    Call  $Function_80219960    ( 00000003 )
    Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  1`
    Loop
        Call  $Function_80219960    ( 00000001 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000001
            BreakLoop
        EndIf
    EndLoop
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
    Wait  5`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
    Wait  2`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
    Wait  3`
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
    Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
    Wait  5`
    Loop
        Call  $Function_80219960    ( 00000002 )
        Call  TranslateModel        ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel   ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
        If  *Var[B]  ==  00000002
            BreakLoop
        EndIf
    EndLoop
    Call  RandInt   ( 00000050 *Var[B] )
    Add   *Var[B]  0000001E
    Loop  *Var[B]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] *Var[2] )
        Call  RotateModel       ( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
        Wait  1`
    EndLoop
    Goto  0
    Return
    End
}

#new:Script $Script_80232990
{
    Set   *Var[A]  *Var[0]
    Loop
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000003 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000002 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000001 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] FFFFFFFF 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
    EndLoop
    Return
    End
}

#new:IntTable $IntTable_80232D34
{
    00000000 FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFE FFFFFFFD FFFFFFFB FFFFFFF8
    FFFFFFF8 FFFFFFF9 FFFFFFFA FFFFFFFC FFFFFFFE FFFFFFFF 00000000 000000FF
}

#new:Script $Script_80232D74
{
    Set   *Var[A]  *Var[0]
    Set   *Var[B]  *Var[1]
    Set   *Var[5]  00000005
    UseIntBuffer  $IntTable_80232D34
    Label  0
    Get1Int  *Var[1]
    If  *Var[1]  ==  000000FF
        UseIntBuffer  $IntTable_80232D34
        Get1Int  *Var[1]
    EndIf
    Set   *Var[0]  *Var[5]
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
    Wait  1`
    Add   *Var[5]  00000001
    Set   *Var[C]  *Var[B]
    Sub   *Var[C]  00000014
    If  *Var[5]  >  *Var[C]
        Goto  1
    EndIf
    Set   *Var[0]  *Var[5]
    Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
    Wait  1`
    Add   *Var[5]  00000001
    Set   *Var[C]  *Var[B]
    Sub   *Var[C]  00000014
    If  *Var[5]  >  *Var[C]
        Goto  1
    EndIf
    Goto  0
    Label  1
    Set   *Var[2]  00000000
    Loop  00000014
        Add   *Var[5]  00000001
        Sub   *Var[1]  00000002
        Set   *Var[0]  *Var[5]
        Call  TranslateModel    ( *Var[A] *Var[0] *Var[1] 00000000 )
        Wait  1`
    EndLoop
    Sub   *Var[5]  00000118
    Set   *Var[1]  00000000
    Goto  0
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80232FE0
{
    Set   *Var[A]  *Var[0]
    Loop
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFD 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFE 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 FFFFFFFF 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000001 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
        Call  TranslateModel    ( *Var[A] 00000000 00000000 00000000 )
        Wait  2`
    EndLoop
    Return
    End
}

#new:Script $Script_BeforeBattle_80233384
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Thread
        Set   *Var[0]  0000000F
        Exec  $Script_80232990
        Wait  5`
        Set   *Var[0]  00000010
        Exec  $Script_80232990
        Wait  5`
        Set   *Var[0]  00000011
        Exec  $Script_80232990
    EndThread
    Thread
        Wait  5`
        Set   *Var[0]  00000009
        Set   *Var[1]  00000091
        Exec  $Script_80232D74
        Set   *Var[0]  0000000A
        Set   *Var[1]  00000091
        Exec  $Script_80232D74
    EndThread
    Set   *Var[0]  0000000C
    Set   *Var[1]  0000003C
    Exec  $Script_80232D74
    Set   *Var[0]  0000000D
    Set   *Var[1]  0000003C
    Exec  $Script_80232D74
    Return
    End
}

#new:Script $Script_AfterBattle_80233508
{
    Return
    End
}

#new:Stage $Stage_80233518
{
    $ASCII_80234388  % tik_tex
    $ASCII_80234378  % tik_bt04_shape
    $ASCII_80234368  % tik_bt04_hit
    $Script_BeforeBattle_80233384
    $Script_AfterBattle_80233508
    00000000
    00000000
    00000000
    00000000
    00000000
}

#new:Script $Script_80233540
{
    SetGroup  00000000
    If  *Var[5]  ==  00000001
        If  *Var[6]  ==  00000001
            If  *Var[7]  ==  00000001
                If  *Var[8]  ==  00000001
                    Call  $Function_80219DB0 ( )
                    Return
                EndIf
            EndIf
        EndIf
    EndIf
    Call  $Function_80219ED4 ( )
    Return
    End
}

#new:Script $Script_BeforeBattle_802335DC
{
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamBGColor     ( .Cam:Battle 00000000 00000000 00000000 )
    Call  SetTexPanner      ( ~Model:tik_bt05:taki1 00000001 )
    Call  EnableTexPanning  ( ~Model:tik_bt05:taki1 .True )
    Thread
        Set   *Var[0]  00000001
        Set   *Var[1]  00000000
        Set   *Var[2]  FFFFF574
        Set   *Var[3]  00000000
        Set   *Var[4]  FFFFF448
        Set   *Var[5]  00000001
        Set   *Var[6]  00000001
        Set   *Var[7]  00000001
        Set   *Var[8]  00000001
        Set   *Var[9]  00000000
        Set   *Var[A]  00000000
        Set   *Var[B]  00000000
        Set   *Var[C]  00000000
        Exec  $Script_80233540
    EndThread
    Call  SetTexPanner      ( ~Model:tik_bt05:taki2 00000002 )
    Call  EnableTexPanning  ( ~Model:tik_bt05:taki2 .True )
    Thread
        Set   *Var[0]  00000002
        Set   *Var[1]  00000032
        Set   *Var[2]  FFFFFF38
        Set   *Var[3]  0000006E
        Set   *Var[4]  FFFFFE0C
        Set   *Var[5]  00000001
        Set   *Var[6]  00000001
        Set   *Var[7]  00000001
        Set   *Var[8]  00000001
        Set   *Var[9]  00000000
        Set   *Var[A]  00000000
        Set   *Var[B]  00000000
        Set   *Var[C]  00000000
        Exec  $Script_80233540
    EndThread
    Return
    End
}

#new:Script $Script_AfterBattle_80233840
{
    Return
    End
}

#new:ForegroundModelList $ForegroundModelList_80233850
{
    ~Model:tik_bt05:taki1
    00000000
}

#new:Stage $Stage_80233858
{
    $ASCII_802343B0  % tik_tex
    $ASCII_802343A0  % tik_bt05_shape
    $ASCII_80234390  % tik_bt05_hit
    $Script_BeforeBattle_802335DC
    $Script_AfterBattle_80233840
    00000000
    $ForegroundModelList_80233850
    00000000
    00000000
    00000000
}

#new:Formation $Formation_00
{
    $DarkKoopa 00000001 0000000A 00000000 00000000 00000000 00000000
    $DarkKoopa 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_01
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $DarkKoopa 00000001 00000009 00000000 00000000 00000000 00000000
    $DarkKoopa 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_02
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $DarkKoopa 00000001 00000009 00000000 00000000 00000000 00000000
    $DarkKoopa 00000002 00000008 00000000 00000000 00000000 00000000
    $DarkKoopa 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_03
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $DarkParatroopa 00000005 00000009 00000000 00000000 00000000 00000000
    $DarkParatroopa 00000006 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_04
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000
    $SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_05
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000
    $DarkKoopa 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_06
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $Spiny 00000001 00000009 00000000 00000000 00000000 00000000
    $Spiny 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_07
{
    $DarkKoopa 00000000 0000000A 00000000 00000000 00000000 00000000
    $Spiny 00000001 00000009 00000000 00000000 00000000 00000000
    $DarkKoopa 00000002 00000008 00000000 00000000 00000000 00000000
    $Spiny 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_08
{
    $DarkParatroopa 00000005 0000000A 00000000 00000000 00000000 00000000
    $DarkParatroopa 00000006 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_09
{
    $DarkParatroopa 00000004 0000000A 00000000 00000000 00000000 00000000
    $DarkParatroopa 00000005 00000009 00000000 00000000 00000000 00000000
    $DarkParatroopa 00000006 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0A
{
    $Gloomba 00000001 0000000A 00000000 00000000 00000000 00000000
    $Gloomba 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0B
{
    $Gloomba 00000000 0000000A 00000000 00000000 00000000 00000000
    $Gloomba 00000001 00000009 00000000 00000000 00000000 00000000
    $Gloomba 00000002 00000008 00000000 00000000 00000000 00000000
    $Gloomba 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0C
{
    $Paragloomba 00000004 0000000A 00000000 00000000 00000000 00000000
    $Paragloomba 00000005 00000009 00000000 00000000 00000000 00000000
    $Paragloomba 00000006 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0D
{
    $Paragloomba 00000005 0000000A 00000000 00000000 00000000 00000000
    $SpikedGloomba 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0E
{
    $SpikedGloomba 00000001 0000000A 00000000 00000000 00000000 00000000
    $SpikedGloomba 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_0F
{
    $SpikedGloomba 00000000 0000000A 00000000 00000000 00000000 00000000
    $Gloomba 00000001 00000009 00000000 00000000 00000000 00000000
    $Gloomba 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_10
{
    $SpikedGloomba 00000000 0000000A 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000001 00000009 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_11
{
    $SpikedGloomba 00000000 0000000A 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000001 00000009 00000000 00000000 00000000 00000000
    $SpikedGloomba 00000002 00000008 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_12
{
    $SpikedGloomba 00000000 0000000A 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000001 00000009 00000000 00000000 00000000 00000000
    $Paragloomba 00000006 00000008 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_13
{
    $SpikeTop 00000000 0000000A 00000000 00000000 00000000 00000000
    $SpikeTop 00000001 00000009 00000000 00000000 00000000 00000000
    $SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000
    $SpikeTop 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_14
{
    $SpikeTop 00000001 0000000A 00000000 00000000 00000000 00000000
    $SpikeTop 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_15
{
    $BuzzyBeetle 00000000 0000000A 00000000 00000000 00000000 00000000
    $SpikedGloomba 00000001 00000009 00000000 00000000 00000000 00000000
    $BuzzyBeetle 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_16
{
    $Spiny 00000001 0000000A 00000000 00000000 00000000 00000000
    $Spiny 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_17
{
    $Spiny 00000000 0000000A 00000000 00000000 00000000 00000000
    $Spiny 00000001 00000009 00000000 00000000 00000000 00000000
    $Spiny 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_18
{
    $Spiny 00000000 0000000A 00000000 00000000 00000000 00000000
    $Spiny 00000001 00000009 00000000 00000000 00000000 00000000
    $Spiny 00000002 00000008 00000000 00000000 00000000 00000000
    $Spiny 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:FormationTable $FormationTable
{
    $SJIS_802345E8 00000002 $Formation_00 $Stage_80230DC4 00000000
    $SJIS_802345D8 00000003 $Formation_01 $Stage_80230DC4 00000000
    $SJIS_802345C8 00000004 $Formation_02 $Stage_80230DC4 00000000
    $SJIS_802345A8 00000003 $Formation_03 $Stage_80230DC4 00000000 % unused
    $SJIS_8023458C 00000003 $Formation_04 $Stage_80230DC4 00000000
    $SJIS_80234564 00000003 $Formation_05 $Stage_80230DC4 00000000
    $SJIS_80234548 00000003 $Formation_06 $Stage_80230DC4 00000000
    $SJIS_8023451C 00000004 $Formation_07 $Stage_80230DC4 00000000
    $SJIS_8023450C 00000002 $Formation_08 $Stage_80230DC4 00000000 % unused
    $SJIS_802344FC 00000003 $Formation_09 $Stage_80230DC4 00000000 % unused
    $SJIS_802344EC 00000002 $Formation_0A $Stage_80230DC4 00000000
    $SJIS_802344DC 00000004 $Formation_0B $Stage_80230DC4 00000000 % unused
    $SJIS_802344CC 00000003 $Formation_0C $Stage_80230DC4 00000000
    $SJIS_802344B0 00000002 $Formation_0D $Stage_80230DC4 00000000
    $SJIS_802344A0 00000002 $Formation_0E $Stage_80230DC4 00000000
    $SJIS_80234480 00000003 $Formation_0F $Stage_80230DC4 00000000
    $SJIS_80234468 00000003 $Formation_10 $Stage_80230DC4 00000000
    $SJIS_80234440 00000004 $Formation_11 $Stage_80230DC4 00000000 % unused
    $SJIS_80234418 00000004 $Formation_12 $Stage_80230DC4 00000000
    $SJIS_80234408 00000004 $Formation_13 $Stage_80230DC4 00000000 % unused
    $SJIS_802343F8 00000002 $Formation_14 $Stage_80230DC4 00000000 % unused
    $SJIS_802343DC 00000003 $Formation_15 $Stage_80230DC4 00000000
    $SJIS_802343D0 00000002 $Formation_16 $Stage_80230DC4 00000000
    $SJIS_802343C4 00000003 $Formation_17 $Stage_80230DC4 00000000
    $SJIS_802343B8 00000004 $Formation_18 $Stage_80230DC4 00000000 % unused
    00000000 00000000 00000000 00000000 00000000 % unused
}

#new:StageTable $StageTable
{
    $ASCII_80234618 $Stage_80230DC4
    $ASCII_80234610 $Stage_802319C4
    $ASCII_80234608 $Stage_802322D0
    $ASCII_80234600 $Stage_80233518
    $ASCII_802345F8 $Stage_80233858
    00000000 00000000
}

PADDING: 802342EC to 802342F0 (0060877C to 00608780)
00000000

#new:ASCII $ASCII_802342F0
{
    "tik_bt01_hit"
}

#new:ASCII $ASCII_80234300
{
    "tik_bt01_shape"
}

#new:ASCII $ASCII_80234310
{
    "tik_tex"
}

#new:ASCII $ASCII_80234318
{
    "tik_bt02_hit"
}

#new:ASCII $ASCII_80234328
{
    "tik_bt02_shape"
}

#new:ASCII $ASCII_80234338
{
    "tik_tex"
}

#new:ASCII $ASCII_80234340
{
    "tik_bt03_hit"
}

#new:ASCII $ASCII_80234350
{
    "tik_bt03_shape"
}

#new:ASCII $ASCII_80234360
{
    "tik_tex"
}

#new:ASCII $ASCII_80234368
{
    "tik_bt04_hit"
}

#new:ASCII $ASCII_80234378
{
    "tik_bt04_shape"
}

#new:ASCII $ASCII_80234388
{
    "tik_tex"
}

#new:ASCII $ASCII_80234390
{
    "tik_bt05_hit"
}

#new:ASCII $ASCII_802343A0
{
    "tik_bt05_shape"
}

#new:ASCII $ASCII_802343B0
{
    "tik_tex"
}

#new:SJIS $SJIS_802343B8
{
    トゲゾーx４ % togezo-x4
}

#new:SJIS $SJIS_802343C4
{
    トゲゾーx３ % togezo-x3
}

#new:SJIS $SJIS_802343D0
{
    トゲゾーx２ % togezo-x2
}

#new:SJIS $SJIS_802343DC
{
    メット,ヤミトゲクリ,メット % metto,yamitogekuri,metto
}

#new:SJIS $SJIS_802343F8
{
    トゲメットx２ % togemettox2
}

#new:SJIS $SJIS_80234408
{
    トゲメットx４ % togemettox4
}

#new:SJIS $SJIS_80234418
{
    ヤミトゲクリ,メット,ヤミパタクリ,メット % yamitogekuri,metto,yamipatakuri,metto
}

#new:SJIS $SJIS_80234440
{
    ヤミトゲクリ,メット,ヤミトゲクリ,メット % yamitogekuri,metto,yamitogekuri,metto
}

#new:SJIS $SJIS_80234468
{
    ヤミトゲクリ,メットx２ % yamitogekuri,mettox2
}

#new:SJIS $SJIS_80234480
{
    ヤミトゲクリ,ヤミクリボーx２ % yamitogekuri,yamikuribo-x2
}

#new:SJIS $SJIS_802344A0
{
    ヤミトゲクリx２ % yamitogekurix2
}

#new:SJIS $SJIS_802344B0
{
    ヤミパタクリ,ヤミトゲクリ % yamipatakuri,yamitogekuri
}

#new:SJIS $SJIS_802344CC
{
    ヤミパタクリx３ % yamipatakurix3
}

#new:SJIS $SJIS_802344DC
{
    ヤミクリボーx４ % yamikuribo-x4
}

#new:SJIS $SJIS_802344EC
{
    ヤミクリボーx２ % yamikuribo-x2
}

#new:SJIS $SJIS_802344FC
{
    ヤミパタパタx３ % yamipatapatax3
}

#new:SJIS $SJIS_8023450C
{
    ヤミパタパタx２ % yamipatapatax2
}

#new:SJIS $SJIS_8023451C
{
    ヤミノコノコ,トゲゾー,ヤミノコノコ,トゲゾー % yaminokonoko,togezo-,yaminokonoko,togezo-
}

#new:SJIS $SJIS_80234548
{
    ヤミノコノコ,トゲゾーx２ % yaminokonoko,togezo-x2
}

#new:SJIS $SJIS_80234564
{
    ヤミノコノコ,トゲメット,ヤミノコノコ % yaminokonoko,togemetto,yaminokonoko
}

#new:SJIS $SJIS_8023458C
{
    ヤミノコノコ,トゲメットx２ % yaminokonoko,togemettox2
}

#new:SJIS $SJIS_802345A8
{
    ヤミノコノコ,ヤミパタパタx２ % yaminokonoko,yamipatapatax2
}

#new:SJIS $SJIS_802345C8
{
    ヤミノコノコx４ % yaminokonokox4
}

#new:SJIS $SJIS_802345D8
{
    ヤミノコノコx３ % yaminokonokox3
}

#new:SJIS $SJIS_802345E8
{
    ヤミノコノコx２ % yaminokonokox2
}

#new:ASCII $ASCII_802345F8
{
    "tik_05"
}

#new:ASCII $ASCII_80234600
{
    "tik_04"
}

#new:ASCII $ASCII_80234608
{
    "tik_03"
}

#new:ASCII $ASCII_80234610
{
    "tik_02"
}

#new:ASCII $ASCII_80234618
{
    "tik_01"
}

