% Script File: omo_16.mscr
% Decoded from: 0 to 2FD0 (omo_16)

MISSING: 80240000 to 8024001C (00000000 to 0000001C)
3C03800B 24631D80 94620002 3042FFFE A4620002 03E00008 24020002

#new:Function $Function_8024001C
{
	ADDIU     SP, SP, FFC8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	SDC1      F24, 30 (SP)
	SDC1      F22, 28 (SP)
	SDC1      F20, 20 (SP)
	LW        S0, C (S1)
	LW        S2, 0 (S0)
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F24, F0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F22, F0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	MOV.S     F20, F0
	MOV.S     F12, F24
	MFC1      A2, F20
	MFC1      A3, F0
	JAL       ~Func:atan2
	MOV.S     F14, F22
	JAL       ~Func:clamp_angle
	MOV.S     F12, F0
	COPY      A0, S1
	MFC1      A2, F0
	JAL       ~Func:set_float_variable
	COPY      A1, S2
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F24, 30 (SP)
	LDC1      F22, 28 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 38
}

#new:Function $Function_802400E4
{
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	SDC1      F20, 20 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F20, F0
	C.LT.S    F0, F20
	NOP
	BC1F      .o58
	COPY      A0, S1
	LW        A1, 0 (S0)
	BEQ       R0, R0, .o60
	ADDIU     A2, R0, 1
	.o58
	LW        A1, 0 (S0)
	CLEAR     A2
	.o60
	JAL       ~Func:set_variable
	NOP
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

#new:Function $Function_80240168
{
	ADDIU     SP, SP, FFE0
	SW        S2, 18 (SP)
	COPY      S2, A0
	SW        RA, 1C (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S2)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S2
	JAL       ~Func:get_variable
	COPY      S1, V0
	COPY      A0, S2
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	COPY      S0, V0
	MULT      S0, V0
	ADDIU     V0, R0, 2
	LW        V1, 138 (S2)
	MFLO      A2
	ADDU      S1, S1, A2
	SLLV      S1, S1, V0
	ADDU      V1, V1, S1
	SW        V1, 138 (S2)
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_802401EC
{
	ADDIU     SP, SP, FFC8
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 18 (SP)
	SW        S0, 10 (SP)
	SDC1      F24, 30 (SP)
	SDC1      F22, 28 (SP)
	SDC1      F20, 20 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F24, F0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F22, F0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	MOV.S     F20, F0
	LIA       V0, 8010EFC8
	SWC1      F24, 28 (V0)
	SWC1      F22, 2C (V0)
	SWC1      F20, 30 (V0)
	SWC1      F0, 80 (V0)
	LW        RA, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F24, 30 (SP)
	LDC1      F22, 28 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 38
}

#new:Function $Function_80240290
{
	ADDIU     SP, SP, FFC0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 38 (SP)
	SDC1      F24, 30 (SP)
	SDC1      F22, 28 (SP)
	SDC1      F20, 20 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       ~Func:get_variable
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	COPY      S2, V0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F26, F0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S1
	JAL       ~Func:get_float_variable
	MOV.S     F24, F0
	COPY      A0, S1
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	MOV.S     F20, F0
	COPY      A0, S2
	JAL       ~Func:get_npc_safe
	MOV.S     F22, F0
	COPY      A0, V0
	SWC1      F26, 38 (A0)
	MOV.S     F0, F26
	SWC1      F24, 3C (A0)
	MOV.S     F2, F24
	SWC1      F20, 40 (A0)
	MOV.S     F4, F20
	LW        V1, 0 (A0)
	LUI       A1, 1
	SWC1      F22, C (A0)
	SWC1      F0, 6C (A0)
	SWC1      F2, 70 (A0)
	SWC1      F4, 74 (A0)
	OR        V1, V1, A1
	SW        V1, 0 (A0)
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 38 (SP)
	LDC1      F24, 30 (SP)
	LDC1      F22, 28 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 40
}

#new:Function $Function_80240388
{
	ADDIU     SP, SP, FFB8
	SW        S2, 18 (SP)
	COPY      S2, A0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S4, 20 (SP)
	SW        S3, 1C (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        S0, C (S2)
	LW        S4, 0 (S0)
	ADDIU     S0, S0, 4
	JAL       ~Func:get_variable
	COPY      A1, S4
	COPY      S3, V0
	LW        S5, 0 (S0)
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	JAL       ~Func:get_float_variable
	COPY      A0, S2
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S2
	JAL       ~Func:get_float_variable
	MOV.S     F24, F0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S2
	JAL       ~Func:get_variable
	MOV.S     F20, F0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	COPY      A0, S2
	JAL       ~Func:get_variable
	COPY      S1, V0
	COPY      A0, S2
	LW        A1, 0 (S0)
	JAL       ~Func:get_float_variable
	COPY      S0, V0
	LIF       F2, 180.0
	LIO       AT, 40490FD8
	MTC1      AT, F4
	DIV.S     F0, F0, F2
	MUL.S     F22, F0, F4
	NOP
	SUB.S     F20, F20, F24
	LIF       F0, 0.5
	NOP
	MUL.S     F20, F20, F0
	NOP
	BEQ       S0, R0, .o104
	SLT       V0, S1, S3
	BEQ       V0, R0, .o104
	COPY      A0, S2
	COPY      S3, S1
	COPY      A1, S4
	JAL       ~Func:set_variable
	COPY      A2, S1
	.o104
	LIO       AT, 40490FD8
	MTC1      AT, F0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F0
	NOP
	MTC1      S1, F0
	NOP
	CVT.S.W   F0, F0
	DIV.S     F12, F12, F0
	JAL       ~Func:cos_rad
	ADD.S     F12, F12, F22
	MUL.S     F0, F20, F0
	NOP
	ADD.S     F2, F24, F20
	SUB.S     F2, F2, F0
	COPY      A0, S2
	MFC1      A2, F2
	JAL       ~Func:set_float_variable
	COPY      A1, S5
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 48
}

% Origin: HEURISTIC
#new:Function $Function_80240518
{
	LIA       V1, 8007419C
	LW        V0, 0 (V1)
	SW        R0, 84 (A0)
	LW        V0, 10 (V0)
	ANDI      V0, V0, 8000
	BEQ       V0, R0, .o24
	ADDIU     V0, R0, 1
	SW        V0, 84 (A0)
	.o24
	LW        V0, 0 (V1)
	LW        V0, 10 (V0)
	ANDI      V0, V0, 4000
	BEQ       V0, R0, .o3C
	ADDIU     V0, R0, 1
	SW        V0, 84 (A0)
	.o3C
	JR        RA
	ADDIU     V0, R0, 2
}

#new:Function $Function_8024055C
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	LUI       A1, FD05
	SW        RA, 14 (SP)
	JAL       ~Func:get_float_variable
	ORI       A1, A1, F8B
	MOV.S     F4, F0
	LIF       F2, 2000.0
	ABS.S     F0, F4
	C.LT.S    F0, F2
	NOP
	BC1F      .o6C
	SW        R0, 84 (S0)
	LAW       V0, 8007419C
	LW        V0, 10 (V0)
	ANDI      V0, V0, 8000
	BEQ       V0, R0, .o6C
	ADDIU     V0, R0, 1
	SW        V0, 84 (S0)
	LIF       F2, 2000.0
	ABS.S     F0, F4
	C.LT.S    F0, F2
	NOP
	.o6C
	BC1F      .o90
	NOP
	LAW       V0, 8007419C
	LW        V0, 10 (V0)
	ANDI      V0, V0, 4000
	BEQ       V0, R0, .o90
	ADDIU     V0, R0, 1
	SW        V0, 84 (S0)
	.o90
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 18
}

#new:EntryList $EntryList
{
    ~Vec4f:Entry0 % -1460.0   50.0    0.0   90.0
    ~Vec4f:Entry1 % 1460.0   50.0    0.0  270.0
}

#new:Header $Header
{
    [MainScript]  $Script_Main
    [EntryList]   $EntryList
    [EntryCount]  00000002
    [Background]  80200000
    [MapTattle]   00000000
}

#new:Script_Main $Script_Main
{
    Set   *WorldMapLocation  .Location:ShyGuysToybox
    Call  SetSpriteShading  ( FFFFFFFF )
    Call  SetCamPerspective ( .Cam:Default 00000003 00000019 00000010 00001000 )
    Call  SetCamBGColor ( .Cam:Default 00000000 00000000 00000000 )
    Call  SetCamEnabled ( .Cam:Default .True )
    Call  MakeNpcs      ( 00000001 $NpcGroupList_80242F8C )
    Call  SetMusicTrack ( 00000000 .Song:ToyboxTrain 00000000 00000008 )
    ExecWait  $Script_802429C4
    Wait  3`
    Return
    End
}

PADDING: 80240728 to 80240730 (00000728 to 00000730)
00000000 00000000

#new:Script $Script_80240730
{
    NewArray  00000014 *Var[0]
    UseArray  *Var[0]
    SetF  *Array[2]  *Fixed[0.0]
    SetF  *Array[3]  *Fixed[0.0]
    SetF  *Array[7]  *Fixed[0.0]
    SetF  *Array[8]  *Fixed[0.0]
    SetF  *Array[E]  *Fixed[0.0]
    SetF  *Array[F]  *Fixed[0.0]
    SetF  *Array[10]  *Fixed[0.0]
    Set   *AreaFlag[003]  .False
    Label  0
    Switch  *MapVar[0]
        Case  ==  00000000
            UseIntBuffer  *MapVar[1]
            Get3Int  *Var[0] *Var[1] *Var[2]
            SetF  *Array[0]  *Var[0]
            SetF  *Array[1]  *Var[1]
            Call  AddVectorPolar    ( *Array[0] *Array[1] *Fixed[40.0] *Var[2] )
            SetF  *Array[5]  *Var[0]
            SetF  *Array[6]  *Var[1]
            SetF  *Var[3]  *Var[2]
            AddF  *Var[3]  *Fixed[180.0]
            Call  AddVectorPolar    ( *Array[5] *Array[6] *Fixed[40.0] *Var[3] )
            SetF  *Array[B]  *Var[0]
            SetF  *Array[C]  *Var[1]
            SetF  *MapVar[B]  *Array[B]
            SetF  *MapVar[C]  *Array[C]
            SetF  *MapVar[D]  *Var[2]
            SetF  *Array[11]  *Fixed[0.0]
            Label  B
            Get2Int  *Var[2] *Var[3]
            If  *Var[2]  ==  FFFFFFFF
                Goto  C
            EndIf
            Call  GetDist2D ( *Var[4] *Var[0] *Var[1] *Var[2] *Var[3] )
            AddF  *Array[11]  *Var[4]
            SetF  *Var[0]  *Var[2]
            SetF  *Var[1]  *Var[3]
            Goto  B
            Label  C
            SubF  *Array[11]  *Fixed[40.0]
            SetF  *Array[A]  *Fixed[0.0]
            SetF  *Array[D]  *Fixed[0.0]
            Set   *Array[12]  00000000
            If  *MapFlag[00]  ==  .True
                Set   *MapVar[0]  00000001
            EndIf
        Case  ==  00000001
            UseIntBuffer  *MapVar[1]
            Call  $Function_80240168    ( 00000003 00000000 00000000 )
            Get2Int  *Var[0] *Var[1]
            If  *Var[0]  ==  FFFFFFFF
                Set   *MapVar[0]  00000064
                Set   *MapFlag[00]  .False
            Else
                SetF  *Array[2]  *Var[0]
                SetF  *Array[3]  *Var[1]
                Set   *Array[4]  00000001
                SetF  *Array[7]  *Var[0]
                SetF  *Array[8]  *Var[1]
                Set   *Array[9]  00000001
                Set   *MapVar[0]  0000000A
            EndIf
        Case  ==  0000000A
            Switch  *MapVar[2]
                Case  ==  00000000
                    SetF  *Array[A]  *Fixed[10.0]
                Case  ==  00000001
                    Call  $Function_80240388    ( *Array[12] *Array[A] *Fixed[0.0] *Fixed[10.0] 00000064 00000001 *Fixed[0.0] )
                    Add   *Array[12]  00000001
                Case  ==  00000002
                    Set   *Var[0]  *Array[D]
                    Set   *Var[1]  *Array[11]
                    Call  $Function_80240388    ( *Var[0] *Array[A] *Fixed[10.0] *Fixed[2.0] *Var[1] 00000000 *Fixed[0.0] )
                Case  ==  00000003
                    Set   *Var[0]  *Array[D]
                    Set   *Var[1]  *Array[11]
                    Div   *Var[1]  00000002
                    Call  $Function_80240388    ( *Var[0] *Array[A] *Fixed[1.0] *Fixed[10.0] *Var[1] 00000000 *Fixed[0.0] )
            EndSwitch
            Call  GetDist2D ( *Var[0] *Array[0] *Array[1] *Array[2] *Array[3] )
            Call  $Function_802400E4    ( *Var[0] *Array[A] *Var[2] )
            If  *Var[2]  ==  00000001
                Call  $Function_8024001C    ( *Var[0] *Array[0] *Array[1] *Array[2] *Array[3] )
                Call  AddVectorPolar        ( *Array[0] *Array[1] *Array[A] *Var[0] )
            Else
                SetF  *Var[1]  *Array[A]
                SubF  *Var[1]  *Var[0]
                SetF  *Array[0]  *Array[2]
                SetF  *Array[1]  *Array[3]
                UseIntBuffer  *MapVar[1]
                Call  $Function_80240168    ( 00000003 00000002 *Array[4] )
                Get2Int  *Array[2] *Array[3]
                Add   *Array[4]  00000001
                If  *Array[2]  ==  FFFFFFFF
                    Set   *MapVar[0]  00000064
                    Set   *MapFlag[00]  .False
                    Set   *Flag[01]  .True
                Else
                    Call  $Function_8024001C    ( *Var[0] *Array[0] *Array[1] *Array[2] *Array[3] )
                    Call  AddVectorPolar        ( *Array[0] *Array[1] *Var[1] *Var[0] )
                EndIf
            EndIf
            Call  GetDist2D ( *Var[0] *Array[5] *Array[6] *Array[7] *Array[8] )
            Call  $Function_802400E4    ( *Var[0] *Array[A] *Var[2] )
            If  *Var[2]  ==  00000001
                Call  $Function_8024001C    ( *Var[0] *Array[5] *Array[6] *Array[7] *Array[8] )
                Call  AddVectorPolar        ( *Array[5] *Array[6] *Array[A] *Var[0] )
            Else
                SetF  *Var[1]  *Array[A]
                SubF  *Var[1]  *Var[0]
                SetF  *Array[5]  *Array[7]
                SetF  *Array[6]  *Array[8]
                UseIntBuffer  *MapVar[1]
                Call  $Function_80240168    ( 00000003 00000002 *Array[9] )
                Get2Int  *Array[7] *Array[8]
                Add   *Array[9]  00000001
                If  *Array[7]  ==  FFFFFFFF
                    Set   *MapVar[0]  00000064
                    Set   *MapFlag[00]  .False
                    Set   *Flag[01]  .False
                Else
                    Call  $Function_8024001C    ( *Var[0] *Array[5] *Array[6] *Array[7] *Array[8] )
                    Call  AddVectorPolar        ( *Array[5] *Array[6] *Var[1] *Var[0] )
                EndIf
            EndIf
            If  *MapVar[0]  ==  00000064
                If  *Flag[01]  ==  .True
                    Call  $Function_8024001C    ( *Var[0] *Array[0] *Array[1] *Array[5] *Array[6] )
                    SetF  *Array[5]  *Array[0]
                    SetF  *Array[6]  *Array[1]
                    Call  AddVectorPolar        ( *Array[5] *Array[6] *Fixed[80.0] *Var[0] )
                Else
                    Call  $Function_8024001C    ( *Var[0] *Array[5] *Array[6] *Array[0] *Array[1] )
                    SetF  *Array[0]  *Array[5]
                    SetF  *Array[1]  *Array[6]
                    Call  AddVectorPolar        ( *Array[0] *Array[1] *Fixed[80.0] *Var[0] )
                EndIf
            EndIf
            SetF  *Var[0]  *Array[0]
            SetF  *Var[1]  *Array[1]
            AddF  *Var[0]  *Array[5]
            AddF  *Var[1]  *Array[6]
            DivF  *Var[0]  *Fixed[2.0]
            DivF  *Var[1]  *Fixed[2.0]
            Call  $Function_8024001C    ( *Var[2] *Array[5] *Array[6] *Array[0] *Array[1] )
            SetF  *MapVar[B]  *Var[0]
            SetF  *MapVar[C]  *Var[1]
            SetF  *MapVar[D]  *Var[2]
            Call  GetDist2D ( *Var[3] *Var[0] *Var[1] *Array[B] *Array[C] )
            AddF  *Array[D]  *Var[3]
            SetF  *Array[E]  *Array[D]
            MulF  *Array[E]  *Fixed[1.4326172]
            If  *Flag[00]  ==  .False
                SetF  *Var[0]  *Array[A]
                If  *Var[0]  <  00000001
                    SetF  *Var[0]  *Fixed[1.0]
                EndIf
                DivF  *Var[0]  *Fixed[3.0]
                SubF  *Array[F]  *Var[0]
                If  *Array[F]  <  FFFFFFF6
                    SetF  *Array[F]  *Fixed[-10.0]
                    Set   *Flag[00]  .True
                    If  *AreaFlag[003]  ==  .False
                        Call  PlaySound ( 000001FF )
                    Else
                        Call  PlaySound ( 00000084 )
                    EndIf
                EndIf
            Else
                SetF  *Var[0]  *Array[A]
                If  *Var[0]  <  00000001
                    SetF  *Var[0]  *Fixed[1.0]
                EndIf
                DivF  *Var[0]  *Fixed[3.0]
                AddF  *Array[F]  *Var[0]
                If  *Array[F]  >  0000000A
                    SetF  *Array[F]  *Fixed[10.0]
                    Set   *Flag[00]  .False
                    If  *AreaFlag[003]  ==  .False
                        Call  PlaySound ( 000001FE )
                        Set   *AreaFlag[003]  .True
                    Else
                        Call  PlaySound ( 000001FE )
                        Set   *AreaFlag[003]  .False
                    EndIf
                EndIf
            EndIf
            SetF  *Var[0]  *MapVar[B]
            SetF  *Var[1]  *MapVar[C]
            SetF  *Var[2]  *MapVar[D]
            Call  AddVectorPolar        ( *Var[0] *Var[1] *Fixed[15.0] *Var[2] )
            Call  $Function_802401EC    ( *Var[0] 00000032 *Var[1] *MapVar[D] )
            SetF  *Var[0]  *MapVar[B]
            SetF  *Var[1]  *MapVar[C]
            SetF  *Var[2]  *MapVar[D]
            AddF  *Var[2]  *Fixed[180.0]
            Call  AddVectorPolar        ( *Var[0] *Var[1] *Fixed[15.0] *Var[2] )
            Call  $Function_80240290    ( FFFFFFFC *Var[0] 00000032 *Var[1] *MapVar[D] )
            SetF  *Var[0]  *MapVar[B]
            SetF  *Var[1]  *MapVar[C]
            SetF  *Var[2]  *MapVar[D]
            If  *Var[2]  <  000000B4
                AddF  *Var[2]  *Fixed[90.0]
            Else
                SubF  *Var[2]  *Fixed[90.0]
            EndIf
            Call  AddVectorPolar        ( *Var[0] *Var[1] *Fixed[20.0] *Var[2] )
            Call  $Function_80240290    ( 00000000 *Var[0] 00000032 *Var[1] *MapVar[D] )
        Case  ==  00000064
    EndSwitch
    Call  TranslateGroup    ( ~Model:p2 *Fixed[79.1] *Fixed[-27.93] *Fixed[-29.53] )
    Call  TranslateGroup    ( ~Model:p3 *Fixed[-35.1] *Fixed[-27.93] *Fixed[-29.53] )
    Call  RotateGroup       ( ~Model:p2 *Fixed[-45.0] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
    Call  RotateGroup       ( ~Model:p3 *Fixed[45.0] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
    Call  TranslateGroup    ( ~Model:p5 *Fixed[40.5] *Fixed[-20.0] *Fixed[-0.4] )
    Call  TranslateGroup    ( ~Model:p6 *Fixed[-39.5] *Fixed[-20.0] *Fixed[-0.4] )
    Call  TranslateGroup    ( ~Model:popo *MapVar[B] *Fixed[10.0] *MapVar[C] )
    If  *MapVar[D]  <  000000B4
        SetF  *Var[1]  *MapVar[D]
        SubF  *Var[1]  *Fixed[90.0]
        Call  RotateGroup   ( ~Model:popo *Var[1] *Fixed[0.0] *Fixed[-1.0] *Fixed[0.0] )
    Else
        SetF  *Var[1]  *MapVar[D]
        SubF  *Var[1]  *Fixed[180.0]
        SubF  *Var[1]  *Fixed[90.0]
        Call  RotateGroup   ( ~Model:popo *Var[1] *Fixed[0.0] *Fixed[-1.0] *Fixed[0.0] )
    EndIf
    Call  RotateGroup       ( ~Model:p2 *Fixed[45.0] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
    Call  RotateGroup       ( ~Model:p3 *Fixed[-45.0] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
    Call  TranslateGroup    ( ~Model:p2 *Fixed[-79.1] *Fixed[27.93] *Fixed[29.53] )
    Call  TranslateGroup    ( ~Model:p3 *Fixed[35.1] *Fixed[27.93] *Fixed[29.53] )
    Call  TranslateGroup    ( ~Model:p5 *Fixed[-40.5] *Fixed[20.0] *Fixed[0.4] )
    Call  TranslateGroup    ( ~Model:p6 *Fixed[39.5] *Fixed[20.0] *Fixed[0.4] )
    If  *MapVar[D]  <  000000B4
        Call  RotateGroup   ( ~Model:p5 *Array[E] *Fixed[0.0] *Fixed[0.0] *Fixed[-1.0] )
        Call  RotateGroup   ( ~Model:p6 *Array[E] *Fixed[0.0] *Fixed[0.0] *Fixed[-1.0] )
    Else
        Call  RotateGroup   ( ~Model:p5 *Array[E] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
        Call  RotateGroup   ( ~Model:p6 *Array[E] *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
    EndIf
    Call  TranslateGroup    ( ~Model:p2 *Fixed[0.0] *Array[F] *Fixed[0.0] )
    SetF  *Var[0]  *Array[F]
    MulF  *Var[0]  *Fixed[-1.0]
    Call  TranslateGroup    ( ~Model:p3 *Fixed[0.0] *Var[0] *Fixed[0.0] )
    SetF  *Var[0]  *Array[A]
    If  *Var[0]  <  00000001
        SetF  *Var[0]  *Fixed[1.0]
    EndIf
    AddF  *Array[10]  *Var[0]
    If  *Array[10]  >  00000168
        SubF  *Array[10]  *Fixed[360.0]
    EndIf
    Call  RotateGroup   ( ~Model:p4 *Array[10] *Fixed[0.0] *Fixed[1.0] *Fixed[0.0] )
    SetF  *Array[B]  *MapVar[B]
    SetF  *Array[C]  *MapVar[C]
    Wait  1`
    Goto  0
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_802418F8
{
    Label  0
    Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
    Call  SetCamTarget  ( .Cam:Default *Var[0] 00000000 *Var[2] )
    Wait  1`
    Goto  0
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80241960
{
    Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
    Call  MakeLerp      ( 00000000 *Var[1] 0000002D .Easing:Linear )
    Loop
        Call  UpdateLerp ( )
        Call  GetPlayerPos  ( *Var[2] *Var[3] *Var[4] )
        Call  SetCamTarget  ( .Cam:Default *Var[2] *Var[0] *Var[4] )
        Wait  1`
        If  *Var[1]  ==  00000000
            BreakLoop
        EndIf
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80241A24
{
    Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
    Call  MakeLerp      ( *Var[1] 00000000 00000028 .Easing:Linear )
    Loop
        Call  UpdateLerp ( )
        Call  GetPlayerPos  ( *Var[2] *Var[3] *Var[4] )
        Call  SetCamTarget  ( .Cam:Default *Var[2] *Var[0] *Var[4] )
        Wait  1`
        If  *Var[1]  ==  00000000
            BreakLoop
        EndIf
    EndLoop
    Loop
        Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
        Call  SetCamTarget  ( .Cam:Default *Var[0] 00000000 *Var[2] )
        Wait  1`
    EndLoop
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80241B3C
{
    Call  SetNpcFlagBits    ( 00000000 00000140 .True )
    Call  SetNpcFlagBits    ( .Npc:Partner 00000140 .True )
    Thread
        UseIntBuffer  *Var[0]
        Get3Int  *Var[1] *Var[2] *Var[3]
        Call  AddVectorPolar    ( *Var[1] *Var[2] *Fixed[15.0] *Var[3] )
        Call  SetPlayerAnimation    ( .PlayerAnim:Walking )
        Call  SetPlayerSpeed    ( *Fixed[4.0] )
        Call  PlayerMoveTo      ( *Var[1] *Var[2] 00000000 )
        Call  SetPlayerSpeed    ( *Fixed[0.7] )
        Call  PlayerMoveTo      ( *Var[1] *Var[2] 00000000 )
        Call  SetPlayerPos      ( *Var[1] 00000032 *Var[2] )
        Call  SetPlayerAnimation    ( 00010002 )
        Call  InterpPlayerYaw   ( *Var[3] 00000000 )
    EndThread
    Wait  5`
    UseIntBuffer  *Var[0]
    Get3Int  *Var[1] *Var[2] *Var[3]
    SetF  *Var[A]  *Var[3]
    AddF  *Var[3]  *Fixed[180.0]
    Call  AddVectorPolar    ( *Var[1] *Var[2] *Fixed[15.0] *Var[3] )
    Call  SetNpcJumpscale   ( .Npc:Partner *Fixed[0.7] )
    Call  NpcJump0  ( .Npc:Partner *Var[1] 00000032 *Var[2] 0000000A )
    Call  SetNpcSpeed       ( .Npc:Partner *Fixed[0.5] )
    Call  NpcMoveTo ( .Npc:Partner *Var[1] *Var[2] 00000000 )
    Call  SetNpcAnimation   ( .Npc:Partner 00000106 )
    Call  InterpNpcYaw      ( .Npc:Partner *Var[A] 00000000 )
    Wait  5`
    UseIntBuffer  *Var[0]
    Get3Int  *Var[1] *Var[2] *Var[3]
    SetF  *Var[A]  *Var[3]
    If  *Var[3]  <  000000B4
        AddF  *Var[3]  *Fixed[90.0]
    Else
        SubF  *Var[3]  *Fixed[90.0]
    EndIf
    SetF  *Var[4]  *Var[1]
    SetF  *Var[5]  *Var[2]
    SetF  *Var[6]  *Var[3]
    Call  AddVectorPolar    ( *Var[1] *Var[2] *Fixed[100.0] *Var[3] )
    Call  SetNpcSpeed   ( 00000000 *Fixed[3.0] )
    Call  SetNpcAnimation   ( 00000000 008C0003 )
    Call  NpcMoveTo     ( 00000000 *Var[1] *Var[2] 00000000 )
    Call  SetNpcAnimation   ( 00000000 008C0001 )
    Call  AddVectorPolar    ( *Var[4] *Var[5] *Fixed[20.0] *Var[6] )
    Call  SetNpcJumpscale   ( 00000000 *Fixed[0.7] )
    Call  NpcJump0      ( 00000000 *Var[4] 00000032 *Var[5] 0000000A )
    Call  InterpNpcYaw  ( 00000000 *Var[A] 00000000 )
    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F0009 ) % We're leaving! All aboard!
    Call  PlaySound     ( 00000083 )
    Call  SetMusicTrack ( 00000000 .Song:ToyboxTrain 00000000 00000008 )
    Wait  10`
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_80241F3C
{
    Call  StopSound ( 00000083 )
    Call  SetMusicTrack     ( 00000000 .Song:ShyGuyToybox 00000000 00000008 )
    Call  SetNpcFlagBits    ( 00000000 00000140 .True )
    Call  SetNpcFlagBits    ( .Npc:Partner 00000140 .True )
    SetF  *Var[0]  *MapVar[B]
    SetF  *Var[1]  *MapVar[C]
    SetF  *Var[2]  *MapVar[D]
    If  *Var[2]  <  000000B4
        AddF  *Var[2]  *Fixed[90.0]
    Else
        SubF  *Var[2]  *Fixed[90.0]
    EndIf
    Call  AddVectorPolar    ( *Var[0] *Var[1] *Fixed[100.0] *Var[2] )
    Thread
        Call  SetNpcJumpscale   ( 00000000 *Fixed[1.0] )
        Call  NpcJump0  ( 00000000 *Var[0] 00000032 *Var[1] 0000000A )
        Call  SetNpcAnimation   ( 00000000 008C0003 )
        Call  SetNpcSpeed       ( 00000000 *Fixed[2.0] )
        UseIntBuffer  *Var[9]
        Get2Int  *Var[3] *Var[4]
        Call  NpcMoveTo ( 00000000 *Var[3] *Var[4] 00000000 )
        Call  SetNpcAnimation   ( 00000000 008C0001 )
        Call  InterpNpcYaw      ( 00000000 0000010E 0000000F )
        Call  SetNpcFlagBits    ( 00000000 00000140 .False )
    EndThread
    Wait  10`
    Thread
        AddF  *Var[2]  *Fixed[60.0]
        Call  AddVectorPolar        ( *Var[0] *Var[1] *Fixed[20.0] *Var[2] )
        Call  SetPlayerAnimation    ( .PlayerAnim:Walking )
        Call  SetPlayerSpeed        ( *Fixed[3.0] )
        Call  PlayerMoveTo  ( *Var[0] *Var[1] 00000000 )
        Call  SetPlayerAnimation    ( 00010002 )
    EndThread
    Wait  10`
    Sub   *Var[1]  0000001E
    Call  SetNpcAnimation   ( .Npc:Partner 00000102 )
    Call  SetNpcSpeed       ( .Npc:Partner *Fixed[2.5] )
    Call  NpcMoveTo ( .Npc:Partner *Var[0] *Var[1] 00000000 )
    Call  SetNpcAnimation   ( .Npc:Partner 00000106 )
    Call  SetNpcFlagBits    ( .Npc:Partner 00000140 .False )
    Return
    End
}

#new:Script $Script_80242238
{
    Switch  *AreaByte[6]
        Case  ==  00000000
            Call  GotoMapSpecial    ( $ASCII_80242FC8 00000003 00000001 ) % omo_03
        Case  ==  00000001
            Call  GotoMapSpecial    ( $ASCII_80242FC0 00000003 00000001 ) % omo_06
        Case  ==  00000002
            Call  GotoMapSpecial    ( $ASCII_80242FB8 00000002 00000001 ) % omo_08
        Case  ==  00000003
            Call  GotoMapSpecial    ( $ASCII_80242FB0 00000003 00000001 ) % omo_10
    EndSwitch
    Wait  100`
    Return
    End
}

#new:Script $Script_802422F8
{
    Switch  *AreaByte[5]
        Case  00000000  to  00000001
            Switch  *AreaByte[6]
                Case  ==  00000000
                    Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                Case  ==  00000001
                    Call  GotoMapSpecial    ( $ASCII_80242FC0 00000002 00000001 ) % omo_06
                Case  ==  00000002
                    Call  GotoMapSpecial    ( $ASCII_80242FB8 00000001 00000001 ) % omo_08
                Case  ==  00000003
                    Call  GotoMapSpecial    ( $ASCII_80242FB0 00000002 00000001 ) % omo_10
            EndSwitch
        Case  ==  00000002
            Switch  *AreaByte[6]
                Case  ==  00000000
                    Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                Case  ==  00000001
                    If  *Flag_OMO_03  ==  .True
                        Call  GotoMapSpecial    ( $ASCII_80242FC0 00000002 00000001 ) % omo_06
                    Else
                        Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                    EndIf
                Case  ==  00000003
                    Call  GotoMapSpecial    ( $ASCII_80242FB0 00000002 00000001 ) % omo_10
            EndSwitch
        Case  ==  00000003
            Switch  *AreaByte[6]
                Case  ==  00000000
                    Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                Case  ==  00000001
                    If  *Flag_OMO_03  ==  .True
                        Call  GotoMapSpecial    ( $ASCII_80242FC0 00000002 00000001 ) % omo_06
                    Else
                        Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                    EndIf
                Case  ==  00000002
                    If  *Flag_OMO_03  ==  .True
                        Call  GotoMapSpecial    ( $ASCII_80242FB8 00000001 00000001 ) % omo_08
                    Else
                        Call  GotoMapSpecial    ( $ASCII_80242FC8 00000002 00000001 ) % omo_03
                    EndIf
            EndSwitch
    EndSwitch
    Wait  100`
    Return
    End
}

% Origin: HEURISTIC
#new:Script $Script_8024259C
{
    Label  A
    Wait  1`
    Call  $Function_80240518 ( )
    If  *Var[0]  !=  00000001
        Goto  A
    EndIf
    If  *AreaFlag[002]  ==  .False
        ExecWait  $Script_80242238
    Else
        ExecWait  $Script_802422F8
    EndIf
    Return
    End
}

#new:Script $Script_8024262C
{
    Call  GetEntryID    ( *Var[0] )
    If  *Var[0]  ==  ~Entry:Entry0
        Wait  140`
        Switch  *ToyTrain_Destination
            Case  ==  00000000
                If  *AreaByte[6]  ==  00000001
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000B ) % Next stop: Pink Station! Now arriving at Pink Stat ...
                EndIf
            Case  ==  00000001
                If  *AreaByte[6]  ==  00000002
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000C ) % Next stop: Green Station! Now arriving at Green St ...
                EndIf
            Case  ==  00000002
                If  *AreaByte[6]  ==  00000003
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000D ) % Next stop: Red Station! Now arriving at Red Statio ...
                EndIf
            Case  ==  00000003
                If  *AreaByte[6]  ==  00000000
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000A ) % Next stop: Blue Station! Now arriving at Blue Stat ...
                EndIf
        EndSwitch
    Else
        Wait  140`
        Switch  *ToyTrain_Destination
            Case  ==  00000000
                If  *AreaByte[6]  ==  00000000
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000A ) % Next stop: Blue Station! Now arriving at Blue Stat ...
                EndIf
            Case  ==  00000001
                If  *AreaByte[6]  ==  00000001
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000B ) % Next stop: Pink Station! Now arriving at Pink Stat ...
                EndIf
            Case  ==  00000002
                If  *AreaByte[6]  ==  00000002
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000C ) % Next stop: Green Station! Now arriving at Green St ...
                EndIf
            Case  ==  00000003
                If  *AreaByte[6]  ==  00000003
                    Call  SpeakToPlayer ( 00000000 008C0004 008C0001 00000005 000F000D ) % Next stop: Red Station! Now arriving at Red Statio ...
                EndIf
        EndSwitch
    EndIf
    Return
    End
}

#new:Script $Script_802428CC
{
    Label  0
    Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
    If  *Var[0]  <  FFFFF830
        Set   *Var[0]  FFFFF830
    EndIf
    If  *Var[0]  >  000007D0
        Set   *Var[0]  000007D0
    EndIf
    Call  SetCamTarget  ( .Cam:Default *Var[0] *Fixed[50.0] *Var[2] )
    Wait  1`
    Goto  0
    Return
    End
}

#new:Unknown $???_80242984
{
    FFFFF9F2 F24A7A80 F24BE280 0000060E F24A7A80 FFFFFFFF FFFFFFFF FFFFFFFF
}

#new:Unknown $???_802429A4
{
    0000060E F24A7A80 F24EB280 FFFFF9F2 F24A7A80 FFFFFFFF FFFFFFFF FFFFFFFF
}

#new:Script $Script_802429C4
{
    Call  DisablePlayerInput    ( .True )
    Call  DisablePlayerPhysics  ( .True )
    Call  DisablePartnerAI      ( 00000000 )
    Exec  $Script_802428CC
    Exec  $Script_8024262C
    Call  GetEntryID    ( *Var[0] )
    If  *Var[0]  ==  ~Entry:Entry0
        Set   *MapVar[0]  00000000
        Set   *MapVar[1]  $???_80242984
        Set   *MapVar[2]  00000000
        Exec  $Script_80240730
        Set   *MapFlag[00]  .True
        Thread
            Label  A
            Call  $Function_8024055C ( )
            If  *Var[0]  ==  00000001
                Goto  B
            EndIf
            Wait  1`
            If  *MapVar[B]  <  00000578
                Goto  A
            EndIf
            Switch  *ToyTrain_Destination
                Case  ==  00000000
                    Call  GotoMap   ( $ASCII_80242FC0 00000002 ) % omo_06
                Case  ==  00000001
                    Call  GotoMap   ( $ASCII_80242FB8 00000001 ) % omo_08
                Case  ==  00000002
                    Call  GotoMap   ( $ASCII_80242FB0 00000002 ) % omo_10
                Case  ==  00000003
                    Call  GotoMap   ( $ASCII_80242FC8 00000002 ) % omo_03
            EndSwitch
            Wait  100`
            Return
            Label  B
            ExecWait  $Script_802422F8
        EndThread
    Else
        Set   *MapVar[0]  00000000
        Set   *MapVar[1]  $???_802429A4
        Set   *MapVar[2]  00000000
        Exec  $Script_80240730
        Set   *MapFlag[00]  .True
        Thread
            Label  1E
            Call  $Function_8024055C ( )
            If  *Var[0]  ==  00000001
                Goto  1F
            EndIf
            Wait  1`
            If  *MapVar[B]  >  FFFFFA88
                Goto  1E
            EndIf
            Switch  *ToyTrain_Destination
                Case  ==  00000000
                    Call  GotoMap   ( $ASCII_80242FC8 00000003 ) % omo_03
                Case  ==  00000001
                    Call  GotoMap   ( $ASCII_80242FC0 00000003 ) % omo_06
                Case  ==  00000002
                    Call  GotoMap   ( $ASCII_80242FB8 00000002 ) % omo_08
                Case  ==  00000003
                    Call  GotoMap   ( $ASCII_80242FB0 00000003 ) % omo_10
            EndSwitch
            Wait  100`
            Return
            Label  1F
            ExecWait  $Script_80242238
        EndThread
    EndIf
    Return
    End
}

PADDING: 80242D5C to 80242D60 (00002D5C to 00002D60)
00000000

#new:Script $Script_80242D60
{
    Return
    End
}

#new:NpcSettings $NpcSettings_80242D70
{
    00000000 00200018 $Script_80242D60 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00630000
}

#new:NpcGroup $NpcGroup_80242D9C
{
    00000000 $NpcSettings_80242D70 ~Vec3f:NPC_80242D9C % 0 -1000 0
    00400D05 00000000 00000000 00000000 0000005A
    ~NoDrops
    ~Movement:NPC_80242D9C
    ~AnimationTable:NPC_80242D9C % .Sprite:TrainStationToad
    00000000 00000000 00000000 00000000 % no tattle string
}

#new:NpcGroupList $NpcGroupList_80242F8C
{
    00000001 $NpcGroup_80242D9C 00000000
    00000000 00000000 00000000
}

PADDING: 80242FA4 to 80242FB0 (00002FA4 to 00002FB0)
00000000 00000000 00000000

#new:ASCII $ASCII_80242FB0
{
    "omo_10"
}

#new:ASCII $ASCII_80242FB8
{
    "omo_08"
}

#new:ASCII $ASCII_80242FC0
{
    "omo_06"
}

#new:ASCII $ASCII_80242FC8
{
    "omo_03"
}

