%========
% Trap Floor
%========
#import Maze_Misc.mpat % Fog Function
#import Maze_MarioHPTracker.mpat % track if mario have 0hp

#new:Header $Header
{
[MainScript] $Script_Main
[Background] 80200000
[EntryList] $EntryList
[EntryCount] 2
[MapTattle]  $Function_GetTattle
}

#new:Function_Init $Function_Init
{
PUSH 	RA, A0, A1
LIA 	A0, 800B0CF0
LIA 	A1, "tik_tex" 
JAL 	~Func:sprintf
RESERVED
COPY 	V0, R0
JPOP 	RA, A0, A1
}

#new:EntryList $EntryList
{
~Vec4f:Entry0
~Vec4f:Entry1
}

#new:Script_Main $Script_Main
{
    Call    SetSpriteShading  	( FFFFFFFF )
    Call    SetCamPerspective 	( .Cam:Default 00000003 00000019 00000010 00001000 )
    Call    SetCamBGColor     	( .Cam:Default 0 0 0 ) % black
    Call    SetCamEnabled       ( .Cam:Default .True )
    Call    SetCamLeadPlayer    ( .Cam:Default .False )
    %Call    SetCamSpeed         ( .Cam:Default *Fixed[10.0] ) % scrapped
    Call    $Function_SetupFog
    % Despawn Partner
    If *Flag_Maze_PartnerLost1 == .True % partner getting lost - cutscene already seen
        If *AreaFlag[0A0] != .True % cutscene2 isn't about to start
            Call    GetCurrentPartnerID ( *LastPartner )
            Set     *AreaByte[F] *LastPartnerUsed
            Set     *LastPartnerUsed .False
            Call    $DespawnPartner
            % Nuke Partner's Byte Flags
            Call $WriteAddress ( 8010F2AC 0 .False .False .False )
            Call $WriteAddress ( 8010F2B4 0 .False .False .False )
            Call $WriteAddress ( 8010F2BC 0 .False .False .False )
            Call $WriteAddress ( 8010F2C4 0 .False .False .False )
            Call $WriteAddress ( 8010F2EC 0 .False .False .False )
            Call $WriteAddress ( 8010F2D4 0 .False .False .False )
            Call $WriteAddress ( 8010F2DC 0 .False .False .False )
            Call $WriteAddress ( 8010F2E4 0 .False .False .False )
        EndIf
    EndIf
    ExecWait $Script_LoadTrap
    Set	   *Var[0] $Script_MakeExits
    Wait    10`
    Call    GetPlayerPos ( .False *Var[A] .False )
    If  *Var[A] < 1000` % Partner lost cutscene isn't active
        Exec    EnterWalk
    EndIf
    Exec    $Script_KillMario % track mario hp
    Return
    End
}

#new:Script $Script_LoadTrap
{
    ExecWait $Script_TrapFloor_Init
    % Check if is the 1st time entering this map
    If *Flag_Maze_PartnerLost1 == .False
        Exec $Script_Cutscene_Lost1
        Return
    Else % Check for the other cutscene
        If *Flag_Maze_PartnerLost2 == .False
            If *AreaFlag[0A0] == .True
                Exec $Script_Cutscene_Lost2
                Return
            EndIf
        EndIf
    EndIf
    % All traps data get saved when you enter the maze, the code is in $Script_GetNewTrapsData at mze_00.mpat
    % Disable all Chests' Camera Zones
    Call    SetZoneEnabled ( ~Zone:Left1 .False )
    Call    SetZoneEnabled ( ~Zone:Middle1 .False )
    Call    SetZoneEnabled ( ~Zone:Right1 .False )
    ExecWait $Script_GetCurrentTrapData
    /% Testing - Load the trap you want 
    Set *Var[0] 4 % Trap ID
    Set *Var[1] 0 % Trap Var
    Set *Var[2] 0 % Chest Spawn Point 1
    Set *Var[3] 0 % Chest Spawn Point 2 % unused
    %/
    %% Traps %%
    Switch *Var[0]
        % Spikes Traps
        Case == 0 % Spikes - 1 Side - Middle Hole to surpass it
            % Enable Models
            % Which side?
            Switch *Var[1] % Trap Var
                Case == 0 % Left
                    ExecWait $Script_EnableModels_Pillars_Left_Default
                    ExecWait $Script_EnableModels_Pillars_Right_Wide
                    ExecWait $Script_EnableModels_Spikes_1_2
                Case == 1 % Right
                    ExecWait $Script_EnableModels_Pillars_Left_Wide
                    ExecWait $Script_EnableModels_Pillars_Right_Default
                    ExecWait $Script_EnableModels_Spikes_6_7
            EndSwitch
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            Call EnableModel ( .Model:Pillars:Middle:Wide:3 .False )
            Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 1
                    ExecWait $Script_EnableModels_ChestPlatform_1
                Case == 2
                    ExecWait $Script_EnableModels_ChestPlatform_2
                Case == 3
                    ExecWait $Script_EnableModels_ChestPlatform_3
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
            EndSwitch
            %% Load Trap %%
            Switch *Var[1] % Trap Var
                Case == 0 % Left
                    Exec $Script_SpikesHandler_Spikes1AND2_Start0
                Case == 1 % Right
                    Exec $Script_SpikesHandler_Spikes6AND7_Start0
            EndSwitch
        Case == 1 % Spikes - 2 Sides - Middle Hole to surpass it
            % Enable Models
            ExecWait $Script_EnableModels_Pillars_Left_Default
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            ExecWait $Script_EnableModels_Pillars_Right_Default
            Call EnableModel ( .Model:Pillars:Middle:Wide:3 .False )
            Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 2
                    ExecWait $Script_EnableModels_ChestPlatform_2
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
            EndSwitch
            %% Load Trap %%
            ExecWait $Script_EnableModels_Spikes_1_2
            ExecWait $Script_EnableModels_Spikes_6_7
            Exec $Script_SpikesHandler_Spikes1AND2_Start0
            Exec $Script_SpikesHandler_Spikes6AND7_Start1
        Case == 2 % Spikes - 2 Sides - Spikes move on different directions (you don't need the middle hole)
            % Enable Models
            ExecWait $Script_EnableModels_Pillars_Left_Default
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            ExecWait $Script_EnableModels_Pillars_Right_Default
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 2
                    ExecWait $Script_EnableModels_ChestPlatform_2
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
            EndSwitch
            %% Load Trap %%
            ExecWait $Script_EnableModels_Spikes_1_2
            ExecWait $Script_EnableModels_Spikes_6_7
            Exec $Script_SpikesHandler_Spikes1_Start0
            Exec $Script_SpikesHandler_Spikes2_Start1
            Exec $Script_SpikesHandler_Spikes6_Start1
            Exec $Script_SpikesHandler_Spikes7_Start0
            %Exec $Script_SpikesHandler_Trap2
        Case == 3 % Spikes - XL Side - Two large groups of spikes move in the opposite direction
            % Enable Models
            ExecWait $Script_EnableModels_Pillars_Left_Default
            ExecWait $Script_EnableModels_Pillars_Right_Default
            %% Load Trap %%
            ExecWait $Script_EnableModels_Spikes_1_2
            ExecWait $Script_EnableModels_Spikes_3
            ExecWait $Script_EnableModels_Spikes_4
            ExecWait $Script_EnableModels_Spikes_5
            ExecWait $Script_EnableModels_Spikes_6_7
            Exec $Script_SpikesHandler_Spikes1_Start0
            Exec $Script_SpikesHandler_Spikes2_Start0
            Exec $Script_SpikesHandler_Spikes3_Start0
            Exec $Script_SpikesHandler_Spikes4_Start0
            Exec $Script_SpikesHandler_Spikes5_Start1
            Exec $Script_SpikesHandler_Spikes6_Start1
            Exec $Script_SpikesHandler_Spikes7_Start1
        Case == 4 % Spikes - XL Side - Each row move on the opposite direction to the previous one (0101010)
            % Enable Models
            ExecWait $Script_EnableModels_Pillars_Left_Default
            ExecWait $Script_EnableModels_Pillars_Right_Default
            %% Load Trap %%
            ExecWait $Script_EnableModels_Spikes_1_2
            ExecWait $Script_EnableModels_Spikes_3
            ExecWait $Script_EnableModels_Spikes_4
            ExecWait $Script_EnableModels_Spikes_5
            ExecWait $Script_EnableModels_Spikes_6_7
            Exec $Script_SpikesHandler_Spikes1_Start0
            Exec $Script_SpikesHandler_Spikes2_Start1
            Exec $Script_SpikesHandler_Spikes3_Start0
            Exec $Script_SpikesHandler_Spikes4_Start1
            Exec $Script_SpikesHandler_Spikes5_Start0
            Exec $Script_SpikesHandler_Spikes6_Start1
            Exec $Script_SpikesHandler_Spikes7_Start0
        % Walls Traps
        Case == 5 % Walls - 1 Side
            % Enable Models
            % Which side?
            Switch *Var[1] % Trap Var
                Case == 0 % Left
                    ExecWait $Script_EnableModels_WallTrap_Left
                    ExecWait $Script_EnableModels_Pillars_Right_Wide
                    Exec    $Script_WallsHandler_Left_1
                Case == 1 % Right
                    ExecWait $Script_EnableModels_WallTrap_Right
                    ExecWait $Script_EnableModels_Pillars_Left_Wide
                    Exec    $Script_WallsHandler_Right_1
            EndSwitch
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 1
                    ExecWait $Script_EnableModels_ChestPlatform_1
                Case == 2
                    ExecWait $Script_EnableModels_ChestPlatform_2
                Case == 3
                    ExecWait $Script_EnableModels_ChestPlatform_3
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
                    ExecWait $Script_EnableModels_Pillars_Middle_3S
            EndSwitch
        Case == 6 % Walls - 2 Sides
            % Enable Models
            % Which Size for the Middle Pillar?
            Switch *Var[1] % Trap Var
                Case == 0 % Thinner
                    ExecWait $Script_EnableModels_Pillars_Middle_Thinner
                    Exec    $Script_WallsHandler_Left_0
                    Exec    $Script_WallsHandler_Right_0
                Case == 1 % Wide
                    ExecWait $Script_EnableModels_Pillars_Middle_Wide
                    Exec    $Script_WallsHandler_Left_1
                    Exec    $Script_WallsHandler_Right_1
            EndSwitch
            ExecWait $Script_EnableModels_WallTrap_Left
            ExecWait $Script_EnableModels_WallTrap_Right
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 2
                    ExecWait $Script_EnableModels_ChestPlatform_2
                Case == 5
                    ExecWait $Script_EnableModels_ChestPlatform_5
                Case == 8
                    ExecWait $Script_EnableModels_ChestPlatform_8
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
                    ExecWait $Script_EnableModels_Pillars_Middle_3S
            EndSwitch
            %% Load Trap %%
        Case == 7 % Walls - 1 Side - The first and last wall crash with another moving wall
            % Enable Models
            % Which side?
            Switch *Var[1] % Trap Var
                Case == 0 % Left
                    ExecWait $Script_EnableModels_Pillars_Right_Wide
                    ExecWait $Script_EnableModels_WallTrap_Left
                    Exec     $Script_WallsHandler_Trap7_Left
                Case == 1 % Right
                    ExecWait $Script_EnableModels_Pillars_Left_Wide
                    ExecWait $Script_EnableModels_WallTrap_Right
                    Exec     $Script_WallsHandler_Trap7_Right
            EndSwitch
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            % Disable the corner pillars used in the wall traps
            Call    EnableModel ( .Model:Pillars:Wall:1 .False )
            Call    EnableModel ( .Model:Pillars:Wall:2 .False )
            Call    EnableModel ( .Model:Pillars:Wall:3 .False )
            Call    EnableModel ( .Model:Pillars:Wall:4 .False )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:2 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:3 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:4 7FFFFE00 )
            % Put the larger pillars used in Trap 9
            Call    EnableGroup ( .Group:Traps:Pillars:WallTraps:Trap9:Pillars .True )
            Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Pillars:0 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Pillars:1 7FFFFE00 )
            % Put the pillars who appear on the top of the wall traps
            Call    EnableModel ( .Model:Pillars:Wall:Left .True )
            Call    EnableModel ( .Model:Pillars:Wall:Right .True )
            % Put a wall on both sides of pillars 1 and 5 areas
            % Leave area 1 and 5 free of pillars
            Call    EnableModel ( .Model:Pillars:Right:Wide:1 .False )
            Call    EnableModel ( .Model:Pillars:Middle:Wide:1 .False )
            Call    EnableModel ( .Model:Pillars:Left:Wide:1 .False )
            Call    EnableModel ( .Model:Pillars:Right:Wide:5 .False )
            Call    EnableModel ( .Model:Pillars:Middle:Wide:5 .False )
            Call    EnableModel ( .Model:Pillars:Left:Wide:5 .False )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Right:Wide:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Left:Wide:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Right:Wide:5 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:5 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Left:Wide:5 7FFFFE00 )
            % Always put two walls on pillar's area 1 and 5
            % Left
            Call    EnableModel ( .Model:Traps:Walls:Left:1 .True )
            Call    EnableModel ( .Model:Traps:Walls:Left:5 .True )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:5 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:5 7FFFFE00 )
            % Right
            Call    EnableModel ( .Model:Traps:Walls:Right:1 .True )
            Call    EnableModel ( .Model:Traps:Walls:Right:5 .True )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:5 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:5 7FFFFE00 )
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 5
                    ExecWait $Script_EnableModels_ChestPlatform_5
                Case == 8
                    ExecWait $Script_EnableModels_ChestPlatform_8
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
                    ExecWait $Script_EnableModels_Pillars_Middle_3S
            EndSwitch
        Case == 8 % Walls - 2 Sides - You need to climb to a platform to enter the trap
            ExecWait $Script_EnableModels_Pillars_Middle_Wide
            ExecWait $Script_EnableModels_WallTrap_Trap9
            ExecWait $Script_EnableModels_WallTrap_Left
            ExecWait $Script_EnableModels_WallTrap_Right
            Call    EnableModel ( .Model:Pillars:Middle:Wide:1 .False )
            Call    EnableModel ( .Model:Pillars:Middle:Wide:5 .False )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:5 7FFFFE00 )
            % This trap doesn't use the smaller pillars on the corner of the wall traps
            Call    EnableModel ( .Model:Pillars:Wall:1 .False )
            Call    EnableModel ( .Model:Pillars:Wall:2 .False )
            Call    EnableModel ( .Model:Pillars:Wall:3 .False )
            Call    EnableModel ( .Model:Pillars:Wall:4 .False )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:1 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:2 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:3 7FFFFE00 )
            Call    ModifyColliderFlags ( .False .Collider:Pillars:Wall:4 7FFFFE00 )
            % Spawn Chest Platform
            Switch *Var[2]
                Case == 10`
                    ExecWait $Script_EnableModels_ChestPlatform_10_11
                    ExecWait $Script_EnableModels_Pillars_Middle_3S
            EndSwitch
            %% Load Trap %%
            Exec    $Script_WallsHandler_Left_1
            Exec    $Script_WallsHandler_Right_1
        Case == 9 % Walls - 2 Sides - 1 side has a chest at the end
            % Enable Models
            ExecWait $Script_EnableModels_Pillars_Middle_Thinner
            ExecWait $Script_EnableModels_WallTrap_Left
            ExecWait $Script_EnableModels_WallTrap_Right
            % Which side?
            Switch *Var[1] % Trap Var
                Case == 0 % Left
                    ExecWait $Script_EnableModels_ChestPlatform_12
                    Call    EnableModel ( .Model:Pillars:Left:Default:1 .True )
                    Call    EnableModel ( .Model:Pillars:Left:Default:2 .True )
                    Call    EnableModel ( .Model:Traps:Walls:Left:1 .False )
                    Call    EnableModel ( .Model:Traps:Walls:Left:2 .False )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Left:Body:1 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Left:Body:2 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Left:Hazard:1 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Left:Hazard:2 7FFFFE00 )
                Case == 1 % Right
                    ExecWait $Script_EnableModels_ChestPlatform_13
                    Call    EnableModel ( .Model:Pillars:Right:Default:1 .True )
                    Call    EnableModel ( .Model:Pillars:Right:Default:2 .True )
                    Call    EnableModel ( .Model:Traps:Walls:Right:1 .False )
                    Call    EnableModel ( .Model:Traps:Walls:Right:2 .False )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Right:Body:1 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Right:Body:2 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Right:Hazard:1 7FFFFE00 )
                    Call    ModifyColliderFlags ( .False .Collider:Traps:Walls:Right:Hazard:2 7FFFFE00 )%/
            EndSwitch
            %% Load Trap %%
            Exec    $Script_WallsHandler_Left_0
            Exec    $Script_WallsHandler_Right_0
        Case == 10` % Walls - XL Side
            ExecWait $Script_EnableModels_WallTrap_Left
            ExecWait $Script_EnableModels_WallTrap_Right
            %% Load Trap %%
            Exec    $Script_WallsHandler_LeftANDRight_Left
            Exec    $Script_WallsHandler_LeftANDRight_Right
    EndSwitch
    % Spawn Chests (if neccesary)
    ExecWait $Script_GetCurrentTrapData % save chest pos in var2
    If  *Var[2] != .False
        % A chest need to be spawned
        Exec $Script_MakeEntities
    EndIf
    Return
    End
}

#new:Script $Script_Cutscene_Lost1
{
    Call    DisablePlayerInput ( .True )
    Call    DisablePartnerAI ( 0 ) % 0 = Let you use SetNpcAnimation
    Exec	$Script_Cutscene_Lost1_2 *Var[A]
    Exec	$SkipCutscene_Lost1_2
    Loop
        DoesScriptExist ( *Var[A] *Var[0] )
        If *Var[0] == .False
            BreakLoop
        EndIf
        Wait 1
    EndLoop
    Set 	*Flag_Skip .False
    Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
    Set     *Flag_Maze_PartnerLost1 .True
    % Reload Map
    Call    GetEntryID ( *Var[0] )
    If  *Var[0] == 0 % Entry0
        Call     GotoMap  ( "mze_09" 0 )
    Else % 1 % Entry1
        Call     GotoMap  ( "mze_09" 1 )
    EndIf
    Return
    End
}

#new:Script $Script_Cutscene_Lost1_2
{
    % Set Mario Pos
    Call    SetPlayerPos ( ~Vec3d:Cutscene1 )
    Call    SetNpcPos    ( .Npc:Partner ~Vec3d:Cutscene1 )
    Call    GetNpcPos    ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Sub     *Var[2] 2   % z % to don't spawn in the same mario pos so the sprites don't overlap
    % Set Height for flying partners
    Call	GetCurrentPartnerID ( *Var[3] )
	Switch  *Var[3]
		CaseOR == 4 % Parakarry
		CaseOR == 9 % Bow
		CaseOR == 6 % Watt
        CaseOR == 8 % Lakilester
            Add *Var[1] 15` % y
        EndCaseGroup
	EndSwitch
    Call    SetNpcPos    ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Wait    25`
    Call    DisablePlayerPhysics ( .True )
    % Mario walks
    Thread
        Call    GetPlayerPos ( *Var[0] .False *Var[1] )
        Add     *Var[0] 45`
        Call    PlayerMoveTo ( *Var[0] *Var[1] 15` )
    EndThread
    % Partner Walks 1
    ExecWait $Script_Partner_SetWalkAnimation
    Call    GetNpcPos ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Add     *Var[0] -40` % x
    Add     *Var[2] -40` % z
    Call    NpcMoveTo ( .Npc:Partner *Var[0] *Var[2] 20` )
    ExecWait $Script_Partner_SetIdleAnimation
    Wait    10`
    % Partner turn both sides
    % Left
    Call     MakeLerp    	( 0 -180` 10` .Easing:Linear )
    Loop
        Call     UpdateLerp
        Call     SetNpcRotation ( .Npc:Partner 0 *Var[0] 0 )
        If  *Var[1]  ==  .False
            BreakLoop
        EndIf
        Wait 1
    EndLoop
    Wait	15`
    % Right
    Call     MakeLerp    	( -180` 0 10` .Easing:Linear )
    Loop
        Call     UpdateLerp
        Call     SetNpcRotation ( .Npc:Partner 0 *Var[0] 0 )
        If  *Var[1]  ==  .False
            BreakLoop
        EndIf
        Wait 1
    EndLoop
    Wait    20`
    Set     *Var[0] 2 % MessageFlag = bit1 = Mario don't look at talking npc
    Set     *Var[1] $String_Cutscene1
    ExecWait $Script_Partner_Dialog1 % var1 = string
    % ?
    Call 	SetPlayerAnimation ( .PlayerAnim:StandStill )
    Call 	SetPlayerAnimation ( 00080022 ) % Look around
    Call 	PlaySoundAtPlayer 	( 0263 .Default ) % ?
    Call 	ShowEmote 		  	( .Default .Emote:Question -45` 20` 0 0 0 0 0 )
    Wait    20`
    % Partner Walks 2
    ExecWait $Script_Partner_SetWalkAnimation
    Call    GetNpcPos ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Add     *Var[0] 60` % x
    Add     *Var[2] -60` % z
    Call    NpcMoveTo ( .Npc:Partner *Var[0] *Var[2] 20` )
    ExecWait $Script_Partner_SetIdleAnimation
    Set     *Var[0] 2 % MessageFlag = bit1 = Mario don't look at talking npc
    Set     *Var[1] $String_Cutscene2
    ExecWait $Script_Partner_Dialog1 % var1 = string
    % Mario is looking around
    Call    SetPlayerAnimation ( .PlayerAnim:StandStill )
    Call	SetPlayerAnimation  ( 00080022 ) % Look around
    Call    InterpPlayerYaw ( -90` 15` )
    Call    InterpPlayerYaw ( 90` 15` )
    Wait    10`
    % Partner goes away
    ExecWait $Script_Partner_SetWalkAnimation
    Call    GetNpcPos ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Add     *Var[0] -260` % x
    Add     *Var[2] -30` % z
    Thread
        % Partner Walks 3
        Call    NpcMoveTo ( .Npc:Partner *Var[0] *Var[2] 60` )
    EndThread
    Thread
        % Partner dissappears
        Wait  20`
        SetF  *Var[1]  *Fixed[240.0] 
        Loop   10`
            SubF    *Var[1]  *Fixed[24.0] 
            Call    802CFD30 ( .Npc:Partner 7 *Var[1] 0 0 0 )
            Wait    1 
        EndLoop
        Call    SetNpcPos ( .Npc:Partner 0 -1000` 0 )
    EndThread
    Wait    10`
    Call    ShowMessageAtScreenPos ( $String_Cutscene3 A0 28 )
    Return
    End
}

#new:Script $Script_Cutscene_Lost2_2
{
    % Set Mario Pos
    Call    SetPlayerPos ( ~Vec3d:Cutscene1 )
    Call    InterpPlayerYaw ( -90` 0 )
    Call    SetNpcPos    ( .Npc:Partner ~Vec3d:Cutscene1 )
    Call    SetNpcYaw    ( .Npc:Partner 90` )
    Call    GetNpcPos    ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    % Set Height for flying partners
    Call	GetCurrentPartnerID ( *Var[3] )
	Switch  *Var[3]
		CaseOR == 4 % Parakarry
		CaseOR == 9 % Bow
		CaseOR == 6 % Watt
        CaseOR == 8 % Lakilester
            Add *Var[1] 15` % y
        EndCaseGroup
    EndSwitch
    Sub     *Var[0] 35` % x
    Call    SetNpcPos    ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
    Wait    25`
    Call    DisablePlayerPhysics ( .True )
    % Mario walks
    Set     *Var[0] 0 % Message Flags
    Set     *Var[1] $String_Cutscene4
    ExecWait $Script_Partner_Dialog1 % var1 = string
    Call    SetPlayerAnimation ( .PlayerAnim:StandStill )
    Call    SetPlayerAnimation ( .PlayerAnim:Thinking )
    Wait    30`
    Set     *Var[0] 0 % Message Flags
    Set     *Var[1] $String_Cutscene5
    ExecWait $Script_Partner_Dialog1 % var1 = string
    Wait    10`
    Call    SetPlayerAnimation ( .PlayerAnim:StandStill )
    Call    SetPlayerAnimation ( .PlayerAnim:NodYes )
    Wait    30`
    Return
    End
}

#new:Script $SkipCutscene_Lost1_2
{
    Set	*Flag_Skip .True % show skip text
    Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble
            Kill	*Var[A]
            ResumeAll .True
			Wait 1
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#new:Script $Script_Cutscene_Lost2
{
    Call    DisablePlayerInput ( .True )
    Call    DisablePartnerAI ( 0 ) % 0 = Let you use SetNpcAnimation
    Exec	$Script_Cutscene_Lost2_2 *Var[A]
    Exec	$SkipCutscene_Lost1_2
    Loop
        DoesScriptExist ( *Var[A] *Var[0] )
        If *Var[0] == .False
            BreakLoop
        EndIf
        Wait 1
    EndLoop
    Set 	*Flag_Skip .False
    Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
    Set     *Flag_Maze_PartnerLost2 .True
    Set     *AreaFlag[0A0] .False
    If  *AreaFlag[0A1] == 0 % Exit0
        Set     *AreaFlag[0A1] .False
        Switch  *Dungeon_MapID
            Case == 2
                Call     GotoMap         	( "mze_02" 2 )
            Case == 4
                Set     *Dungeon_MapID 3
                Call     GotoMap         	( "mze_06" 1 )
            Case == 6
                Set     *Dungeon_MapID 5
                Call     GotoMap         	( "mze_03" 1 )
            Case == 8
                Set     *Dungeon_MapID 7
                Call     GotoMap         	( "mze_07" 1 )
            Case == 10`
                Set     *Dungeon_MapID 11`
                Call     GotoMap         	( "mze_08" 1 )
            Case == 12`
                Set     *Dungeon_MapID 13`
                Call     GotoMap         	( "mze_05" 1 )
            Case == 14`
                Set     *Dungeon_MapID 15`
                Call     GotoMap         	( "mze_06" 1 )
            Case == 16`
                Set     *Dungeon_MapID 1
                Call     GotoMap         	( "mze_02" 3 )
            Case == 17`
                Set     *Dungeon_MapID 7
                Call     GotoMap         	( "mze_07" 2 )
            Case == 19`
                Set     *Dungeon_MapID 11`
                Call     GotoMap         	( "mze_08" 2 )
        EndSwitch
    Else % Exit1
        Set     *AreaFlag[0A1] .False
        Switch  *Dungeon_MapID
            Case == 2
                Set     *Dungeon_MapID 3
                Call     GotoMap         	( "mze_06" 0 )
            Case == 4
                Set     *Dungeon_MapID 5
                Call     GotoMap         	( "mze_03" 0 )
            Case == 6
                Set     *Dungeon_MapID 7
                Call     GotoMap         	( "mze_07" 0 )
            Case == 8
                Set     *Dungeon_MapID 9
                Call     GotoMap         	( "mze_04" 0 )
            Case == 10`
                Set     *Dungeon_MapID 9
                Call     GotoMap         	( "mze_04" 1 )
            Case == 12`
                Set     *Dungeon_MapID 11`
                Call     GotoMap         	( "mze_08" 0 )
            Case == 14`
                Set     *Dungeon_MapID 13`
                Call     GotoMap         	( "mze_05" 0 )
            Case == 16`
                Set     *Dungeon_MapID 15`
                Call     GotoMap         	( "mze_06" 0 )
            Case == 17`
                Set     *Dungeon_MapID 18`
                Call     GotoMap         	( "mze_10" 0 )
            Case == 19`
                Set     *Dungeon_MapID 20`
                Call     GotoMap         	( "mze_11" 0 )
        EndSwitch
    EndIf
    Return
    End
}

% [!] writes in var2
#new:Script $Script_Partner_Dialog1
{
	Call	GetCurrentPartnerID ( *Var[2] )
	Switch  *Var[2]
		Case == 1 % Goombario
			Call	SpeakToPlayer		( .Npc:Partner 00010008 00010001 *Var[0] *Var[1] )
		Case == 2 % Kooper
			Call	SpeakToPlayer		( .Npc:Partner 0002000D 00020003 *Var[0] *Var[1] )
		Case == 3 % Bombette
			Call	SpeakToPlayer		( .Npc:Partner 0003000E 00030003 *Var[0] *Var[1] )
		Case == 4 % Parakarry
			Call	SpeakToPlayer		( .Npc:Partner 00040006 00040001 *Var[0] *Var[1] )
		Case == 9 % Bow
			Call	SpeakToPlayer		( .Npc:Partner 00050004 00050001 *Var[0] *Var[1] )
		Case == 6 % Watt
			Call	SpeakToPlayer		( .Npc:Partner 00060004 00060001 *Var[0] *Var[1] )
		Case == 7 % Sushie
			Call	SpeakToPlayer		( .Npc:Partner 00070004 00070001 *Var[0] *Var[1] )
		Case == 8 % Lakilester
			Call	SpeakToPlayer		( .Npc:Partner 00080009 00080001 *Var[0] *Var[1] )
	EndSwitch
	Return
	End
}

#new:Script $Script_Partner_SetIdleAnimation
{
	Call	GetCurrentPartnerID ( *Var[0] )
	Switch  *Var[0]
		Case == 1 % Goombario
			Call	SetNpcAnimation ( .Npc:Partner 00010001 )
		Case == 2 % Kooper
			Call	SetNpcAnimation ( .Npc:Partner 00020003 )
		Case == 3 % Bombette
			Call	SetNpcAnimation ( .Npc:Partner 00030003 )
		Case == 4 % Parakarry
			Call	SetNpcAnimation ( .Npc:Partner 00040001 )
		Case == 9 % Bow
			Call	SetNpcAnimation ( .Npc:Partner 00050001 )
		Case == 6 % Watt
		Case == 7 % Sushie
			Call	SetNpcAnimation ( .Npc:Partner 00070001 )
		Case == 8 % Lakilester
	EndSwitch
	Return
	End
}

#new:Script $Script_Partner_SetWalkAnimation
{
	Call	GetCurrentPartnerID ( *Var[0] )
	Switch  *Var[0]
		Case == 1 % Goombario
			Call	SetNpcAnimation ( .Npc:Partner 00010002 )
		Case == 2 % Kooper
			Call	SetNpcAnimation ( .Npc:Partner 00020004 )
		Case == 3 % Bombette
			Call	SetNpcAnimation ( .Npc:Partner 00030002 )
		Case == 4 % Parakarry
			Call	SetNpcAnimation ( .Npc:Partner 00040002 )
		Case == 9 % Bow
			Call	SetNpcAnimation ( .Npc:Partner 00050002 )
		Case == 6 % Watt
		Case == 7 % Sushie
			Call	SetNpcAnimation ( .Npc:Partner 00070002 )
		Case == 8 % Lakilester
	EndSwitch
	Return
	End
}

#new:Function $DespawnPartner
{
    PUSH	RA
    LW      V0, C (A0)
    LAB     A2, 8010F2A2
    JAL     ~Func:set_variable
    LW      A1, 0 (V0)
    JAL     800EB168
    DADDU   A0, R0, R0
    POP		RA
    JR      RA
    ADDIU   V0, R0, 2
}

#new:Function $RespawnPartner
{
	PUSH	RA
	LW      V0, C (A0)
    JAL     ~Func:get_variable
   	LW      A1, 0 (V0)
   	SLL     V0, V0, 18
   	JAL     800EB168
   	SRA     A0, V0, 18
   	POP		RA
   	JR      RA
	ADDIU   V0, R0, 2
}

#string $String_Cutscene1
{
[STYLE:RIGHT][...]
Mario?
[WAIT][END]
}

#string $String_Cutscene2
{
[STYLE:RIGHT][...]
Hey Mario, where are you!?
[WAIT][END]
}

#string $String_Cutscene3
{
[STYLE:INSPECT][...]
It seems like your partner got
lost.
[WAIT][NEXT][...]
The mist is very strong in this
place.
[WAIT][END]
}

#string $String_Cutscene4
{
[STYLE:RIGHT][...]
Oh there you are!
Looks like the mist is really
strong in that room.
[WAIT][END]
}

#string $String_Cutscene5
{
[STYLE:RIGHT][...]
It seems like it will be really
difficult for us,
[WAIT][NEXT][...]
to stay together in these
kinds of rooms [PushColor][Color:19]every time we
enter one[PopColor].
[WAIT][NEXT][...]
So keep that in mind Mario.
[WAIT][END]
}

#new:Script $Script_MakeEntities
{
Switch *Var[2]
    Case == 1
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos1 80000000 )
    Case == 2
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos2 80000000 )
    Case == 3
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos3 80000000 )
    Case == 5
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos5 80000000 )
    Case == 8
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos8 80000000 )
    Case == 10`
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos11 80000000 )
        % Assign Flag for Chest 2
        Switch  *Dungeon_MapID
            Case == 2
                Call AssignFlag *Flag_Maze_Map2_Chest2
            Case == 4
                Call AssignFlag *Flag_Maze_Map4_Chest2
            Case == 6
                Call AssignFlag *Flag_Maze_Map6_Chest2
            Case == 8
                Call AssignFlag *Flag_Maze_Map8_Chest2
            Case == 10`
                Call AssignFlag *Flag_Maze_Map10_Chest2
            Case == 12`
                Call AssignFlag *Flag_Maze_Map12_Chest2
            Case == 14`
                Call AssignFlag *Flag_Maze_Map14_Chest2
            Case == 16`
                Call AssignFlag *Flag_Maze_Map16_Chest2
            Case == 17`
                Call AssignFlag *Flag_Maze_Map17_Chest2
            Case == 19`
                Call AssignFlag *Flag_Maze_Map19_Chest2
        EndSwitch
        Call AssignScript ( $Script_UseChest )
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos10 80000000 )
    Case == 12`
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos12 80000000 )
    Case == 13`
        Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:ChestPos13 80000000 )
EndSwitch
% Assign Flag for Chest 1
Switch  *Dungeon_MapID
    Case == 2
        Call AssignFlag *Flag_Maze_Map2_Chest1
    Case == 4
        Call AssignFlag *Flag_Maze_Map4_Chest1
    Case == 6
        Call AssignFlag *Flag_Maze_Map6_Chest1
    Case == 8
        Call AssignFlag *Flag_Maze_Map8_Chest1
    Case == 10`
        Call AssignFlag *Flag_Maze_Map10_Chest1
    Case == 12`
        Call AssignFlag *Flag_Maze_Map12_Chest1
    Case == 14`
        Call AssignFlag *Flag_Maze_Map14_Chest1
    Case == 16`
        Call AssignFlag *Flag_Maze_Map16_Chest1
    Case == 17`
        Call AssignFlag *Flag_Maze_Map17_Chest1
    Case == 19`
        Call AssignFlag *Flag_Maze_Map19_Chest1
EndSwitch
Call AssignScript ( $Script_UseChest )
Return
End
}

% Give between 20 - 25 star pieces
#new:Script $Script_UseChest
{
Call    $WriteAddress ( 8010EF90 2 00000001 0 .False ) % Force status menu to appear
Call    RandInt ( 5 *Var[1] )
Set     *Var[0] 20`
Add     *Var[0] *Var[1]
Call    $ReadAddress ( 80356130 1 *Var[1] 0 .False ) % get temporary Star Pieces
Add     *Var[0] *Var[1]
If  *Var[0] > 999` % temp star pieces cap
    Set *Var[0] 999`
EndIf
Call    $WriteAddress ( 80356130 1 *Var[0] 0 .False ) % Save new ammount
% Give more O²
Call    $ReadAddress ( $DungeonTimer 0 *Var[0] 0 .False )
Add     *Var[0] 8`
If *Var[0] > 208`
    Set *Var[0] 208` % 208` = Full timer
EndIf
Call    $WriteAddress ( $DungeonTimer 0 *Var[0] 0 .False )
% the inputs and the timer becomes disabled in MiscHooks.patch (@Hook 108A84)
Set     *Flag_Cheev_Dungeon_01 .True
Exec    $Script_Cheev_Dungeon_03
Call    DisablePlayerInput ( .False ) % enable inputs
Set     *Flag_DungeonPause .False % resume timer
Return
End
}

% Get total amount of chest on this playthough
% and check if the player already opened all of them.
#new:Script $Script_Cheev_Dungeon_03
{
    % Check amount of chests from trap rooms
    Set *Var[5] 0
    Set *Var[1] 0
    Loop 10`
        Call $ReadAddress ( $Data_TrapPointers 2 *Var[0] *Var[1] .False )
        Call $ReadAddress ( *Var[0] 0 *Var[2] 2 .False )
        % var2 = chest spawn pos
        If *Var[2] != 0
            If *Var[2] == 10`
                Add *Var[5] 2
            Else
                Add *Var[5] 1
            EndIf
        EndIf
        Add *Var[1] 4
        Wait 1
    EndLoop
    % add special chests
    Add *Var[5] 2
    % add for battle floors
    Add *Var[5] 10`
    % check if chests are possible to spawn on mistar's room
    If  *AreaFlag[00E] != .True
        If  *Flag_Mistar == .True
            Add *Var[5] 2
        EndIf
    EndIf
    Add *Maze_ChestsOpened_CurrentP 1
    If *Maze_ChestsOpened_CurrentP == *Var[5]
        Set *Flag_Cheev_Dungeon_03 .True
    EndIf
    Return
    End
}

#new:IntTable $Data_TrapPointers
{
    $Maze_Trap2_Data  $Maze_Trap4_Data  $Maze_Trap6_Data  $Maze_Trap8_Data
    $Maze_Trap10_Data $Maze_Trap12_Data $Maze_Trap14_Data $Maze_Trap16_Data
    $Maze_Trap17_Data $Maze_Trap19_Data
}

#new:Script $Script_TrapFloor_Init
{
    Call EnableGroup ( .Group:Traps .False )
    % Disable all colliders
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:5 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:3S 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:5 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:5 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:4 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:Trap9:Platform:0 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:Trap9:Platform:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:Trap9:Pillars:0 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Wall:Trap9:Pillars:1 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:1:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:1:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:1:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:1:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:1:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:2:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:2:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:2:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:2:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:2:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:3:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:3:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:3:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:3:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:3:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:4:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:4:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:4:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:4:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:4:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:5:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:5:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:5:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:5:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:5:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:6:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:6:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:6:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:6:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:6:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:7:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:7:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:7:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:7:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Body:7:5 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:1:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:1:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:1:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:1:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:1:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:2:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:2:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:2:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:2:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:2:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:3:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:3:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:3:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:3:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:3:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:4:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:4:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:4:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:4:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:4:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:5:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:5:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:5:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:5:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:5:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:6:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:6:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:6:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:6:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:6:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:7:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:7:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:7:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:7:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Spikes:Hazard:7:5 7FFFFE00 )
    %
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:1 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:5 7FFFFE00 )
    %
    %Call ModifyColliderFlags 	( .False .Collider:Chests:Left:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Left:2S 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Left:3 7FFFFE00 )
    %Call ModifyColliderFlags 	( .False .Collider:Chests:Left:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Left:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Middle:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Middle:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Middle:5 7FFFFE00 )
    %Call ModifyColliderFlags 	( .False .Collider:Chests:Right:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Right:2S 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Right:3 7FFFFE00 )
    %Call ModifyColliderFlags 	( .False .Collider:Chests:Right:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Chests:Right:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_GetCurrentTrapData
{
    Switch  *Dungeon_MapID
        Case == 2
            Set *Var[F] $Maze_Trap2_Data
        Case == 4
            Set *Var[F] $Maze_Trap4_Data
        Case == 6
            Set *Var[F] $Maze_Trap6_Data
        Case == 8
            Set *Var[F] $Maze_Trap8_Data
        Case == 10`
            Set *Var[F] $Maze_Trap10_Data
        Case == 12`
            Set *Var[F] $Maze_Trap12_Data
        Case == 14`
            Set *Var[F] $Maze_Trap14_Data
        Case == 16`
            Set *Var[F] $Maze_Trap16_Data
        Case == 17`
            Set *Var[F] $Maze_Trap17_Data
        Case == 19`
            Set *Var[F] $Maze_Trap19_Data
    EndSwitch
    /% $Maze_TrapX_Data - Byte Struct
    00XXXXXX = TrapID
    XX00XXXX = Trap Var % used in some traps
    XXXX00XX = Chest 1 Spawn Point
    XXXXXX00 = Chest 2 Spawn Point
    %/
    % Load Trap ID
    Call    $Function_TrapData_ReadData ( *Var[F] 0 *Var[0] ) % Pointer ByteToLoad *output
    Call    $Function_TrapData_ReadData ( *Var[F] 1 *Var[1] ) % Trap Var
    Call    $Function_TrapData_ReadData ( *Var[F] 2 *Var[2] ) % Chest Spawn Point 1
    Call    $Function_TrapData_ReadData ( *Var[F] 3 *Var[3] ) % Chest Spawn Point 2
    Return
    End
}

#new:Function $Function_TrapData_ReadData
{
    PUSH    RA, S0, S1, S2, S3
    LW      S0, C (A0) % Load Args pointer
    JAL     ~Func:get_variable
    LW      A1, 0 (S0) % load arg0 % Trap Pointer
    COPY    S1, V0
    LW      S2, 4 (S0) % load arg1 % Offset
    % load Data
    ADDU    A2, S1, S2 % add offset
    LBU     A2, 0 (A2)
    JAL     ~Func:set_variable
    LW      A1, 8 (S0)
    POP     RA, S0, S1, S2, S3
    JR      RA
    ORI     V0, R0, 2
}

%%== Enable Models/Collisions Scripts ==%%
#new:Script $Script_EnableModels_Pillars_Left_Default
{
    Call    EnableGroup ( .Group:Traps:Pillars:Left:Default .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Default:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Default:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Default:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Default:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Default:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Left_Wide
{
    Call    EnableGroup ( .Group:Traps:Pillars:Left:Wide .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Wide:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Wide:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Wide:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Wide:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Left:Wide:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Middle_Thinner
{
    Call    EnableGroup ( .Group:Traps:Pillars:Middle:Thinner .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Thinner:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Thinner:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Thinner:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Thinner:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Thinner:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Middle_Wide
{
    Call    EnableGroup ( .Group:Traps:Pillars:Middle:Wide .True )
    Call    EnableModel ( .Model:Pillars:Middle:Wide:3S .False )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Middle_3S
{
    % Enable Model
    Call    EnableModel ( .Model:Pillars:Middle:Wide:3S .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Middle:Wide:3S 7FFFFE00 )
    % Disable Models
    Call    EnableModel ( .Model:Pillars:Middle:Wide:3 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Thinner:3 .False )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Thinner:3 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Right_Default
{
    Call    EnableGroup ( .Group:Traps:Pillars:Right:Default .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Default:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Default:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Default:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Default:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Default:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Pillars_Right_Wide
{
    Call    EnableGroup ( .Group:Traps:Pillars:Right:Wide .True )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Wide:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Wide:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Wide:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Wide:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Right:Wide:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_WallTrap_Left
{
    Call    EnableModel ( .Model:Pillars:Wall:1 .True )
    Call    EnableModel ( .Model:Pillars:Wall:4 .True )
    Call    EnableModel ( .Model:Pillars:Wall:Left .True )
    %
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:4 7FFFFE00 )
    ExecWait $Script_EnableModels_WallTrap_Left_TrapModels
    Return
    End
}

#new:Script $Script_EnableModels_WallTrap_Right
{
    Call    EnableModel ( .Model:Pillars:Wall:2 .True )
    Call    EnableModel ( .Model:Pillars:Wall:3 .True )
    Call    EnableModel ( .Model:Pillars:Wall:Right .True )
    %
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:3 7FFFFE00 )
    ExecWait $Script_EnableModels_WallTrap_Right_TrapModels
    Return
    End
}

#new:Script $Script_EnableModels_WallTrap_Trap9
{
    Call    EnableGroup ( .Group:Traps:Pillars:WallTraps:Trap9 .True )
    Call    EnableModel ( .Model:Pillars:Wall:Left .True )
    Call    EnableModel ( .Model:Pillars:Wall:Right .True )
    %
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Platform:0 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Platform:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Pillars:0 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Pillars:Wall:Trap9:Pillars:1 7FFFFE00 )
    Return
    End
}

%% Spikes Traps %%

#new:Script $Script_EnableModels_Spikes_1_2
{
    Call    EnableModel ( .Model:Traps:Spikes:Holes:1 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:1 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:2 .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:1:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:1:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:1:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:1:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:1:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:1:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:1:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:1:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:1:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:1:5 7FFFFE00 )
    %
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:2:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:2:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:2:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:2:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:2:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:2:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:2:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:2:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:2:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:2:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Spikes_3
{
    Call    EnableModel ( .Model:Traps:Spikes:Holes:2 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:3 .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:3:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:3:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:3:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:3:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:3:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:3:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:3:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:3:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:3:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:3:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Spikes_4
{
    Call    EnableModel ( .Model:Traps:Spikes:Holes:3 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:4 .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:4:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:4:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:4:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:4:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:4:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:4:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:4:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:4:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:4:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:4:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Spikes_5
{
    Call    EnableModel ( .Model:Traps:Spikes:Holes:4 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:5 .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:5:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:5:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:5:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:5:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:5:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:5:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:5:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:5:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:5:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:5:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_Spikes_6_7
{
    Call    EnableModel ( .Model:Traps:Spikes:Holes:5 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:6 .True )
    Call    EnableGroup ( .Group:Traps:TrapsModels:Spikes:Spikes:7 .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:6:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:6:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:6:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:6:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:6:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:6:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:6:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:6:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:6:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:6:5 7FFFFE00 )
    %
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:7:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:7:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:7:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:7:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Body:7:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:7:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:7:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:7:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:7:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Spikes:Hazard:7:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_WallTrap_Left_TrapModels
{
    % Enable Traps Models
    Call    EnableModel ( .Model:Traps:Walls:Left:1 .True )
    Call    EnableModel ( .Model:Traps:Walls:Left:2 .True )
    Call    EnableModel ( .Model:Traps:Walls:Left:3 .True )
    Call    EnableModel ( .Model:Traps:Walls:Left:4 .True )
    Call    EnableModel ( .Model:Traps:Walls:Left:5 .True )
    Call    EnableModel ( .Model:Traps:Walls:Left:X .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Body:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Left:Hazard:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_WallTrap_Right_TrapModels
{
    % Enable Traps Models
    Call    EnableModel ( .Model:Traps:Walls:Right:1 .True )
    Call    EnableModel ( .Model:Traps:Walls:Right:2 .True )
    Call    EnableModel ( .Model:Traps:Walls:Right:3 .True )
    Call    EnableModel ( .Model:Traps:Walls:Right:4 .True )
    Call    EnableModel ( .Model:Traps:Walls:Right:5 .True )
    Call    EnableModel ( .Model:Traps:Walls:Right:X .True )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Body:5 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:1 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Traps:Walls:Right:Hazard:5 7FFFFE00 )
    Return
    End
}

%===============
% Chest Platform
%===============
/% Spawn Map
7-12-11-13-4
8----------5
9----10----6
3----2-----1
%/

#new:Script $Script_EnableModels_ChestPlatform_1
{
    /% Spawn Pos
    x-x-x
    x-x-x
    x-x-x
    x-x-0
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Right:Wide:5 .False )
    Call EnableModel ( .Model:Pillars:Right:Default:5 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:5 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Right:5 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Right:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_ChestPlatform_2
{
    /% Spawn Pos
    x-x-x
    x-x-x
    x-x-x
    x-0-x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Middle:Wide:5 .False )
    Call EnableModel ( .Model:Pillars:Middle:Thinner:5 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Thinner:5 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Middle:5 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Middle:5 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_ChestPlatform_3
{
    /% Spawn Pos
    x-x-x
    x-x-x
    x-x-x
    0-x-x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Left:Wide:5 .False )
    Call EnableModel ( .Model:Pillars:Left:Default:5 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:5 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:5 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Left:5 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Left:5 7FFFFE00 )
    Return
    End
}

/% unused
#new:Script $Script_EnableModels_ChestPlatform_4
{
    Spawn Pos
    x-x-0
    x-x-x
    x-x-x
    x-x-x
    
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Right:Wide:2 .False )
    Call EnableModel ( .Model:Pillars:Right:Default:2 .False )
    Call EnableModel (  .Model:Traps:Walls:Right:2 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:2 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Right:2 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Right:2 7FFFFE00 )
    Return
    End
}%/

#new:Script $Script_EnableModels_ChestPlatform_5
{
    /% Spawn Pos
    x-x-x
    x-x-0
    x-x-x
    x-x-x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Right:Wide:3 .False )
    Call EnableModel ( .Model:Pillars:Right:Default:3 .False )
    Call EnableModel (  .Model:Traps:Walls:Right:3 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:3 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Right:3 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Right:3 7FFFFE00 )
    Call SetZoneEnabled ( ~Zone:Left1 .True )
    Return
    End
}

/% unused
#new:Script $Script_EnableModels_ChestPlatform_6
{
    Spawn Pos
    x-x-x
    x-x-x
    x-x-0
    x-x-x

    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Right:Wide:4 .False )
    Call EnableModel ( .Model:Pillars:Right:Default:4 .False )
    Call EnableModel (  .Model:Traps:Walls:Right:4 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Default:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Body:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Right:Hazard:4 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Right:4 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Right:4 7FFFFE00 )
    Return
    End
}%/

/% unused
#new:Script $Script_EnableModels_ChestPlatform_7
{
    % Spawn Pos
    0-x-x
    x-x-x
    x-x-x
    x-x-x

    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Left:Wide:2 .False )
    Call EnableModel ( .Model:Pillars:Left:Default:2 .False )
    Call EnableModel (  .Model:Traps:Walls:Left:2 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:2 7FFFFE00 )    
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Left:2 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Left:2 7FFFFE00 )
    Return
    End
}%/

#new:Script $Script_EnableModels_ChestPlatform_8
{
    /% Spawn Pos
    x-x-x
    0-x-x
    x-x-x
    x-x-x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Left:Wide:3 .False )
    Call EnableModel ( .Model:Pillars:Left:Default:3 .False )
    Call EnableModel (  .Model:Traps:Walls:Left:3 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:3 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:3 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Left:3 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Left:3 7FFFFE00 )
    Call SetZoneEnabled ( ~Zone:Right1 .True )
    Return
    End
}

/% unused
#new:Script $Script_EnableModels_ChestPlatform_9
{
    Spawn Pos
    x-x-x
    x-x-x
    0-x-x
    x-x-x
    
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Left:Wide:4 .False )
    Call EnableModel ( .Model:Pillars:Left:Default:4 .False )
    Call EnableModel (  .Model:Traps:Walls:Left:4 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Default:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Body:4 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Traps:Walls:Left:Hazard:4 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Left:4 .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Left:4 7FFFFE00 )
    Return
    End
}%/

#new:Script $Script_EnableModels_ChestPlatform_10_11
{
    /% Spawn Pos
    x-x-0-x-x
    x---x---x
    x---0---x
    x---x---x
    %/
    % Disable all models that can be spawned on that point too
    Call    EnableModel ( .Model:Pillars:Middle:Wide:2 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Wide:3 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Wide:4 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Thinner:2 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Thinner:3 .False )
    Call    EnableModel ( .Model:Pillars:Middle:Thinner:4 .False )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Wide:4 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Thinner:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Thinner:3 7FFFFE00 )
    Call    ModifyColliderFlags ( .False .Collider:Pillars:Middle:Thinner:4 7FFFFE00 )
    % Enable Chest Platforms
    Call    EnableModel ( .Model:Chests:Middle:2 .True )
    Call    EnableModel ( .Model:Chests:Middle:4 .True )
    Call    ModifyColliderFlags ( .True .Collider:Chests:Middle:2 7FFFFE00 )
    Call    ModifyColliderFlags ( .True .Collider:Chests:Middle:4 7FFFFE00 )
    Call    SetZoneEnabled ( ~Zone:Middle1 .True )
    Return
    End
}

#new:Script $Script_EnableModels_ChestPlatform_12
{
    /% Spawn Pos
    x-0-x-x-x
    x---x---x
    x---x---x
    x---x---x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Left:Wide:2 .False )
    Call EnableModel ( .Model:Pillars:Middle:Wide:2 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Left:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:2 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Left:2S .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Left:2S 7FFFFE00 )
    Return
    End
}

#new:Script $Script_EnableModels_ChestPlatform_13
{
    /% Spawn Pos
    x-x-x-0-x
    x---x---x
    x---x---x
    x---x---x
    %/
    % Disable all models that can be spawned on that point too
    Call EnableModel ( .Model:Pillars:Right:Wide:2 .False )
    Call EnableModel ( .Model:Pillars:Middle:Wide:2 .False )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Right:Wide:2 7FFFFE00 )
    Call ModifyColliderFlags 	( .False .Collider:Pillars:Middle:Wide:2 7FFFFE00 )
    % Enable Chest Platform
    Call EnableModel ( .Model:Chests:Right:2S .True )
    Call ModifyColliderFlags 	( .True .Collider:Chests:Right:2S 7FFFFE00 )
    Return
    End
}

%% Activate Traps Scripts %%
#new:LavaResetList $LaveReset_Pos
{
    ~Collider:Entrance ~Vec3f:LavaReset_Entry0
    ~Collider:Exit ~Vec3f:LavaReset_Entry1
    FFFFFFFF 00000000 00000000 00000000
}

#new:Script $Script_SpikesHandler_Spikes1AND2_Start0
{
    SetGroup EF
    Set *MapVar[0] .Default
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:5 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:1:5
                Set *Var[4] .Collider:Traps:Spikes:Body:2:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:5
                Set *Var[6] .Collider:Traps:Spikes:Hazard:2:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:5
                Set *Var[8] .Model:Traps:Spikes:Spikes:2:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:1:4
                Set *Var[4] .Collider:Traps:Spikes:Body:2:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:4
                Set *Var[6] .Collider:Traps:Spikes:Hazard:2:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:4
                Set *Var[8] .Model:Traps:Spikes:Spikes:2:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:1:3
                Set *Var[4] .Collider:Traps:Spikes:Body:2:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:3
                Set *Var[6] .Collider:Traps:Spikes:Hazard:2:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:3
                Set *Var[8] .Model:Traps:Spikes:Spikes:2:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:1:2
                Set *Var[4] .Collider:Traps:Spikes:Body:2:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:2
                Set *Var[6] .Collider:Traps:Spikes:Hazard:2:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:2
                Set *Var[8] .Model:Traps:Spikes:Spikes:2:2
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:1:1
                Set *Var[4] .Collider:Traps:Spikes:Body:2:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:1
                Set *Var[6] .Collider:Traps:Spikes:Hazard:2:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:1
                Set *Var[8] .Model:Traps:Spikes:Spikes:2:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     TranslateModel ( *Var[8] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        Call     ParentColliderToModel 	( *Var[4] *Var[8] )
        Call     ParentColliderToModel 	( *Var[6] *Var[8] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        % Move next set of spikes
        If  *MapVar[2] == 0
            Add *MapVar[0] 1
        Else
            Sub *MapVar[0] 1
        EndIf
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes1_Start0
{
    SetGroup EF
    Set *MapVar[0] .Default
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:1:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:1:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:5
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:1:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:4
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:1:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:1:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:2
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:1:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:1
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:1:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:1:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:1:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:1:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:2
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:1:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:1:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:1:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        % Move next set of spikes
        If  *MapVar[2] == 0
            Add *MapVar[0] 1
        Else
            Sub *MapVar[0] 1
        EndIf
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes7_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:7:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:7:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:7:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:7:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:2
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:7:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes2_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:2:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:5
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:2:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:4
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:2:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:2:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:2
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:2:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:1
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:2:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:2:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:2:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:2:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:2
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:2:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes2_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:2:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:2:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:2:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:2:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:2:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:4
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:2:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:2:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:2:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes3_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:3:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:3:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:3:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:3:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:3:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:3:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:5
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:3:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:4
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:3:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:3:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:2
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:3:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:1
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:3:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:3:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:3:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:3:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:2
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:3:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:3:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:3:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes4_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:4:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:5
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:4:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:4
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:4:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:4:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:2
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:4:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:1
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:4:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:4:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:4:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:4:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:2
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:4:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes4_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:4:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:4:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:4:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:4:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:4:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:4
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:4:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:4:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:4:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes5_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *Var[3] .Collider:Traps:Spikes:Body:5:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:5:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:5:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:5:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:2
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:5:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes5_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:5:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:5:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:1
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:5:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:2
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:5:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:5:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:4
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:5:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:5
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:5:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:5:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:5:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:5:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:4
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:5:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes6_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:5:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:1
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:5:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:2
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:5:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:5:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:4
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:5:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:5:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:5:5
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:6:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:6:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:6:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:4
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes7_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    % Set ParentColliderToModels
    Set *Var[0] 5
    Loop *Var[0]
        Switch  *Var[0]
            Case == 5
                Set *Var[3] .Collider:Traps:Spikes:Body:7:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:1
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:1
            Case == 4
                Set *Var[3] .Collider:Traps:Spikes:Body:7:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:2
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:2
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:7:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:3
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:3
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:7:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:4
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:4
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:7:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:5
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:5
        EndSwitch
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
    EndLoop
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:7:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:7:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:7:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:7:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:4
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:7:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:7:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:7:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes6AND7_Start0
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:5 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Set *MapVar[0] .Default
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:5
                Set *Var[4] .Collider:Traps:Spikes:Body:7:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:5
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:5
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:5
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:6:4
                Set *Var[4] .Collider:Traps:Spikes:Body:7:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:4
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:4
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:4
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:6:3
                Set *Var[4] .Collider:Traps:Spikes:Body:7:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:3
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:3
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:3
            Case == 3
                Set *Var[3] .Collider:Traps:Spikes:Body:6:2
                Set *Var[4] .Collider:Traps:Spikes:Body:7:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:2
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:2
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:2
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:1
                Set *Var[4] .Collider:Traps:Spikes:Body:7:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:1
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:1
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:1
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     TranslateModel ( *Var[8] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        Call     ParentColliderToModel 	( *Var[4] *Var[8] )
        Call     ParentColliderToModel 	( *Var[6] *Var[8] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        % Move next set of spikes
        If  *MapVar[2] == 0
            Add *MapVar[0] 1
        Else
            Sub *MapVar[0] 1
        EndIf
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_SpikesHandler_Spikes6AND7_Start1
{
    SetGroup EF
    % Set Colliders able to hurt Mario
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:6:5 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:1 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:2 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:3 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:4 00000002 )
    Call    ModifyColliderFlags 	( 3 .Collider:Traps:Spikes:Hazard:7:5 00000002 )
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Set *MapVar[0] .Default
    Loop
        Switch  *MapVar[0]
            Case == 0
                Set *MapVar[2] 0 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:1
                Set *Var[4] .Collider:Traps:Spikes:Body:7:1
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:1
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:1
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:1
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:1
            Case == 1
                Set *Var[3] .Collider:Traps:Spikes:Body:6:2
                Set *Var[4] .Collider:Traps:Spikes:Body:7:2
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:2
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:2
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:2
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:2
            Case == 2
                Set *Var[3] .Collider:Traps:Spikes:Body:6:3
                Set *Var[4] .Collider:Traps:Spikes:Body:7:3
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:3
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:3
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:3
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:3
            Case == 3            
                Set *Var[3] .Collider:Traps:Spikes:Body:6:4
                Set *Var[4] .Collider:Traps:Spikes:Body:7:4
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:4
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:4
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:4
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:4
            Case == 4
                Set *MapVar[2] 1 % Spikes Direction
                Set *Var[3] .Collider:Traps:Spikes:Body:6:5
                Set *Var[4] .Collider:Traps:Spikes:Body:7:5
                Set *Var[5] .Collider:Traps:Spikes:Hazard:6:5
                Set *Var[6] .Collider:Traps:Spikes:Hazard:7:5
                % Models
                Set *Var[7] .Model:Traps:Spikes:Spikes:6:5
                Set *Var[8] .Model:Traps:Spikes:Spikes:7:5
        EndSwitch
        Wait    1
        Call     TranslateModel ( *Var[7] 0 0 0 )
        Call     TranslateModel ( *Var[8] 0 0 0 )
        Call     ParentColliderToModel 	( *Var[3] *Var[7] )
        Call     ParentColliderToModel 	( *Var[5] *Var[7] )
        Call     ParentColliderToModel 	( *Var[4] *Var[8] )
        Call     ParentColliderToModel 	( *Var[6] *Var[8] )
        % Spikes go up
        Call     PlaySoundAtCollider 	( *Var[3] 2093 .Default )
        Call     MakeLerp    	( 0 35` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Wait 10` % cooldown
        % Spikes go down
        Call     MakeLerp    	( 35` 0 F 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( *Var[7] 0 *Var[0] 0 )
            Call     TranslateModel ( *Var[8] 0 *Var[0] 0 )
            Call     UpdateColliderTransform 	( *Var[3] )
            Call     UpdateColliderTransform 	( *Var[4] )
            Call     UpdateColliderTransform 	( *Var[5] )
            Call     UpdateColliderTransform 	( *Var[6] )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

%%%
% Wall Traps
%%%

#new:Script $Script_WallsHandler_Left_0
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:1 .Model:Traps:Walls:Left:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:2 .Model:Traps:Walls:Left:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:3 .Model:Traps:Walls:Left:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:4 .Model:Traps:Walls:Left:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:5 .Model:Traps:Walls:Left:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:1 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:2 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:3 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:4 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:5 .Model:Traps:Walls:Left:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Left:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 168` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( 168` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_Left_1
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:1 .Model:Traps:Walls:Left:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:2 .Model:Traps:Walls:Left:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:3 .Model:Traps:Walls:Left:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:4 .Model:Traps:Walls:Left:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:5 .Model:Traps:Walls:Left:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:1 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:2 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:3 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:4 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:5 .Model:Traps:Walls:Left:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Left:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 103` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( 103` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_Right_0
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:1 .Model:Traps:Walls:Right:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:2 .Model:Traps:Walls:Right:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:3 .Model:Traps:Walls:Right:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:4 .Model:Traps:Walls:Right:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:5 .Model:Traps:Walls:Right:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:1 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:2 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:3 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:4 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:5 .Model:Traps:Walls:Right:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Right:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 -174` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( -174` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_Right_1
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:1 .Model:Traps:Walls:Right:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:2 .Model:Traps:Walls:Right:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:3 .Model:Traps:Walls:Right:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:4 .Model:Traps:Walls:Right:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:5 .Model:Traps:Walls:Right:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:1 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:2 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:3 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:4 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:5 .Model:Traps:Walls:Right:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Right:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 -112` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( -112` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_LeftANDRight_Left
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:1 .Model:Traps:Walls:Left:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:2 .Model:Traps:Walls:Left:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:3 .Model:Traps:Walls:Left:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:4 .Model:Traps:Walls:Left:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:5 .Model:Traps:Walls:Left:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:1 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:2 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:3 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:4 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:5 .Model:Traps:Walls:Left:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Left:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 195` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( 195` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_LeftANDRight_Right
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:1 .Model:Traps:Walls:Right:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:2 .Model:Traps:Walls:Right:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:3 .Model:Traps:Walls:Right:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:4 .Model:Traps:Walls:Right:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:5 .Model:Traps:Walls:Right:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:1 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:2 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:3 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:4 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:5 .Model:Traps:Walls:Right:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Right:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls
        Call     MakeLerp    	( 0 -195` 4 0 )
        Loop     
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:X *Var[0] -163` 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            %
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
            Wait     1
            If  *Var[1]  ==  0
                BreakLoop
            EndIf
        EndLoop
        Call     ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait 60` % cooldown
        % Deactivate Hazards
        % Move hazard collider to his original position - Y Pos
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
        % Walls go back
        Call     MakeLerp    	( -195` 0 15` 0 )
        Loop
            Call     UpdateLerp
            Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
            Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
            Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
            Wait     1
            If  *Var[1]  == .False
                BreakLoop
            EndIf
        EndLoop
        Wait 1
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_Trap7_Left
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:1 .Model:Traps:Walls:Left:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:2 .Model:Traps:Walls:Left:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:3 .Model:Traps:Walls:Left:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:4 .Model:Traps:Walls:Left:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:5 .Model:Traps:Walls:Left:5 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:1 .Model:Traps:Walls:Right:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:5 .Model:Traps:Walls:Right:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:1 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:2 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:3 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:4 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:5 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:1 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:5 .Model:Traps:Walls:Right:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:5 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Left:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls 1 & 5 from both sides
        Thread
            Call     MakeLerp    	( 0 190` 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:X *Var[0] -163` 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Thread
            Call     MakeLerp    	( 0 -199` 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:X *Var[0] -163` 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        % Move Walls 2-4
        Thread
            Call     MakeLerp    	( 0 103` 4 0 )
            Loop     
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Call    ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait    12` % Wait until all treads finish
        Wait    60` % cooldown
        % Deactivate Hazards
        % Move hazard colliders to his original position
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
        % Walls go back
        % Move Walls 1 & 5 from both sides
        Thread
            Call     MakeLerp    	( 190` 0 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Thread
            Call     MakeLerp    	( -199` 0 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        % Walls 2-4
        Call     MakeLerp    	( 103` 0 15` 0 )
        Thread
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:2 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:3 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:4 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:4 )
                Wait     1
                If  *Var[1]  == .False
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Wait 23` % Wait until all treads finish
    EndLoop
	Return
	End
}

#new:Script $Script_WallsHandler_Trap7_Right
{
    SetGroup EF
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:1 .Model:Traps:Walls:Right:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:2 .Model:Traps:Walls:Right:2 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:3 .Model:Traps:Walls:Right:3 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:4 .Model:Traps:Walls:Right:4 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Body:5 .Model:Traps:Walls:Right:5 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:1 .Model:Traps:Walls:Left:1 )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Body:5 .Model:Traps:Walls:Left:5 )
    %
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:1 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:2 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:3 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:4 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Right:Hazard:5 .Model:Traps:Walls:Right:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:1 .Model:Traps:Walls:Left:X )
    Call    ParentColliderToModel 	( .Collider:Traps:Walls:Left:Hazard:5 .Model:Traps:Walls:Left:X )
    % Bind hazards
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:2 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:3 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:4 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Right:Hazard:5 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:1 00000001 00000000
    Bind $Script_KillMario_Trap .Trigger:FloorAbove .Collider:Traps:Walls:Left:Hazard:5 00000001 00000000
    % Position to set after getting hurt
    Thread
        Call    ResetFromLava 	( $LaveReset_Pos )
    EndThread
    Loop
        Call    TranslateModel ( .Model:Traps:Walls:Right:1 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:2 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:3 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:4 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:5 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        % Walls smash to the wall
        Wait    130`
        Call    PlaySoundAtPlayer ( 00DD .Default )
        % Activate Hazards
        % Move Walls 1 & 5 from both sides
        Thread
            Call     MakeLerp    	( 0 190` 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:X *Var[0] -163` 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Thread
            Call     MakeLerp    	( 0 -199` 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:X *Var[0] -163` 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        % Move Walls 2-4
        Thread
            Call     MakeLerp    	( 0 -103` 4 0 )
            Loop     
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
                %
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Call    ShakeCam ( .Default 0 8 *Fixed[0.4] )
        Wait    12` % Wait until all treads finish
        Wait    60` % cooldown
        % Deactivate Hazards
        % Move hazard colliders to his original position
        Call    TranslateModel ( .Model:Traps:Walls:Right:X 0 0 0 )
        Call    TranslateModel ( .Model:Traps:Walls:Left:X 0 0 0 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:2 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:3 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:4 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Hazard:5 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:1 )
        Call    UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Hazard:5 )
        % Walls go back
        % Move Walls 1 & 5 from both sides
        Thread
            Call     MakeLerp    	( 190` 0 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Left:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Left:5 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Left:Body:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Thread
            Call     MakeLerp    	( -199` 0 4 0 )
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:1 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:5 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:1 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:5 )
                Wait     1
                If  *Var[1]  ==  0
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        % Walls 2-4
        Call     MakeLerp    	( -103` 0 15` 0 )
        Thread
            Loop
                Call     UpdateLerp
                Call     TranslateModel ( .Model:Traps:Walls:Right:2 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:3 *Var[0] 0 0 )
                Call     TranslateModel ( .Model:Traps:Walls:Right:4 *Var[0] 0 0 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:2 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:3 )
                Call     UpdateColliderTransform 	( .Collider:Traps:Walls:Right:Body:4 )
                Wait     1
                If  *Var[1]  == .False
                    BreakLoop
                EndIf
            EndLoop
        EndThread
        Wait 23` % Wait until all treads finish
    EndLoop
	Return
	End
}

#new:Script $Script_KillMario_Trap
{
    % Just set Mario's HP to Zero to run the died script
    Call $WriteAddress ( 8010F292 0 0 .False .False )
    Return
    End
}

#new:Script $Script_MakeExits
{
    Bind     $Script_Exit0  .Trigger:FloorAbove ~Collider:Entry0 1 0
    Bind     $Script_Exit1  .Trigger:FloorAbove ~Collider:Entry1 1 0
    Return
    End
}

#new:Script $Script_Exit0
{
% Unlock all partners again
% Goombario
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 0 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2AC 0 .True .False .False )
EndIf
% Kooper
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 1 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2B4 0 .True .False .False )
EndIf
% Bombette
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 2 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2BC 0 .True .False .False )
EndIf
% Parakarry
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 3 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2C4 0 .True .False .False )
EndIf
% Bow
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 4 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2EC 0 .True .False .False )
EndIf
% Watt
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 5 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2D4 0 .True .False .False )
EndIf
% Sushie
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 6 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2DC 0 .True .False .False )
EndIf
% Lakilester
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 7 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2E4 0 .True .False .False )
EndIf
Thread
    Wait    6
    Set     *LastPartnerUsed *AreaByte[F]
    Call    $RespawnPartner ( *LastPartner )
EndThread
If  *Flag_Maze_PartnerLost2 == .False
    Set *AreaFlag[0A0] .True % to trigger the leaving this room cutscene
    Set *AreaFlag[0A1] .False % to know which exit was the last one
    Call UseExitHeading  	( 3C 0 )
    Exec 80285CF4
    Call GotoMap ( "mze_09" 0 )
    Wait 100` 
    Return
EndIf
Call     UseExitHeading  	( 3C 0 )
Exec     80285CF4
Switch  *Dungeon_MapID
    Case == 2
        Call     GotoMap         	( "mze_02" 2 )
    Case == 4
        Set     *Dungeon_MapID 3
        Call     GotoMap         	( "mze_06" 1 )
    Case == 6
        Set     *Dungeon_MapID 5
        Call     GotoMap         	( "mze_03" 1 )
    Case == 8
        Set     *Dungeon_MapID 7
        Call     GotoMap         	( "mze_07" 1 )
    Case == 10`
        Set     *Dungeon_MapID 11`
        Call     GotoMap         	( "mze_08" 1 )
    Case == 12`
        Set     *Dungeon_MapID 13`
        Call     GotoMap         	( "mze_05" 1 )
    Case == 14`
        Set     *Dungeon_MapID 15`
        Call     GotoMap         	( "mze_06" 1 )
    Case == 16`
        Set     *Dungeon_MapID 1
        Call     GotoMap         	( "mze_02" 3 )
    Case == 17`
        Set     *Dungeon_MapID 7
        Call     GotoMap         	( "mze_07" 2 )
    Case == 19`
        Set     *Dungeon_MapID 11`
        Call     GotoMap         	( "mze_08" 2 )
EndSwitch
Wait 100` 
Return
End
}

#new:Script $Script_Exit1
{
% Unlock all partners again
% Goombario
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 0 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2AC 0 .True .False .False )
EndIf
% Kooper
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 1 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2B4 0 .True .False .False )
EndIf
% Bombette
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 2 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2BC 0 .True .False .False )
EndIf
% Parakarry
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 3 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2C4 0 .True .False .False )
EndIf
% Bow
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 4 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2EC 0 .True .False .False )
EndIf
% Watt
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 5 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2D4 0 .True .False .False )
EndIf
% Sushie
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 6 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2DC 0 .True .False .False )
EndIf
% Lakilester
Call $ReadAddress ( $Maze_PartnerData 0 *Var[0] 7 .False )
If *Var[0] == .True
    Call $WriteAddress ( 8010F2E4 0 .True .False .False )
EndIf
Thread
    Wait    6
    Set     *LastPartnerUsed *AreaByte[F]
    Call    $RespawnPartner ( *LastPartner )
EndThread
If  *Flag_Maze_PartnerLost2 == .False
    Set *AreaFlag[0A0] .True % to trigger the leaving this room cutscene
    Set *AreaFlag[0A1] .True % to know which exit was the last one
    Call UseExitHeading  	( 3C 1 )
    Exec ExitWalk
    Call GotoMap ( "mze_09" 0 )
    Wait 100` 
    Return
EndIf
Call     UseExitHeading  	( 3C 1 )
Exec     ExitWalk
Switch  *Dungeon_MapID
    Case == 2
        Set     *Dungeon_MapID 3
        Call     GotoMap         	( "mze_06" 0 )
    Case == 4
        Set     *Dungeon_MapID 5
        Call     GotoMap         	( "mze_03" 0 )
    Case == 6
        Set     *Dungeon_MapID 7
        Call     GotoMap         	( "mze_07" 0 )
    Case == 8
        Set     *Dungeon_MapID 9
        Call     GotoMap         	( "mze_04" 0 )
    Case == 10`
        Set     *Dungeon_MapID 9
        Call     GotoMap         	( "mze_04" 1 )
    Case == 12`
        Set     *Dungeon_MapID 11`
        Call     GotoMap         	( "mze_08" 0 )
    Case == 14`
        Set     *Dungeon_MapID 13`
        Call     GotoMap         	( "mze_05" 0 )
    Case == 16`
        Set     *Dungeon_MapID 15`
        Call     GotoMap         	( "mze_06" 0 )
    Case == 17`
        Set     *Dungeon_MapID 18`
        Call     GotoMap         	( "mze_10" 0 )
    Case == 19`
        Set     *Dungeon_MapID 20`
        Call     GotoMap         	( "mze_11" 0 )
EndSwitch
Wait     100` 
Return
End
}

#new:Function $Function_GetTattle
{
LIO       V0, $MapTattle
JR        RA
RESERVED
}
	
#string $MapTattle
{
[STYLE:TATTLE][...]
[Func_2B]We're inside the Cursed Maze
[WAIT][NEXT][...]
Our Oxygen will be limited in
this place, so keep that in
mind!
[WAIT][NEXT][...]
If the timer reaches Zero, your
HP will start to decrease until
you die or leave the Maze.
[WAIT][NEXT][...]
If that happen, you will lose
all your Star Pieces from this
run.
[WAIT][NEXT][...]
Remember is always better to
escape from here on time!
[WAIT][END]
}

%==============
%%% Models %%%
%==============
% Models Groups
#define .Group:Traps 8A % All models
%
#define .Group:Traps:Pillars 36
%
#define .Group:Traps:Pillars:Left C
#define .Group:Traps:Pillars:Left:Default 5
#define .Group:Traps:Pillars:Left:Wide B
%
#define .Group:Traps:Pillars:Middle 1A
#define .Group:Traps:Pillars:Middle:Thinner 12
#define .Group:Traps:Pillars:Middle:Wide 19
%
#define .Group:Traps:Pillars:Right 27
#define .Group:Traps:Pillars:Right:Default 20
#define .Group:Traps:Pillars:Right:Wide 26
% Extra Models needed only on wall traps
#define .Group:Traps:Pillars:WallTraps 35
% Only on Wall Trap with ID #9
#define .Group:Traps:Pillars:WallTraps:Trap9 34
#define .Group:Traps:Pillars:WallTraps:Trap9:Platforms 30
#define .Group:Traps:Pillars:WallTraps:Trap9:Pillars 33
%==========%
% Traps Model Groups
%==========%
#define .Group:Traps:TrapsModels 76
% Spikes Traps
#define .Group:Traps:TrapsModels:Spikes 68
#define .Group:Traps:TrapsModels:Spikes:Holes 3C
#define .Group:Traps:TrapsModels:Spikes:Spikes 67
#define .Group:Traps:TrapsModels:Spikes:Spikes:1 42
#define .Group:Traps:TrapsModels:Spikes:Spikes:2 48
#define .Group:Traps:TrapsModels:Spikes:Spikes:3 4E
#define .Group:Traps:TrapsModels:Spikes:Spikes:4 54
#define .Group:Traps:TrapsModels:Spikes:Spikes:5 5A
#define .Group:Traps:TrapsModels:Spikes:Spikes:6 60
#define .Group:Traps:TrapsModels:Spikes:Spikes:7 66
% Walls Traps
#define .Group:Traps:TrapsModels:Walls 77
#define .Group:Traps:TrapsModels:Walls:Left 6F
#define .Group:Traps:TrapsModels:Walls:Right 76
%==========%
% Chest's Platforms Groups
%==========%
#define .Group:Traps:ChestsBase 89
#define .Group:Traps:ChestsBase:Left 7E
#define .Group:Traps:ChestsBase:Middle 82
#define .Group:Traps:ChestsBase:Right 88

%% Pillars %%
% Left
#define .Model:Pillars:Left:Default:1 0
#define .Model:Pillars:Left:Default:2 1
#define .Model:Pillars:Left:Default:3 2
#define .Model:Pillars:Left:Default:4 3
#define .Model:Pillars:Left:Default:5 4
%
#define .Model:Pillars:Left:Wide:1 6
#define .Model:Pillars:Left:Wide:2 7
#define .Model:Pillars:Left:Wide:3 8
#define .Model:Pillars:Left:Wide:4 9
#define .Model:Pillars:Left:Wide:5 A
% Middle
#define .Model:Pillars:Middle:Thinner:1 D
#define .Model:Pillars:Middle:Thinner:2 E
#define .Model:Pillars:Middle:Thinner:3 F
#define .Model:Pillars:Middle:Thinner:4 10
#define .Model:Pillars:Middle:Thinner:5 11
%
#define .Model:Pillars:Middle:Wide:1 13
#define .Model:Pillars:Middle:Wide:2 14
#define .Model:Pillars:Middle:Wide:3 15
#define .Model:Pillars:Middle:Wide:3S 16
#define .Model:Pillars:Middle:Wide:4 17
#define .Model:Pillars:Middle:Wide:5 18
% Right
#define .Model:Pillars:Right:Default:1 1B
#define .Model:Pillars:Right:Default:2 1C
#define .Model:Pillars:Right:Default:3 1D
#define .Model:Pillars:Right:Default:4 1E
#define .Model:Pillars:Right:Default:5 1F
%
#define .Model:Pillars:Right:Wide:1 21
#define .Model:Pillars:Right:Wide:2 22
#define .Model:Pillars:Right:Wide:3 23
#define .Model:Pillars:Right:Wide:4 24
#define .Model:Pillars:Right:Wide:5 25

% Models Exclusive for the Wall traps
#define .Model:Pillars:Wall:1 28
#define .Model:Pillars:Wall:2 29
#define .Model:Pillars:Wall:3 2A
#define .Model:Pillars:Wall:4 2B
#define .Model:Pillars:Wall:Left 2C
#define .Model:Pillars:Wall:Right 2D
% Exclusive for Wall Trap #6
#define .Model:Pillars:Wall:Trap9:Platform:0 2E
#define .Model:Pillars:Wall:Trap9:Platform:1 2F
%
#define .Model:Pillars:Wall:Trap9:Pillars:0 31
#define .Model:Pillars:Wall:Trap9:Pillars:1 32

%%==Traps' Models==%%
%% Spike Trap
#define .Model:Traps:Spikes:Holes:1 37
#define .Model:Traps:Spikes:Holes:2 38
#define .Model:Traps:Spikes:Holes:3 39
#define .Model:Traps:Spikes:Holes:4 3A
#define .Model:Traps:Spikes:Holes:5 3B
%
% 1 %
#define .Model:Traps:Spikes:Spikes:1:1 3D
#define .Model:Traps:Spikes:Spikes:1:2 3E
#define .Model:Traps:Spikes:Spikes:1:3 3F
#define .Model:Traps:Spikes:Spikes:1:4 40
#define .Model:Traps:Spikes:Spikes:1:5 41
% 2 %
#define .Model:Traps:Spikes:Spikes:2:1 43
#define .Model:Traps:Spikes:Spikes:2:2 44
#define .Model:Traps:Spikes:Spikes:2:3 45
#define .Model:Traps:Spikes:Spikes:2:4 46
#define .Model:Traps:Spikes:Spikes:2:5 47
% 3 %
#define .Model:Traps:Spikes:Spikes:3:1 49
#define .Model:Traps:Spikes:Spikes:3:2 4A
#define .Model:Traps:Spikes:Spikes:3:3 4B
#define .Model:Traps:Spikes:Spikes:3:4 4C
#define .Model:Traps:Spikes:Spikes:3:5 4D
% 4 %
#define .Model:Traps:Spikes:Spikes:4:1 4F
#define .Model:Traps:Spikes:Spikes:4:2 50
#define .Model:Traps:Spikes:Spikes:4:3 51
#define .Model:Traps:Spikes:Spikes:4:4 52
#define .Model:Traps:Spikes:Spikes:4:5 53
% 5 %
#define .Model:Traps:Spikes:Spikes:5:1 55
#define .Model:Traps:Spikes:Spikes:5:2 56
#define .Model:Traps:Spikes:Spikes:5:3 57
#define .Model:Traps:Spikes:Spikes:5:4 58
#define .Model:Traps:Spikes:Spikes:5:5 59
% 6 %
#define .Model:Traps:Spikes:Spikes:6:1 5B
#define .Model:Traps:Spikes:Spikes:6:2 5C
#define .Model:Traps:Spikes:Spikes:6:3 5D
#define .Model:Traps:Spikes:Spikes:6:4 5E
#define .Model:Traps:Spikes:Spikes:6:5 5F
% 7 %
#define .Model:Traps:Spikes:Spikes:7:1 61
#define .Model:Traps:Spikes:Spikes:7:2 62
#define .Model:Traps:Spikes:Spikes:7:3 63
#define .Model:Traps:Spikes:Spikes:7:4 64
#define .Model:Traps:Spikes:Spikes:7:5 65

%% Walls Trap
#define .Model:Traps:Walls:Left:1 69
#define .Model:Traps:Walls:Left:2 6A
#define .Model:Traps:Walls:Left:3 6B
#define .Model:Traps:Walls:Left:4 6C
#define .Model:Traps:Walls:Left:5 6D
#define .Model:Traps:Walls:Left:X 6E
%
#define .Model:Traps:Walls:Right:1 70
#define .Model:Traps:Walls:Right:2 71
#define .Model:Traps:Walls:Right:3 72
#define .Model:Traps:Walls:Right:4 73
#define .Model:Traps:Walls:Right:5 74
#define .Model:Traps:Walls:Right:X 75

%%==Chest's Platforms==%%
#define .Model:Chests:Left:2 79
#define .Model:Chests:Left:2S 7A
#define .Model:Chests:Left:3 7B
#define .Model:Chests:Left:4 7C
#define .Model:Chests:Left:5 7D
%
#define .Model:Chests:Middle:2 7F
#define .Model:Chests:Middle:4 80
#define .Model:Chests:Middle:5 81
%
#define .Model:Chests:Right:2 83
#define .Model:Chests:Right:2S 84
#define .Model:Chests:Right:3 85
#define .Model:Chests:Right:4 86
#define .Model:Chests:Right:5 87

%==============
%%% Colliders %%%
%==============
%% Pillars %%
% Left
#define .Collider:Pillars:Left:Default:1 0
#define .Collider:Pillars:Left:Default:2 1
#define .Collider:Pillars:Left:Default:3 2
#define .Collider:Pillars:Left:Default:4 3
#define .Collider:Pillars:Left:Default:5 4
%
#define .Collider:Pillars:Left:Wide:1 6
#define .Collider:Pillars:Left:Wide:2 7
#define .Collider:Pillars:Left:Wide:3 8
#define .Collider:Pillars:Left:Wide:4 9
#define .Collider:Pillars:Left:Wide:5 A
% Middle
#define .Collider:Pillars:Middle:Thinner:1 D
#define .Collider:Pillars:Middle:Thinner:2 E
#define .Collider:Pillars:Middle:Thinner:3 F
#define .Collider:Pillars:Middle:Thinner:4 10
#define .Collider:Pillars:Middle:Thinner:5 11
%
#define .Collider:Pillars:Middle:Wide:1 13
#define .Collider:Pillars:Middle:Wide:2 14
#define .Collider:Pillars:Middle:Wide:3 15
#define .Collider:Pillars:Middle:Wide:3S 16
#define .Collider:Pillars:Middle:Wide:4 17
#define .Collider:Pillars:Middle:Wide:5 18
% Right
#define .Collider:Pillars:Right:Default:1 1B
#define .Collider:Pillars:Right:Default:2 1C
#define .Collider:Pillars:Right:Default:3 1D
#define .Collider:Pillars:Right:Default:4 1E
#define .Collider:Pillars:Right:Default:5 1F
%
#define .Collider:Pillars:Right:Wide:1 21
#define .Collider:Pillars:Right:Wide:2 22
#define .Collider:Pillars:Right:Wide:3 23
#define .Collider:Pillars:Right:Wide:4 24
#define .Collider:Pillars:Right:Wide:5 25

% Colliders Exclusive for the Wall traps
#define .Collider:Pillars:Wall:1 28
#define .Collider:Pillars:Wall:2 29
#define .Collider:Pillars:Wall:3 2A
#define .Collider:Pillars:Wall:4 2B
% Exclusive for Wall Trap #9
#define .Collider:Pillars:Wall:Trap9:Platform:0 2C
#define .Collider:Pillars:Wall:Trap9:Platform:1 2D
%
#define .Collider:Pillars:Wall:Trap9:Pillars:0 2F
#define .Collider:Pillars:Wall:Trap9:Pillars:1 30

%%==Traps' Colliders==%%
%% Spike Trap
% 1 %
#define .Collider:Traps:Spikes:Body:1:1 35
#define .Collider:Traps:Spikes:Body:1:2 36
#define .Collider:Traps:Spikes:Body:1:3 37
#define .Collider:Traps:Spikes:Body:1:4 38
#define .Collider:Traps:Spikes:Body:1:5 39
% 2 %
#define .Collider:Traps:Spikes:Body:2:1 3B
#define .Collider:Traps:Spikes:Body:2:2 3C
#define .Collider:Traps:Spikes:Body:2:3 3D
#define .Collider:Traps:Spikes:Body:2:4 3E
#define .Collider:Traps:Spikes:Body:2:5 3F
% 3 %
#define .Collider:Traps:Spikes:Body:3:1 41
#define .Collider:Traps:Spikes:Body:3:2 42
#define .Collider:Traps:Spikes:Body:3:3 43
#define .Collider:Traps:Spikes:Body:3:4 44
#define .Collider:Traps:Spikes:Body:3:5 45
% 4 %
#define .Collider:Traps:Spikes:Body:4:1 47
#define .Collider:Traps:Spikes:Body:4:2 48
#define .Collider:Traps:Spikes:Body:4:3 49
#define .Collider:Traps:Spikes:Body:4:4 4A
#define .Collider:Traps:Spikes:Body:4:5 4B
% 5 %
#define .Collider:Traps:Spikes:Body:5:1 4D
#define .Collider:Traps:Spikes:Body:5:2 4E
#define .Collider:Traps:Spikes:Body:5:3 4F
#define .Collider:Traps:Spikes:Body:5:4 50
#define .Collider:Traps:Spikes:Body:5:5 51
% 6 %
#define .Collider:Traps:Spikes:Body:6:1 53
#define .Collider:Traps:Spikes:Body:6:2 54
#define .Collider:Traps:Spikes:Body:6:3 55
#define .Collider:Traps:Spikes:Body:6:4 56
#define .Collider:Traps:Spikes:Body:6:5 57
% 7 %
#define .Collider:Traps:Spikes:Body:7:1 59
#define .Collider:Traps:Spikes:Body:7:2 5A
#define .Collider:Traps:Spikes:Body:7:3 5B
#define .Collider:Traps:Spikes:Body:7:4 5C
#define .Collider:Traps:Spikes:Body:7:5 5D

% Hazard %
% 1 %
#define .Collider:Traps:Spikes:Hazard:1:1 60
#define .Collider:Traps:Spikes:Hazard:1:2 61
#define .Collider:Traps:Spikes:Hazard:1:3 62
#define .Collider:Traps:Spikes:Hazard:1:4 63
#define .Collider:Traps:Spikes:Hazard:1:5 64
% 2 %
#define .Collider:Traps:Spikes:Hazard:2:1 66
#define .Collider:Traps:Spikes:Hazard:2:2 67
#define .Collider:Traps:Spikes:Hazard:2:3 68
#define .Collider:Traps:Spikes:Hazard:2:4 69
#define .Collider:Traps:Spikes:Hazard:2:5 6A
% 3 %
#define .Collider:Traps:Spikes:Hazard:3:1 6C
#define .Collider:Traps:Spikes:Hazard:3:2 6D
#define .Collider:Traps:Spikes:Hazard:3:3 6E
#define .Collider:Traps:Spikes:Hazard:3:4 6F
#define .Collider:Traps:Spikes:Hazard:3:5 70
% 4 %
#define .Collider:Traps:Spikes:Hazard:4:1 72
#define .Collider:Traps:Spikes:Hazard:4:2 73
#define .Collider:Traps:Spikes:Hazard:4:3 74
#define .Collider:Traps:Spikes:Hazard:4:4 75
#define .Collider:Traps:Spikes:Hazard:4:5 76
% 5 %
#define .Collider:Traps:Spikes:Hazard:5:1 78
#define .Collider:Traps:Spikes:Hazard:5:2 79
#define .Collider:Traps:Spikes:Hazard:5:3 7A
#define .Collider:Traps:Spikes:Hazard:5:4 7B
#define .Collider:Traps:Spikes:Hazard:5:5 7C
% 6 %
#define .Collider:Traps:Spikes:Hazard:6:1 7E
#define .Collider:Traps:Spikes:Hazard:6:2 7F
#define .Collider:Traps:Spikes:Hazard:6:3 80
#define .Collider:Traps:Spikes:Hazard:6:4 81
#define .Collider:Traps:Spikes:Hazard:6:5 82
% 7 %
#define .Collider:Traps:Spikes:Hazard:7:1 84
#define .Collider:Traps:Spikes:Hazard:7:2 85
#define .Collider:Traps:Spikes:Hazard:7:3 86
#define .Collider:Traps:Spikes:Hazard:7:4 87
#define .Collider:Traps:Spikes:Hazard:7:5 88

%% Walls Trap
% lEFT
#define .Collider:Traps:Walls:Left:Body:1 8D
#define .Collider:Traps:Walls:Left:Body:2 8E
#define .Collider:Traps:Walls:Left:Body:3 8F
#define .Collider:Traps:Walls:Left:Body:4 90
#define .Collider:Traps:Walls:Left:Body:5 91
%
#define .Collider:Traps:Walls:Left:Hazard:1 93
#define .Collider:Traps:Walls:Left:Hazard:2 94
#define .Collider:Traps:Walls:Left:Hazard:3 95
#define .Collider:Traps:Walls:Left:Hazard:4 96
#define .Collider:Traps:Walls:Left:Hazard:5 97

% RIGHT
#define .Collider:Traps:Walls:Right:Body:1 9A
#define .Collider:Traps:Walls:Right:Body:2 9B
#define .Collider:Traps:Walls:Right:Body:3 9C
#define .Collider:Traps:Walls:Right:Body:4 9D
#define .Collider:Traps:Walls:Right:Body:5 9E
%
#define .Collider:Traps:Walls:Right:Hazard:1 A0
#define .Collider:Traps:Walls:Right:Hazard:2 A1
#define .Collider:Traps:Walls:Right:Hazard:3 A2
#define .Collider:Traps:Walls:Right:Hazard:4 A3
#define .Collider:Traps:Walls:Right:Hazard:5 A4

%%==Chest's Platforms==%%
% Left
%#define .Collider:Chests:Left:2 A9 % unused
#define .Collider:Chests:Left:2S A9
#define .Collider:Chests:Left:3 AA
%#define .Collider:Chests:Left:4 AC % unused
#define .Collider:Chests:Left:5 AB
% Middle
#define .Collider:Chests:Middle:2 AD
#define .Collider:Chests:Middle:4 AE
#define .Collider:Chests:Middle:5 AF
% Right
%#define .Collider:Chests:Right:2 B3 % unused
#define .Collider:Chests:Right:2S B1
#define .Collider:Chests:Right:3 B2
%#define .Collider:Chests:Right:4 B6 % unused
#define .Collider:Chests:Right:5 B3
