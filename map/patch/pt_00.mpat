#import FallingDownPipe.mpat	%Load Mario's animation when is entering the Map from an up pipe
#import UsingPipeDown.mpat		%Load Mario's animation when is leaving the Map using a Pipe with a Vertical Exit
#import MapLoader.mpat			%Load the next map to go, the Mover use a diferent one at SetSpawns.mpat
#import SignStringLoader.mpat	%Used to stop the leaderboards to track everything when you arrive at pit00

#new:Header $Header
{
00000000 00000000 00000000 00000000
$Script_Main $EntryList 0000000F 00000000
00000000 00000000 00000000 00000000
00000000 00000000 80200000 $Function_GetTattle 
}

#new:EntryList $EntryList
{
~Vec4f:Entry0 % SaveBlock
~Vec4f:Entry1 % Left
~Vec4f:Entry2 % Pipe-Down
~Vec4f:Entry3 % Pipe-Up
~Vec4f:Entry4 % Right
%%% Position Markers
~Vec4f:Entry5 % Bed
~Vec4f:Respawn% Mario Died
~Vec4f:Entry6 % Merlee
~Vec4f:ChuckInteract_Pos % Chuck
~Vec4f:Entry_MazeOpen % Maze Opened Cutscene
~Vec4f:EntryTesting % just for testing purposes
~Vec4f:PitBeated
~Vec4f:AfterPrologue % after you meet everyone in the lobby, reload the map
~Vec4f:Entry_PurchaseAChest % D % Use GoToMap to close the chest once again
~Vec4f:Entry_RubyCS % E % Ruby Cutscene
}

% Override texture package
#new:Function_Init $Function_Init
{
PUSH 	RA, A0, A1
LIA 	A0, 800B0CF0
LIA 	A1, "tik_tex"
JAL 	~Func:sprintf
RESERVED
CLEAR	V0
JPOP 	RA, A0, A1
}

#new:Script_Main $Script_Main
{
    Call SetSpriteShading  ( -1 )
    Call SetCamPerspective ( .Cam:Default 00000003 00000019 00000010 00001000 )
    Call SetCamBGColor     ( .Cam:Default 0 0 0 )
    Call SetCamEnabled       ( .Cam:Default .True )
	Call SetCamLeadPlayer    ( .Cam:Default .False )
	Call GetEntryID ( *Var[0] )
	If *Var[0] != E % ~Entry:Entry_RubyCS
		Call SetMusicTrack 		 ( .Default .Song:ToadTownTunnels 00000000 00000008 )
	EndIf
	Call ModifyColliderFlags ( .False ~Collider:HideMerlee 7FFFFE00 )
	Call ModifyColliderFlags ( .False ~Collider:LockPipe 7FFFFE00 )
	Call ModifyColliderFlags ( .False ~Collider:LockSaveBlock 7FFFFE00 )
	Exec $Script_EnableTexPanning
	Set *Flag_Dungeon_Lobby .False
	Exec $Script_StarShrine_LightAnim
	% Check if the light will appear on the right door
	Exec $Script_CheckStarShrine
	% Save Current Mode in MapVars
	If	*Flag_Mode_Classic == 0 % true
		Set *MapVar[0] 0
		Set .CurrentMode 0
		Set .LastModeActivated 0
	Else % Rogue
		Set *MapVar[0] 1
		Set .CurrentMode 1
		Set .LastModeActivated 1
	EndIf
	% Dungeon Entrance
	If *Flag_DungeonOpened == .True
		Call EnableModel ( ~Model:ee_kousi .False )
		Call ModifyColliderFlags ( .False ~Collider:RightDoor_Bars 7FFFFE00 )
	EndIf
	% If Mario has already saved goombario at Level 10
	If *Flag_Goombario == .True
		Call MakeNpcs    	( .Default $NpcGroups )
	Else
		Call MakeNpcs    	( .Default $NpcGroup_OnlyCheato )
		Call ModifyColliderFlags ( .True ~Collider:HideMerlee 7FFFFE00 )
	EndIf
	Bind     $BedTrigger .Trigger:WallPressA ~Collider:bed 00000001 00000000 
	%Bind     $P1Trigger .Trigger:WallPressA ~Collider:Collider_P1 00000001 00000000 
	% Pipe Scripts %
	ExecWait	$Script_SetCurrentPipe
	Exec		$Script_SetSkull
	%% Reset Flags and Bytes %%
	Exec	$RestoreBadgesFlags % Clear all the Badges (and partners) Flags used on Roguelike Mode
	Set		*PitMapID 0		% Restore the MapID everytime Mario get back to the lobby
	Set	 	*PitFlag .False % Used to know if the player is inside the pit
	Set  	*Flag_LockInputs_GiantChest .False % lock player inputs at the moment he open a giant chest
	Set		*Flag_GoldenLS3 .False % used to know if you used the golden ls inside the pit once, to not save a better highscore
	Set		*MostTimeFloorID 0 % Floor ID in which mario spend the most time in
	Set		*Rogue_LastHelper .False
	Set		*Dupli_Floors .False % To get a x2 coins boost on all battles
	Set		*4Chests_Cooldown .False % To spawn 4 chests without any traps in between
	Call	$Function_ResetHighscores
	%% Load Unlocked Pieces of Furniture
	Exec	$Script_SetAllFurniture
	Bind    $Script_FasterCam ( .Trigger:FloorAbove ~Collider:door_left 00000001 00000000 )
	Call	MakeItemEntity ( .Item:SpeedySpin ~Vec3d:speedy_spin .ItemSpawnMode:Fixed_NeverVanish *Flag_SpeedySpin )
	%% Animate Furniture
	Exec	$Script_FurnitureAnim_Ship
	Exec	$Script_FurnitureAnim_CrystalStars
	Exec	$Script_FurnitureAnim_N64
	Call	GetEntryID ( *Var[0] )
	If *Var[0] != 9 % Maze Opened Cutscene
		Exec 	$Script_MakeEntities
	EndIf
	Exec	$Script_SetEvents
	Call	$Function_ResetGainedCoins
    Call	GetLoadType 	( *Var[1] )
	If	*Var[1] ==  1
		Exec	$Script_MakeExits
		Exec	EnterSavePoint
		% The game beta was beated?
		If *Flag_EarlyBuildBeated == .True
			Exec	$Script_AskWarpToFloor100
		EndIf
		% This flags are needed to know if a tester
		% want to go to the last part of the game
		% if he managed to beat the game beta.
		% 
		% The game check if the beta was beated, if
		% not just set both flag as false, aren't needed
		% on the final build of the game anyways
		Set *Flag_EarlyBuild .False
		Set *Flag_EarlyBuildBeated .False
	Else
		Exec $TrackEntry
		Call GetEntryID ( *Var[0] )
		If *Var[0] == 3 % ~Entry:Entry3 % Top Pipe
			Wait 4 % If you don't do this you will see how Mario is suspended in the air for some frames
		EndIf
	EndIf
    Return
    End
}

#new:Script $Script_AskWarpToFloor100
{
	Call	DisablePlayerInput ( .True )
	Loop % wait until the screen completly unfades
		Call 	$ReadAddress ( 80156904 2 *Var[0] .False .False ) % Screen brightness
		If *Var[0] == -1.0
			BreakLoop
		EndIf
		Wait	1
	EndLoop
	Call	ShowMessageAtScreenPos ( $String_Warp1 A0 28 )
	Call    ShowChoice    ( 001E001D ) % yes no
	If	*Var[0] == 1 % no
		Call	SwitchMessage ( $String_Warp2 )
		Call	DisablePlayerInput ( .False )
		Return
	EndIf
	Call	CloseMessage
	Call	GotoMap ( "pt_100" 2 )
	Return
	End
}

#string $String_Warp1
{
[STYLE:INSPECT][...]
[Color:06]Hi, looks like back in the day
you managed to beat Black Pit's
beta.
[WAIT][NEXT][...]
Do you want to warp to the ending
of the beta?
[Func_04][END]
}

#string $String_Warp2
{
[STYLE:INSPECT][NEXT][...]
[Color:06]Understood.
[WAIT][NEXT][...]
If you want to continue where
you left on Black Pit's story
just beat any Pit.
[WAIT][NEXT][...]
Good luck!
[WAIT][END]
}

% Texture Panning
#new:Script $Script_EnableTexPanning
{
    Call     EnableTexPanning 	( ~Model:kemuri .True )
	Call     EnableTexPanning 	( ~Model:f_10_chaos1 .True )
	Thread
		Set  *Var[0]  .Default % panner id
		Set  *Var[1]  0 	    % x scroll
		Set  *Var[2]  366`      % y scroll
		Set  *Var[3]  0 	    % x scroll (aux)
		Set  *Var[4]  0 	    % y scroll (aux)
		Set  *Var[5]  .False
		Set  *Var[6]  .True
		Set  *Var[7]  .False
		Set  *Var[8]  .False
		Set  *Var[9]  .False 
		Set  *Var[A]  .False 
		Set  *Var[B]  .False 
		Set  *Var[C]  .False 
		Exec     $Script_PanTex1 
    EndThread
	Return
	End
}

#new:Script $Script_PanTex1
{
	SetGroup 0
	If  *Var[5]  ==  .True
		If  *Var[6]  ==  .True 
			If  *Var[7]  ==  .True 
				If  *Var[8]  ==  .True 
					Call     $Script_PanTexEX
					Return
				EndIf
			EndIf
		EndIf
	EndIf
	Call     $Script_PanTex2
	Return
	End
}
   
#new:Function $Script_PanTex2
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  DADDU     S0, A0, R0
    C:  BEQ       A1, R0, .o24
   10:  SW        RA, 14 (SP)
   14:  SW        R0, 70 (S0)
   18:  SW        R0, 74 (S0)
   1C:  SW        R0, 78 (S0)
   20:  SW        R0, 7C (S0)
        .o24
   24:  LW        V0, 70 (S0)
   28:  BNE       V0, R0, .o64
   2C:  NOP
   30:  LW        V1, A8 (S0)
   34:  LW        V0, 88 (S0)
   38:  ADDU      V1, V1, V0
   3C:  BGEZ      V1, .o50
   40:  SW        V1, A8 (S0)
   44:  LUI       V0, 2
   48:  BEQ       R0, R0, .o60
   4C:  ADDU      V0, V1, V0
        .o50
   50:  LUI       A0, 2
   54:  SLT       V0, A0, V1
   58:  BEQ       V0, R0, .o64
   5C:  SUBU      V0, V1, A0
        .o60
   60:  SW        V0, A8 (S0)
        .o64
   64:  LW        V0, 74 (S0)
   68:  BNE       V0, R0, .oA4
   6C:  NOP
   70:  LW        V1, AC (S0)
   74:  LW        V0, 8C (S0)
   78:  ADDU      V1, V1, V0
   7C:  BGEZ      V1, .o90
   80:  SW        V1, AC (S0)
   84:  LUI       V0, 2
   88:  BEQ       R0, R0, .oA0
   8C:  ADDU      V0, V1, V0
        .o90
   90:  LUI       A0, 2
   94:  SLT       V0, A0, V1
   98:  BEQ       V0, R0, .oA4
   9C:  SUBU      V0, V1, A0
        .oA0
   A0:  SW        V0, AC (S0)
        .oA4
   A4:  LW        V0, 78 (S0)
   A8:  BNE       V0, R0, .oE4
   AC:  NOP
   B0:  LW        V1, B0 (S0)
   B4:  LW        V0, 90 (S0)
   B8:  ADDU      V1, V1, V0
   BC:  BGEZ      V1, .oD0
   C0:  SW        V1, B0 (S0)
   C4:  LUI       V0, 2
   C8:  BEQ       R0, R0, .oE0
   CC:  ADDU      V0, V1, V0
        .oD0
   D0:  LUI       A0, 2
   D4:  SLT       V0, A0, V1
   D8:  BEQ       V0, R0, .oE4
   DC:  SUBU      V0, V1, A0
        .oE0
   E0:  SW        V0, B0 (S0)
        .oE4
   E4:  LW        V0, 7C (S0)
   E8:  BNE       V0, R0, .o124
   EC:  NOP
   F0:  LW        V1, B4 (S0)
   F4:  LW        V0, 94 (S0)
   F8:  ADDU      V1, V1, V0
   FC:  BGEZ      V1, .o110
  100:  SW        V1, B4 (S0)
  104:  LUI       V0, 2
  108:  BEQ       R0, R0, .o120
  10C:  ADDU      V0, V1, V0
        .o110
  110:  LUI       A0, 2
  114:  SLT       V0, A0, V1
  118:  BEQ       V0, R0, .o124
  11C:  SUBU      V0, V1, A0
        .o120
  120:  SW        V0, B4 (S0)
        .o124
  124:  LW        A0, 84 (S0)
  128:  JAL       8011BC1C
  12C:  LW        A1, A8 (S0)
  130:  LW        A0, 84 (S0)
  134:  JAL       8011BC34
  138:  LW        A1, AC (S0)
  13C:  LW        A0, 84 (S0)
  140:  JAL       8011BC4C
  144:  LW        A1, B0 (S0)
  148:  LW        A0, 84 (S0)
  14C:  JAL       8011BC64
  150:  LW        A1, B4 (S0)
  154:  LW        V0, 70 (S0)
  158:  LW        V1, 78 (S0)
  15C:  LW        A0, 98 (S0)
  160:  ADDIU     V0, V0, 1
  164:  SW        V0, 70 (S0)
  168:  LW        V0, 74 (S0)
  16C:  ADDIU     V1, V1, 1
  170:  SW        V1, 78 (S0)
  174:  LW        V1, 70 (S0)
  178:  ADDIU     V0, V0, 1
  17C:  SW        V0, 74 (S0)
  180:  LW        V0, 7C (S0)
  184:  SLT       V1, V1, A0
  188:  ADDIU     V0, V0, 1
  18C:  BNE       V1, R0, .o198
  190:  SW        V0, 7C (S0)
  194:  SW        R0, 70 (S0)
        .o198
  198:  LW        V0, 74 (S0)
  19C:  LW        V1, 9C (S0)
  1A0:  SLT       V0, V0, V1
  1A4:  BEQL      V0, R0, .o1AC
  1A8:  SW        R0, 74 (S0)
        .o1AC
  1AC:  LW        V0, 78 (S0)
  1B0:  LW        V1, A0 (S0)
  1B4:  SLT       V0, V0, V1
  1B8:  BEQL      V0, R0, .o1C0
  1BC:  SW        R0, 78 (S0)
        .o1C0
  1C0:  LW        V0, 7C (S0)
  1C4:  LW        V1, A4 (S0)
  1C8:  SLT       V0, V0, V1
  1CC:  BEQL      V0, R0, .o1D4
  1D0:  SW        R0, 7C (S0)
        .o1D4
  1D4:  LW        RA, 14 (SP)
  1D8:  LW        S0, 10 (SP)
  1DC:  DADDU     V0, R0, R0
  1E0:  JR        RA
  1E4:  ADDIU     SP, SP, 18
}
   
#new:Function $Script_PanTexEX
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  DADDU     S0, A0, R0
    C:  SW        RA, 14 (SP)
   10:  LW        V1, A8 (S0)
   14:  LW        V0, 88 (S0)
   18:  ADDU      V1, V1, V0
   1C:  BGEZ      V1, .o30
   20:  SW        V1, A8 (S0)
   24:  LUI       V0, 2
   28:  BEQ       R0, R0, .o40
   2C:  ADDU      V0, V1, V0
        .o30
   30:  LUI       A0, 2
   34:  SLT       V0, A0, V1
   38:  BEQ       V0, R0, .o44
   3C:  SUBU      V0, V1, A0
        .o40
   40:  SW        V0, A8 (S0)
        .o44
   44:  LW        V1, AC (S0)
   48:  LW        V0, 8C (S0)
   4C:  ADDU      V1, V1, V0
   50:  BGEZ      V1, .o64
   54:  SW        V1, AC (S0)
   58:  LUI       V0, 2
   5C:  BEQ       R0, R0, .o74
   60:  ADDU      V0, V1, V0
        .o64
   64:  LUI       A0, 2
   68:  SLT       V0, A0, V1
   6C:  BEQ       V0, R0, .o78
   70:  SUBU      V0, V1, A0
        .o74
   74:  SW        V0, AC (S0)
        .o78
   78:  LW        V1, B0 (S0)
   7C:  LW        V0, 90 (S0)
   80:  ADDU      V1, V1, V0
   84:  BGEZ      V1, .o98
   88:  SW        V1, B0 (S0)
   8C:  LUI       V0, 2
   90:  BEQ       R0, R0, .oA8
   94:  ADDU      V0, V1, V0
        .o98
   98:  LUI       A0, 2
   9C:  SLT       V0, A0, V1
   A0:  BEQ       V0, R0, .oAC
   A4:  SUBU      V0, V1, A0
        .oA8
   A8:  SW        V0, B0 (S0)
        .oAC
   AC:  LW        V1, B4 (S0)
   B0:  LW        V0, 94 (S0)
   B4:  ADDU      V1, V1, V0
   B8:  BGEZ      V1, .oCC
   BC:  SW        V1, B4 (S0)
   C0:  LUI       V0, 2
   C4:  BEQ       R0, R0, .oDC
   C8:  ADDU      V0, V1, V0
        .oCC
   CC:  LUI       A0, 2
   D0:  SLT       V0, A0, V1
   D4:  BEQ       V0, R0, .oE0
   D8:  SUBU      V0, V1, A0
        .oDC
   DC:  SW        V0, B4 (S0)
        .oE0
   E0:  LW        A0, 84 (S0)
   E4:  JAL       8011BC1C
   E8:  LW        A1, A8 (S0)
   EC:  LW        A0, 84 (S0)
   F0:  JAL       8011BC34
   F4:  LW        A1, AC (S0)
   F8:  LW        A0, 84 (S0)
   FC:  JAL       8011BC4C
  100:  LW        A1, B0 (S0)
  104:  LW        A0, 84 (S0)
  108:  JAL       8011BC64
  10C:  LW        A1, B4 (S0)
  110:  LW        RA, 14 (SP)
  114:  LW        S0, 10 (SP)
  118:  DADDU     V0, R0, R0
  11C:  JR        RA
  120:  ADDIU     SP, SP, 18
}

% Move Star Spirits' Ship
#new:Script $Script_FurnitureAnim_Ship
{
 % Init vars
Set *Var[1] 0
Set *Var[2] 0
Loop
	% Var1 = Y Offset
	% Var2 = Going Down/Up Bool (False = Up)
	If *Var[2] == 0 % Go Up
		Add 	*Var[1] 1
		Set 	*Var[2] 0 % Go Up
		If *Var[1] > 3 % Top Cap
			Set *Var[1] 2
			Set *Var[2] 1 % Go Down
		EndIf
	Else % Go Down
		Sub 	*Var[1] 1
		Set 	*Var[2] 1 % Go Down
		If *Var[1] < 0
			Set *Var[1] 1
			Set *Var[2] 0 % Go Up
		EndIf
	EndIf
	Wait	8
	Call	TranslateGroup ( ~Model:FU8 0 *Var[1] 0 )
EndLoop
Return
End
}

#new:VectorList $VectorList_cs1
{
%~Path3d:cs1_patch
-225.000000 -72.000000 -443.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
}

#new:VectorList $VectorList_cs2
{
%~Path3d:cs2_patch
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
}

#new:VectorList $VectorList_cs3
{
%~Path3d:cs3_patch
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
}

#new:VectorList $VectorList_cs4
{
%~Path3d:cs4_patch
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
}

#new:VectorList $VectorList_cs5
{
%~Path3d:cs5_patch
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
}

#new:VectorList $VectorList_cs6
{
%~Path3d:cs6_patch
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
}

#new:VectorList $VectorList_cs7
{
%~Path3d:cs7_patch
-194.000000 -72.000000 -484.000000
-219.000000 -72.000000 -471.000000
-225.000000 -72.000000 -442.000000
-218.000000 -72.000000 -412.000000
-185.000000 -72.000000 -396.000000
-118.000000 -72.000000 -396.000000
-86.000000 -72.000000 -410.000000
-73.000000 -72.000000 -443.000000
-79.000000 -72.000000 -469.000000
-104.000000 -72.000000 -487.000000
-148.000000 -72.000000 -506.000000
-194.000000 -72.000000 -484.000000
}

#new:Script $Script_FurnitureAnim_CrystalStars
{
Exec $Script_FurnitureAnim_CrystalStar1
Exec $Script_FurnitureAnim_CrystalStar2
Exec $Script_FurnitureAnim_CrystalStar3
Exec $Script_FurnitureAnim_CrystalStar4
Exec $Script_FurnitureAnim_CrystalStar5
Exec $Script_FurnitureAnim_CrystalStar6
Exec $Script_FurnitureAnim_CrystalStar7%/
Return
End
}

#new:Script $Script_FurnitureAnim_CrystalStar1
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs1 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs1 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar2
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs2 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs2 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar3
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs3 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs3 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar4
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs4 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs4 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar5
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs5 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs5 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar6
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs6 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs6 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

#new:Script $Script_FurnitureAnim_CrystalStar7
{
	Loop
		Call  LoadPath  ( 200` $VectorList_cs7 C .Easing:Linear )
		Loop
			Call  GetNextPathPos
			Call  TranslateModel    ( ~Model:f_9_cs7 *Var[1] -68` *Var[3] )
			Wait  1`
			If  *Var[0]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	Wait	1
	EndLoop
	Return
	End
	Return
	End
}

% Rotate N64 model
#new:Script $Script_FurnitureAnim_N64
{
Loop
	Call	MakeLerp    	( 0` 360` 450` .Easing:Linear )
	Label	0
	Call	UpdateLerp
	Call	RotateGroup		( ~Model:FU13 *Var[0] 0 -1 0 )
	Wait	1 
	If	*Var[1] ==  .True
		Goto	0
	EndIf
EndLoop
Return
End
}

#new:Script $Script_SetAllFurniture
{
% Disable Everything
Call	EnableGroup ( ~Model:Furniture .False )
Call 	ModifyColliderFlags ( .False ~Collider:f_1 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_2 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_4 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_5 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_7 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_10 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_11 7FFFFE00 )
Call 	ModifyColliderFlags ( .False ~Collider:f_12 7FFFFE00 )
Call 	SetZoneEnabled ( ~Zone:speedy1 .False )
Call 	ModifyColliderFlags ( .False ~Collider:f_13 7FFFFE00 )
Call	SetNpcPos 	( 7 0 -1000` 0 )
Call	SetNpcPos 	( 9 0 -1000` 0 )
Call	SetNpcPos 	( A 0 -1000` 0 )
% Enable everything already buyed
If *Flag_Furniture1 == .True
	Call	EnableGroup ( ~Model:FU1 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_1 7FFFFE00 )
EndIf
If *Flag_Furniture2 == .True
	Call	EnableGroup ( ~Model:FU2 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_2 7FFFFE00 )
EndIf
If *Flag_Furniture3 == .True
	Call	EnableGroup ( ~Model:FU3 .True )
EndIf
If *Flag_Furniture4 == .True
	Call	EnableGroup ( ~Model:FU4 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_4 7FFFFE00 )
EndIf
If *Flag_Furniture5 == .True
	Call	EnableGroup ( ~Model:FU5 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_5 7FFFFE00 )
EndIf
If *Flag_Furniture6 == .True
	Call	EnableGroup ( ~Model:FU6 .True )
EndIf
If *Flag_Furniture7 == .True
	Call	EnableGroup ( ~Model:FU7 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_7 7FFFFE00 )
EndIf
If *Flag_Furniture8 == .True
	Call	EnableGroup ( ~Model:FU8 .True )
EndIf
If *Flag_Furniture9 == .True
	Call	EnableGroup ( ~Model:FU9 .True )
EndIf
If *Flag_Furniture10 == .True
	Call	EnableGroup ( ~Model:FU10 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_10 7FFFFE00 )
	Call	SetNpcPos 	( 7 -147` -164` -395` ) % Star Rod
	Call	SetNpcPos 	( 9 -159` -221` -377` ) % Sticker 1
	Call	SetNpcPos 	( A -133` -213` -377` ) % Sticker 2
EndIf
If *Flag_Furniture11 == .True
	Call	EnableGroup ( ~Model:FU11 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_11 7FFFFE00 )
EndIf
If *Flag_Furniture12 == .True
	Call	EnableGroup ( ~Model:FU12 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_12 7FFFFE00 )
	Call 	SetZoneEnabled ( ~Zone:speedy1 .True )
EndIf
If *Flag_Furniture13 == .True
	Call	EnableGroup ( ~Model:FU13 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_13 7FFFFE00 )
EndIf
Return
End
}

% Pan faster when the player enter Speedy Spin's secret room
#new:Script $Script_FasterCam
{
	Call	SetCamSpeed ( .Cam:Default *Fixed[20.0] )
	Return
	End
}

% Display all pieces of furnitures already buyed plus one
% furniture shadow, reads var1
#new:Script $Script_ShowFurniture_CantBeBuyed
{
% Disable Everything
Call	EnableGroup ( ~Model:Furniture .False )
% Hide Star Rod and Stickers Npcs
Call	SetNpcPos 	( 7 0 -1000` 0 )
Call	SetNpcPos 	( 9 0 -1000` 0 )
Call	SetNpcPos 	( A 0 -1000` 0 )
% Enable everything already buyed
If *Flag_Furniture1 == .True
	Call	EnableGroup ( ~Model:FU1 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_1 7FFFFE00 )
EndIf
If *Flag_Furniture2 == .True
	Call	EnableGroup ( ~Model:FU2 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_2 7FFFFE00 )
EndIf
If *Flag_Furniture3 == .True
	Call	EnableGroup ( ~Model:FU3 .True )
EndIf
If *Flag_Furniture4 == .True
	Call	EnableGroup ( ~Model:FU4 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_4 7FFFFE00 )
EndIf
If *Flag_Furniture5 == .True
	Call	EnableGroup ( ~Model:FU5 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_5 7FFFFE00 )
EndIf
If *Flag_Furniture6 == .True
	Call	EnableGroup ( ~Model:FU6 .True )
EndIf
If *Flag_Furniture7 == .True
	Call	EnableGroup ( ~Model:FU7 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_7 7FFFFE00 )
EndIf
If *Flag_Furniture8 == .True
	Call	EnableGroup ( ~Model:FU8 .True )
EndIf
If *Flag_Furniture9 == .True
	Call	EnableGroup ( ~Model:FU9 .True )
EndIf
If *Flag_Furniture10 == .True
	Call	EnableGroup ( ~Model:FU10 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_10 7FFFFE00 )
	Call	SetNpcPos 	( 7 -147` -164` -395` ) % Star Rod
	Call	SetNpcPos 	( 9 -159` -221` -377` ) % Sticker 1
	Call	SetNpcPos 	( A -133` -213` -377` ) % Sticker 2
EndIf
If *Flag_Furniture11 == .True
	Call	EnableGroup ( ~Model:FU11 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_11 7FFFFE00 )
EndIf
If *Flag_Furniture12 == .True
	Call	EnableGroup ( ~Model:FU12 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_12 7FFFFE00 )
EndIf
If *Flag_Furniture13 == .True
	Call	EnableGroup ( ~Model:FU13 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_13 7FFFFE00 )
EndIf
% Show Shadow
Switch *Var[1]
	Case == 0 % Candy Cane
		Call EnableGroup ( ~Model:FL1 .True )
	Case == 1 % Sarcophagus
		Call EnableGroup ( ~Model:FL2 .True )
	Case == 2 % Painting
		Call EnableGroup ( ~Model:FL3 .True )
	Case == 3 % Jack
		Call EnableGroup ( ~Model:FL4 .True )
	Case == 4 % Statue
		Call EnableGroup ( ~Model:FL5 .True )
	Case == 5 % Flowers
		Call EnableGroup ( ~Model:FL6 .True )
	Case == 6 % Snowman
		Call EnableGroup ( ~Model:FL7 .True )
	Case == 7 % Ship
		Call EnableGroup ( ~Model:FL8 .True )
	Case == 8 % Stars
	Case == 9 % HBD
	Case == 10` % Exor
	Case == 11` % M&L
	Case == 12` % Late 90s
EndSwitch
Return
End
}

% Display all pieces of furnitures already buyed plus the one
% available to be buyed, reads var1
#new:Script $Script_ShowFurniture_CanBeBuyed
{
% Disable Everything
Call	EnableGroup ( ~Model:Furniture .False )
% Hide Star Rod and Stickers Npcs
Call	SetNpcPos 	( 7 0 -1000` 0 )
Call	SetNpcPos 	( 9 0 -1000` 0 )
Call	SetNpcPos 	( A 0 -1000` 0 )
% Enable everything already buyed
If *Flag_Furniture1 == .True
	Call	EnableGroup ( ~Model:FU1 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_1 7FFFFE00 )
EndIf
If *Flag_Furniture2 == .True
	Call	EnableGroup ( ~Model:FU2 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_2 7FFFFE00 )
EndIf
If *Flag_Furniture3 == .True
	Call	EnableGroup ( ~Model:FU3 .True )
EndIf
If *Flag_Furniture4 == .True
	Call	EnableGroup ( ~Model:FU4 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_4 7FFFFE00 )
EndIf
If *Flag_Furniture5 == .True
	Call	EnableGroup ( ~Model:FU5 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_5 7FFFFE00 )
EndIf
If *Flag_Furniture6 == .True
	Call	EnableGroup ( ~Model:FU6 .True )
EndIf
If *Flag_Furniture7 == .True
	Call	EnableGroup ( ~Model:FU7 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_7 7FFFFE00 )
EndIf
If *Flag_Furniture8 == .True
	Call	EnableGroup ( ~Model:FU8 .True )
EndIf
If *Flag_Furniture9 == .True
	Call	EnableGroup ( ~Model:FU9 .True )
EndIf
If *Flag_Furniture10 == .True
	Call	EnableGroup ( ~Model:FU10 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_10 7FFFFE00 )
	Call	SetNpcPos 	( 7 -147` -164` -395` ) % Star Rod
	Call	SetNpcPos 	( 9 -159` -221` -377` ) % Sticker 1
	Call	SetNpcPos 	( A -133` -213` -377` ) % Sticker 2
EndIf
If *Flag_Furniture11 == .True
	Call	EnableGroup ( ~Model:FU11 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_11 7FFFFE00 )
EndIf
If *Flag_Furniture12 == .True
	Call	EnableGroup ( ~Model:FU12 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_12 7FFFFE00 )
EndIf
If *Flag_Furniture13 == .True
	Call	EnableGroup ( ~Model:FU13 .True )
	Call 	ModifyColliderFlags ( .True ~Collider:f_13 7FFFFE00 )
EndIf
% Show piece of furniture about to be buyed
Switch *Var[1]
	Case == 0 % Candy Cane
		Call EnableGroup ( ~Model:FU1 .True )
	Case == 1 % Sarcophagus
		Call EnableGroup ( ~Model:FU2 .True )
	Case == 2 % Painting
		Call EnableGroup ( ~Model:FU3 .True )
	Case == 3 % Jack
		Call EnableGroup ( ~Model:FU4 .True )
	Case == 4 % Statue
		Call EnableGroup ( ~Model:FU5 .True )
	Case == 5 % Flowers
		Call EnableGroup ( ~Model:FU6 .True )
	Case == 6 % Snowman
		Call EnableGroup ( ~Model:FU7 .True )
	Case == 7 % Ship
		Call EnableGroup ( ~Model:FU8 .True )
	Case == 8 % Stars
		Call EnableGroup ( ~Model:FU9 .True )
	Case == 9 % HBD
		Call EnableGroup ( ~Model:FU10 .True )
		Call	SetNpcPos 	( 7 -147` -164` -395` ) % Star Rod
		Call	SetNpcPos 	( 9 -159` -221` -377` ) % Sticker 1
		Call	SetNpcPos 	( A -133` -213` -377` ) % Sticker 2
	Case == 10` % Exor
		Call EnableGroup ( ~Model:FU11 .True )
	Case == 11` % M&L
		Call EnableGroup ( ~Model:FU12 .True )
	Case == 12` % Late 90s
		Call EnableGroup ( ~Model:FU13 .True )
EndSwitch
Return
End
}
	
#new:Script $Script_SetCurrentPipe % Set Current Pipe Color regarding current Pit Mode
{
	% Deactivate All Pipes
	Call     EnableModel 	( ~Model:dokan_e2 .False )
	Call     EnableModel 	( ~Model:dokan_e2_blue .False )
	Call     EnableModel 	( ~Model:dokan_e2_red .False )
	% Activate New One
	If *Flag_Mode_Classic == .False
		Call     EnableModel 	( ~Model:dokan_e2 .True ) 		% Green = Normal Mode
	Else
		If *Flag_Mode_Rogue == .True
			Call     EnableModel 	( ~Model:dokan_e2_blue .True ) 	% Blue = Roguelike
		Else
			If *Flag_Mode_Endless == .True
				Call     EnableModel 	( ~Model:dokan_e2_red .True )		% Red = Endless Mode
			EndIf
		EndIf
	EndIf
	Return
	End
}
	
#new:Script $Script_SetSkull % Put a Dry Bones head when Hard Difficulty is activated
{
	Switch *PitDifficulty
		Case == 0 % Normal
			Call	EnableModel ( ~Model:skull .False )
			Call	EnableModel ( ~Model:skull_red .False )
		Case == 1 % Hard
			Call	EnableModel ( ~Model:skull .True )
			Call	EnableModel ( ~Model:skull_red .False )
		Case == 2 % Very-Hard
			Call	EnableModel ( ~Model:skull .False )
			Call	EnableModel ( ~Model:skull_red .True )
	EndSwitch
	Return
	End
}
	
	#new:Function $Function_ResetGainedCoins
{
	PUSH 	A1
	ADDIU	A1, R0, 0
	SAH		A1, 8010F2AA
	POP 	A1
	JR 		RA
	NOP
}
	
%This script set the next events to load in the pit
#new:Script $Script_SetEvents
{
	Set *EventCount 0
	If *Flag_Goombario == .False % only after having saved goombario
		Return
	EndIf
	% Getting the times an Event can be triggered in the Next playthrough
	Call RandInt ( 100` *Var[0] )
	Switch *Var[0]
		Case <= 35` % / 35% chance
			Set *EventCount 3
		Case <= 90` % / 55% chance
			Set *EventCount 2
		Case <= 100` % / 10% chance
			Set *EventCount 1
	EndSwitch
	Return
	End
}

#new:Script $Script_StarShrine_LightAnim
{
	Loop
		% >>>
		Call    MakeLerp    	( 0 13` 25` .Easing:CosIn )
		Loop
			Call     UpdateLerp
			Call     TranslateModel ( ~Model:DoorLight *Var[0] 0 0 )
			Wait     1
			If  *Var[1]  ==  .False
				BreakLoop
			EndIf
		EndLoop
		% <<<
		Call    MakeLerp    	( 13` 0 25` .Easing:CosIn )
		Loop
			Call     UpdateLerp
			Call     TranslateModel ( ~Model:DoorLight *Var[0] 0 0 )
			Wait     1
			If  *Var[1]  ==  .False
				BreakLoop
			EndIf
		EndLoop
	EndLoop
	Return
	End
}

% Check if a New Star Spirit is available
#new:Script $Script_CheckStarShrine
{
Call	EnableModel ( ~Model:DoorLight .False )
Call 	$ReadAddress ( 8035612E 1 *Var[0] .False .False ) % load star points
% Which Star Spirit will be unlocked now
Switch  *StarSpirits
	Case == 0 % The player doesn't have any star spirits
		If *Var[0] >= 50` % Star Points
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 1
		If *Var[0] >= 100`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 2
		If *Var[0] >= 200`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 3
		If *Var[0] >= 350`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 4
		If *Var[0] >= 500`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 5
		If *Var[0] >= 650`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 6
		If *Var[0] >= 800`
			Call	EnableModel ( ~Model:DoorLight .True )
		EndIf
	Case == 7
EndSwitch
Return
End
}

#new:Script $Script_MakeEntities
{
	Call     MakeEntity  	( .Entity:SavePoint ~Vec4d:SaveBlock 80000000 )
	Call     MakeEntity 	( .Entity:Signpost ~Vec4d:SignA 80000000 )
	Call     AssignScript 	( $Script_ReadSign_pt00 )
	Call     MakeEntity 	( .Entity:GiantChest ~Vec4d:Entity_GiantChest 80000000 )
	Return
	End
}

#new:Script $BedTrigger
{
    Set  *Var[9]  *Var[1] 
    Set  *Var[A]  *Var[2] 
	Set  *Var[B]  *Var[3] 
    If  *Var[1]  ==  0
		Set  *Var[8]  *Var[0] 
    EndIf
	Call     DisablePlayerInput	( .True )
	Call     SpeakToPlayer 	( 00000001 00AE0004 00AE0001 00000000 $BedString ) 
    Call     ShowChoice  	( 001E0006 ) % Take a nap Not now 
    Wait     3
	If  *Var[0]  ==  1
		Call    ContinueSpeech    		( 00000001 00AE0004 00AE0001 00000000 $CloseDialogBubble )
		Call     DisablePlayerInput	( .False )
   		Return
	EndIf
	Call    ContinueSpeech    		( 00000001 00AE0004 00AE0001 00000000 $CloseDialogBubble )
	Call	DisablePlayerPhysics 	( .True )
	Call	GetCurrentPartnerID 	( *Var[0] )
	If  *Var[0]  !=  0
		Call     $DespawnPartner ( *Var[A] ) %This Function make your partner despawn
		Wait     20` 
	EndIf
	ExecWait $Script_BedAnimation %Whole Animation Script  
	Thread % Fade In/Out FX
		Call     MakeLerp    	( 00000000 000000FF 0000003C 00000000 ) %Mario Animation Related 1
		Label    .False
		Call     UpdateLerp
		Call     $Function_BedAnimation ( 00000003 *Var[0] ) %Mario Animation Related 2
		Wait     1
		If  *Var[1]  ==  1
			Goto     .False
		EndIf
		Call     FullyRestoreHPandFP
		Call     FullyRestoreSP
		Call     $RespawnPartner ( *Var[A] )
		Wait     45`
		Call     MakeLerp    	( 000000FF 00000000 0000001E 00000000 )
		Label    .True
		Call     UpdateLerp
		Call     $Function_BedAnimation ( 00000000 *Var[0] ) % Turn off, black screen after sleeping
		Wait     1
		If  *Var[1]  == 1
			Goto     .True 
		EndIf
	EndThread
	Wait     105`
	ExecWait $WakeUp % Make Mario back to his normal state after sleeping
	Call     DisablePlayerPhysics 	( .False )
	Call	 DisablePlayerInput	( .False )
	Return
	End
}
  
  
  #new:Script $WakeUp
{
    Exec     $SetTrack 
	Call     SetPlayerAnimation 	( 00010002 )
	Call     HidePlayerShadow 		( .False )
    Call     802D2520 ( 0001007 00000000 00000000 00000000 00000000 00000000 )
    Return
    End
}
   
   #new:Script $SetTrack
{
	Call     SetMusicTrack 	( .Cam:Default .Song:ToadTownTunnels .Cam:Default 8 ) % MusicPlayer ID, TrackID, Variation, Volume
	Return
	End
}
  
	#new:Script $Script_BedAnimation %Mario goes to bed Script
{
	Exec     $BedTrack 
	Thread % Move Camera towards the bed
		% All NPCs yaws get swapped when the camera moves, i dunno why tho :shrunk:
		Wait	20`
		Call     SetCamType  	( .Cam:Default 00000004 .False )
		Call     SetCamPitch 	( .Cam:Default 32` -9` )
		Call     SetCamDistance ( .Cam:Default 352` )
		Call     SetCamPosA  	( .Cam:Default *Fixed[50.0] *Fixed[-92.0] )
		Call     SetCamPosB  	( .Cam:Default *Fixed[197.0] *Fixed[-218.0] ) % camID CameraXPos CameraZPos
		Call     SetCamPosC  	( .Cam:Default 0 *Fixed[-277.0] ) % camera y pos
		Call     PanToTarget 	( .Cam:Default .Easing:Linear 00000001 )
	EndThread
	Call  	SetPlayerSpeed    ( *Fixed[3.0] )
	Set 	*Var[0] 5	% entry ID 
	Call    $Function_GetPos % GetEntryPos
	Call    PlayerMoveTo 		( *Var[1] *Var[3] 0 )
	Call    InterpPlayerYaw 	( -90` 0 )
	Call    HidePlayerShadow 	( .True )
	Call    SetPlayerAnimation 	( 00010002 )
	Call    802D286C ( 00000800 )
	Call    802D2520 ( 00010002 00000005 00000007 00000001 00000001 00000000 )
	Wait	61`
	Call    SetPlayerAnimation 	( 0008001D )
	Thread % Set camera to normal position
		Wait	60`
		Call	ResetCam ( .Default *Fixed[4.0] )
	EndThread
	Return
	End
}
  
	#new:Script $BedTrack
{
    Call     SetMusicTrack 	( .Cam:Default .Song:TakingRest 00000000 00000008 )
	Return
	End
}

	#new:Function $LoadLastPartner
{
	PUSH	RA, A1, A2, V0
	LAB 	A2, 803560D5 % Current Partner % Value to Set in Var
	LIO 	A1, *Var[0]
	JAL 	~Func:set_variable
	RESERVED
	JPOP	RA, A1, A2, V0
}
	
#string $test
{
[STYLE:RIGHT]hola[WAIT][END]
}

#new:Script $P1Trigger % I use this Script mostly to just test a bunch of stuff
{
	Exec	$Classic_AllChestsOpened
	Return
	Switch *PitMapID
		Case < 9
			Set *PitMapID 9
		Case < 19`
			Set *PitMapID 19`
		Case < 29`
			Set *PitMapID 29`
		Case < 39`
			Set *PitMapID 39`
		Case < 49`
			Set *PitMapID 49`
		Case < 59`
			Set *PitMapID 59`
		Case < 69`
			Set *PitMapID 69`
		Case < 79`
			Set *PitMapID 79`
		Case < 89`
			Set *PitMapID 89`
		Case < 99`
			Set *PitMapID 99`
		Case >= 99`
			Set *PitMapID 0
	EndSwitch
	If *PitMapID == 0
		Call PlaySound ( 21D ) % Error
	Else
		Call PlaySound ( .Sound:BooAppear )
	EndIf
	Return
	End
}

#new:Script $Classic_AllChestsOpened
{
   Set		*Flag_HPDrain .True
   Set		*Flag_DamageDodgeA .True
   Set		*Flag_DamageDodgeB .True
   Set		*Flag_LastStand .True
   Set		*Flag_PowerBounce .True
   Set		*Flag_MegaRush .True
   Set		*Flag_AllorNothing .True
   Set		*Flag_PUpDDown .True
   Set		*Flag_DDownJump .True
   Set		*Flag_PowerRush .True
   Set		*Flag_DoubleDip .True
   Set		*Flag_PowerQuake .True
   Set		*Flag_QuakeHammer .True
   Set		*Flag_QuickChange .True
   Set		*Flag_PowerPlusA .True
   Set		*Flag_PowerPlusB .True
   Set		*Flag_PDownDUp .True
   Set		*Flag_DefendPlus .True
   Set		*Flag_CloseCall .True
   Set		*Flag_FlowerFinder .True
   Set		*Flag_HeartFinder .True
   Set		*Flag_FlowerSaverA .True
   Set		*Flag_FlowerSaverB .True
   Set		*Flag_PowerJump .True
   Set		*Flag_DizzyAttack .True
   Set		*Flag_Multibounce .True
   Set		*Flag_ZapTap .True
   Set		*Flag_DodgeMaster .True
   Set		*Flag_HappyFlowerA .True
   Set		*Flag_HappyFlowerB .True
   Set		*Flag_DeepFocusA .True
   Set		*Flag_DeepFocusB .True
   Set		*Flag_DeepFocusC .True
   Set		*Flag_JumpCharge .True
   Set		*Flag_SJumpChg .True
   Set		*Flag_FeelingFine .True
   Set		*Flag_IcePower .True
   Set		*Flag_HappyHeartA .True
   Set		*Flag_HappyHeartB .True
   Set		*Flag_FireShield .True
   Set		*Flag_GroupFocus .True
   Set		*Flag_ShrinkStomp .True
   Set		*Flag_TripleDip .True
   Set		*Flag_MegaQuake .True
   Set		*Flag_DizzyStomp .True
   Set		*Flag_SleepStomp .True
   Set		*Flag_PowerSmash .True
   Set		*Flag_DDownPound .True
   Set		*Flag_SpikeShield .True
   Set		*Flag_SmashCharge .True
   Set		*Flag_Refund .True
   Set		*Flag_MegaJump .True
   Set		*Flag_MegaSmash .True
   Set		*Flag_Hammer_Throw .True
   Set		*Flag_Pretty_Lucky .True
   Set		*Flag_Chill_Out .True
   Set		*Flag_Money_Money .True
   Set		*Flag_PayOff .True
   Set		*Flag_Spin_Smash .True
   %Set		*Flag_Runaway_Pay .True % unused badge
   Set		*Flag_SSmashChg .True
   Set		*Flag_Peekaboo .True
   Set		*Flag_LuckyDay .True
   Set		*Flag_SlowGo .True
   % Partners
   Set		*Flag_Goombario .True
   Set		*Flag_Kooper .True
   Set		*Flag_Bombette .True
   Set		*Flag_Parakarry .True
   Set		*Flag_Bow .True
   Set		*Flag_Watt .True
   Set		*Flag_Sushie .True
   Set		*Flag_Lakilester .True
   Return
   End
}
	
	%%	
	
#new:Function $Function_MiscHooksHP
{
LABU T0, 8010F293 % Load Max HP in T0
ADDIU T0, T0, 5 % Add 5 to T0
SAB T0, 8010F294 % Store T0 in Max HP 1
SAB T0, 8010F293 % Store T0 in Max HP 2
SAB T0, 8010F292 % Store T0 in Current HP
%.FP
/%LABU T0, 8010F296 % Load Max FP in T0
ADDIU T0, T0, 5 % Add 5 to T0
SAB T0, 8010F297 % Store T0 in Max FP 1
SAB T0, 8010F296 % Store T0 in Max FP 2
SAB T0, 8010F295 % Store T0 in Current FP%/
%.BP
/%LABU T0, 8010F298 % Load Max BP in T0
ADDIU T0, T0, 3 % Add 3 to T0
SAB T0, 8010F298 % Store T0 in Max BP%/
JR RA
ADDIU     V0, R0, 2
}

%%
% NPCs
%%

#new:NpcGroupList $NpcGroups
{
00000001 $NpcGroup_Cheato 	37020000
00000001 $NpcGroup_Merlee 	00000000
00000001 $NpcGroup_Fishmael	00000000
00000001 $NpcGroup_Oaklie	00000000
00000001 $NpcGroup_Chuck	00000000
00000001 $NpcGroup_Ruby	00000000
%00000001 $NpcGroup_ParadeMario 00000000 unused
00000003 $NpcGroup_StarRod 00000000
00000000 00000000 00000000 
}

#new:NpcGroupList $NpcGroup_OnlyCheato
{
00000001 $NpcGroup_Cheato 	00000000
00000000 00000000 00000000 
}

#new:NpcGroup $NpcGroup_Ruby
{
0000000B $BlankSettings 0.0 -1000.0 0.0
00000020 $Script_Init_SR 00000000 00000000 00000000 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 
007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 007F1504 
00000000 00000000 00000000 00000000
}

/%#new:NpcGroup $NpcGroup_ParadeMario % unused
{
00000007 $BlankSettings ~Vec3f:NPC_ParadeMario
00A40D01 00000000 00000000 00000000 00000000 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 
00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 00E60000 
00000000 00000000 00000000 00000000
}%/

#new:NpcGroup $NpcGroup_StarRod
{
00000007 $BlankSettings ~Vec3f:StarRod
00000020 $Script_Init_SR 00000000 00000000 00000000 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 
00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 00D30000 
00000000 00000000 00000000 00000000
%
00000009 $BlankSettings ~Vec3f:sticker1
00000001 $Script_Init_Sticker 00000000 00000000 0000010E 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 
00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 00F10000 
00000000 00000000 00000000 00000000
%
0000000A $BlankSettings ~Vec3f:sticker2
00000001 $Script_Init_Sticker 00000000 00000000 0000010E 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 
00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 00F10001 
00000000 00000000 00000000 00000000
}

#new:Script $Script_Init_SR
{
Call	EnableNpcShadow ( .Npc:Self .False )
Return
End
}

#new:Script $Script_Init_Sticker
{
Call	EnableNpcShadow ( .Npc:Self .False )
Call    BindNpcAux	( .Npc:Self $Script_StickerFX )
Return
End
}

#new:Script $Script_StickerFX
{
Loop
	Call	GetSelfNpcID ( *Var[0] )
	Set	*Var[1] 75`
	If *Var[0] == 9 % sticker1
		Call	SetNpcRotation ( *Var[0] 0 0 -11` )
		Call 	RandInt ( 225` *Var[0] )
	Else % A % sticker2
		Call	SetNpcRotation ( *Var[0] 0 0 10` )
		Call 	RandInt ( 225` *Var[0] )
	EndIf
	Add		*Var[1] *Var[0]
	Wait 	*Var[1]
	Call    802CFD30 ( .Npc:Self 5 6 5 1 ) % npcID, fxID, fxID2, speed, delay
EndLoop
Return
End
}

/% Dry Bones Head %/
%00530010 00530010 00530010 00530010 00530010 00530010 00530010 00530010 
%00530010 00530010 00530010 00530010 00530010 00530010 00530010 00530010 

/% Goombario %/
%00010000 00010000 00010000 00010000 00010000 00010000 00010000 00010000 
%00010000 00010000 00010000 00010000 00010000 00010000 00010000 00010000 

%%
% Cheato
%%

#new:NpcGroup $NpcGroup_Cheato
{
00000001 $Cheato_Settings ~Vec3f:CheatoSpawn
00A40D01 $Script_Init_Cheato 00000000 00000000 00000000 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 
00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 00AE0001 
00000000 00000000 00000000 $Tattle_Cheato
}

#new:NpcSettings $Cheato_Settings
{
00000000 00200025 00000000 00000000 00000000 00000000 $Script_SetPipeFX 00000000 % You can attach an script to be always running there
00000000 00000000 00630000 
}

#new:NpcSettings $BlankSettings
{
00000000 00200018 00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00630000 
}

#new:Script $Script_SetPipeFX % Set some sparkles in the pipe if mario currently have coins losted inside the pit
{
	Call	$Function_LoadLostedCoins % Load Losted Coins in *Var[0]
	If	*Var[0] != 0
		Label   Start
		Call    PlayEffect  	( ~FX:SmallGoldSparkle -166` -200` -250` *Fixed[1.1] 0 0 0 0 0 0 0 0 )
		Wait    25`
		Goto	Start
	EndIf
	Return
	End
}

#new:Script $Script_Init_Cheato
{
	Call     BindNpcInteract	( .Npc:Self $Script_Interact )
	Return
	End
}

#new:Script $Script_Interact
{
	/%ExecWait $Script_Check_TeachStuff % testing
	Return%/
	% After Intro
	If *Flag_Goombario == .False
		Call $ReadAddress ( 8010F2B0 1 *Var[0] .False .False ) % load losted coins
		If *Var[0] == 0
			Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Cheato_Intro_GL )
		Else
			Call	SetMessageValue ( *LostCoinsMapID 2 )
			Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Cheato_Intro_GL_LostCoins )
		EndIf
		Return
	Else
		% When Meeting Oaklie and Fishmael
		If *Flag_MeetingAtLobby == .False
			% The player has talked with everyone?
			Set *Var[0] *Flag_Fishmael_1stTime_Talk
			Add *Var[0] *Flag_Oaklie_1stTime
			Call GetNpcVar ( 8 5 *Var[1] ) % chuck
			Add *Var[0] *Var[1]
			If *Var[0] < 3
				Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_4 )
				Return
			EndIf
			% You have talked to everyone
			ExecWait $Script_ZoomIn_Camera
			Exec	$Script_Cheato_Meeting1 *Var[A]
			Exec	$SkipCutscene_Cheato_Meeting1
			Loop
				DoesScriptExist ( *Var[A] *Var[0] )
				If *Var[0] == .False
					BreakLoop
				EndIf
				Wait 1
			EndLoop
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
			Set 	*GameByte[000] 81  % to being able to pause the game
			Label	ActivateRogue
			Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_AskActivateRogue )
			Call    ShowChoice  ( 001E001D ) % yes no
			Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
			If	*Var[0] == 1 % no
				% Are you sure?
				Label	AreYouSure
				Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_8 )
				Call    ShowChoice  ( 001E001D ) % yes no
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				If	*Var[0] == 1 % no
					Goto ActivateRogue
				EndIf
			Else % yes
				If *Flag_RoguelikeInfoLearned == .False
					Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_AskHearRules )
					Call    ShowChoice  ( 001E001D ) % yes no
					If	*Var[0] == 1 % no
						Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
						Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_9 )
					Else % yes
						Set		*Flag_RoguelikeInfoLearned	.True
						Call    ContinueSpeech ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_RogueAbout )
						Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_RogueAbout2 )
						Call    ShowChoice    ( 001E001D ) % yes no
						Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
						If	*Var[0] == 1 % no
							Goto AreYouSure
						EndIf
					EndIf
				EndIf
				% Activate Roguelike Mode
				SetF	*Var[0] *Fixed[25.0]  % speed
				SetF	*Var[1] *Fixed[255.0] % fully dark
				ExecWait $Script_FadeScreenOut
				Exec	$Script_SetCurrentPipe
				Call    PlaySound   	( 208E ) % Pipe Spawning Sound
				Thread % Fade Screen Brightness
					Wait	10`
					SetF	*Var[0] *Fixed[25.0] % speed
					SetF	*Var[1] *Fixed[5.0]  % fully bright
					ExecWait $Script_FadeScreenIn
				EndThread
				Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
				Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
				Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
				Set *MapVar[0] 1 % Roguelike
			EndIf
			Label	SetFlag
			Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_10 )
			Set		*Flag_MeetingAtLobby .True
			Set		*Flag_Cheev_Global_02 .True % challenge complete
			% The player can leave the room
			Call 	ModifyColliderFlags ( .False ~Collider:HideMerlee 7FFFFE00 )
			Call 	ModifyColliderFlags ( .False ~Collider:LockPipe 7FFFFE00 )
			Call 	ModifyColliderFlags ( .False ~Collider:LockSaveBlock 7FFFFE00 )
			Call 	ModifyColliderFlags ( .True ~Collider:Col0 7FFFFE00 ) % Left Exit
			Call 	ModifyColliderFlags ( .True ~Collider:bed 7FFFFE00 )
			Call    ResetCam    		( .Cam:Default *Fixed[4.0] ) % Reset Zoom
			Call 	GotoMap 	( "pt_00" C ) % ~Entry:AfterPrologue
			Wait    100`
			Return
		EndIf
	EndIf
	/%Call	StartBossBattle ( .Song:SpecialBattle ) % Testing Purposes
	Return%/
	ExecWait $Script_ZoomIn_Camera
	%% Classic Mode/Difficulty Flags works in the opposite way ( 0 == Yes , 1 == No)
	/% Why I didn't just used a Byte for the current mode? because I was a noob at the time
	and I didn't knew ModBytes was a thing lol, I never bothered to change that %/
	% Setting Current Mode String
	If *Flag_Mode_Classic == 0
		Call	SetMessageString ( $Var_Classic 0 )
	Else
		Call	SetMessageString ( $Var_Roguelike 0 )
	EndIf
	% Setting Current Difficulty String
	Switch *PitDifficulty
		Case == .Default % Normal
			Call	SetMessageString ( $Var_Normal 1 )
		Case == 1 % Hard
			Call	SetMessageString ( $Var_Hard 1 )
		Case == 2 % Very-hard
			Call	SetMessageString ( $Var_Veryhard 1 )
	EndSwitch
	% Load Coins losted
	Call	$Function_LoadLostedCoins % Load Losted Coins in *Var[0]
	If	*Var[0] != 0		% If Mario lost some coins in the pit
		Set		*Var[1]	*LostCoinsMapID
		Call	SetMessageValue ( *Var[1] 2 )
		% If Mario have coins lost inside the pit
		Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Welcome1-CoinsLosted )
	Else
		Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Welcome1 )
	EndIf
	If *Flag_Mode_Rogue == .True % is rogue active?
		Call    ShowChoice    ( $ChoiceRogueActive ) % Current Pit is Rogue
	Else
		Call    ShowChoice    ( $ChoiceClassicActive ) % Current Pit is Classic
	EndIf
	Switch *Var[0]
		Case == 0 % change pit modes
			If *Flag_Mode_Classic != 0 % set pit to classic
				% Mario already know what is classic mode about?
				If	*Flag_NormalInfoLearned == .True
					If *Flag_Mode_Classic == .True
						Set .CurrentMode 0 % Set MapVar[1] to 0
					EndIf
					Set *Flag_Mode_Classic 0 % Classic Mode Set
					Set *Flag_Mode_Rogue 0 % Roguelike Mode Deactivated
					Set *MapVar[0] 0 % Classic
					Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
					Jump $Script_Interact
				EndIf
				% if he don't know
				Set		*Flag_NormalInfoLearned	.True
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_ClassicAbout ) % This mode is about...
				Call    ShowChoice    	( 001E001D ) % yes no
				Call    ContinueSpeech    	( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						If *Flag_Mode_Classic == .True
							Call	CloseMessage
							SetF	*Var[0] *Fixed[25.0]  % speed
							SetF	*Var[1] *Fixed[255.0] % fully dark
							ExecWait $Script_FadeScreenOut
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
							Thread % Fade Screen Brightness
								Wait	10`
								SetF	*Var[0] *Fixed[25.0] % speed
								SetF	*Var[1] *Fixed[5.0]  % fully bright
								ExecWait $Script_FadeScreenIn
							EndThread
							Set .CurrentMode 0 % Set MapVar[1] to 1
							Set .LastModeActivated .CurrentMode % Set LastMode as Current Mode
						EndIf
						Set *Flag_Mode_Classic 0 % Classic Mode Set
						Set *Flag_Mode_Rogue 0 % Roguelike Mode Deactivated
						Set *MapVar[0] 0 % Classic
					Case == 1 % no
						Jump $Script_Interact
				EndSwitch
			Else % set pit to rogue
				If	*Flag_RoguelikeInfoLearned == .True
					If *Flag_Mode_Rogue != .True
						Set .CurrentMode 1 % Set MapVar[1] to 1
					EndIf
					Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
					Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
					Set *MapVar[0] 1 % Roguelike
					Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
					Jump $Script_Interact
				EndIf
				Set		*Flag_RoguelikeInfoLearned	.True
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout ) % This mode is about...
				Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout2 )
				Call    ShowChoice    ( 001E001D ) % yes no
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						If *Flag_Mode_Rogue != .True
							Call	CloseMessage
							SetF	*Var[0] *Fixed[25.0]  % speed
							SetF	*Var[1] *Fixed[255.0] % fully dark
							ExecWait $Script_FadeScreenOut
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
							Thread % Fade Screen Brightness
								Wait	10`
								SetF	*Var[0] *Fixed[25.0] % speed
								SetF	*Var[1] *Fixed[5.0]  % fully bright
								ExecWait $Script_FadeScreenIn
							EndThread
							Set .CurrentMode 1 % Set MapVar[1] to 1
							Set .LastModeActivated .CurrentMode % Set LastMode as Current Mode
						EndIf
						Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
						Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
						Set *MapVar[0] 1 % Roguelike
					Case == 1 % no
						Jump $Script_Interact
				EndSwitch
			EndIf
		Case == 1 % Set Difficulty
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Welcome3 )
			Set	*Flag_ShowDifficulties_Descriptions .True
			If 	*Flag_Cheev_Global_03 == .False % game beated?
				Call    ShowChoice    	( $DifficultyList_1 )
				If *Var[0] == 2
					Set *Var[0] 3 % cancel
				EndIf
			Else % yes
				Call    ShowChoice    	( $DifficultyList_2 )
			EndIf
			Switch *Var[0]
				Case == 0 % Normal
					Set *PitDifficulty .Default
				Case == 1 % Hard
					Set *PitDifficulty 1
				Case == 2 % Very-hard
					Set *PitDifficulty 2
				Case == 3 % cancel
			EndSwitch
			Set		*Flag_ShowDifficulties_Descriptions .False
			Call    ContinueSpeech    	( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble ) % Close current dialog bubble
			Exec	$Script_SetSkull
			Jump	$Script_Interact			
		Case == 2 % Know more about each mode
			Call    	ContinueSpeech    	( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
			ExecWait	$Script_LearnMore
		Case == 3 % Cancel
			Call	CloseMessage
			If .CurrentMode != .LastModeActivated % If they are different play the pipe sound
				Set .LastModeActivated .CurrentMode % Set LastMode as Current Mode
				SetF	*Var[0] *Fixed[25.0]  % speed
				SetF	*Var[1] *Fixed[255.0] % fully dark
				ExecWait $Script_FadeScreenOut
				Exec	$Script_SetCurrentPipe
				Call    PlaySound   	( 208E ) % Pipe Spawning Sound
				Thread % Fade Screen Brightness
					Wait	10`
					SetF	*Var[0] *Fixed[25.0] % speed
					SetF	*Var[1] *Fixed[5.0]  % fully bright
					ExecWait $Script_FadeScreenIn
				EndThread
			EndIf
	EndSwitch
	Call     ResetCam    		( .Cam:Default *Fixed[4.0] ) % Reset Zoom
	Return
	End
}


#new:Script $Script_Cheato_Meeting1
{
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_5 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_6 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_7 )
	Return
	End
}

#new:Script $SkipCutscene_Cheato_Meeting1
{
	Set *Flag_Skip .True
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			Call	SetNpcAnimation 	( .Npc_Cheato 00AE0001 ) % idle
			Call	SetPlayerAnimation ( .PlayerAnim:StandStill ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}
	
#new:Function $Function_LoadLostedCoins
{
    PUSH A1, A2, V0, RA
	LAH  A2, 8010F2B0 % Amount of Coins Losted Inside the Pit
	LIO  A1, *Var[0]
	JAL  ~Func:set_variable 
	RESERVED
	JPOP A1, A2, V0, RA
}
	
#new:Script $Script_ZoomIn_Camera % Zoom in camera when Mario talk to Cheato (used to hide the pipe while changing the color)
{
	Call     GetNpcPos 			( .Npc:Self *Var[0] *Var[1] *Var[2] )
	Call     UseSettingsFrom 	( .Cam:Default *Var[0] *Var[1] *Var[2] )
	Call     SetCamSpeed 	( .Cam:Default *Fixed[10.0] )				% Speed to Zoom to Target
	Call     SetCamDistance ( .Cam:Default 320` )						% Cam Zoom
	Call     SetCamPosB  	( .Cam:Default -200` -800` )				% Set Cam Cordinates, you need to set this manually
	Call     SetPanTarget 	( .Cam:Default *Var[0] *Var[1] *Var[2] )	% CamID, int X, int Y, int Z
	Call     PanToTarget 	( .Cam:Default 00000000 00000001 )
	Return
	End
}
	
	/%#new:Script $Script_ChooseMode % unused
	Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Welcome2 )
	Call    ShowChoice    	( $ModesList )
		Switch *Var[0]
			Case == 0 % Classic
				If	*Flag_NormalInfoLearned == 1
					If *Flag_Mode_Classic != 0
							Set .CurrentMode 0 % Set MapVar[1] to 0
					EndIf
					Set *Flag_Mode_Classic 0 % Classic Mode Set
					Set *Flag_Mode_Rogue 0 % Roguelike Mode Deactivated
					Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
					Set *MapVar[0] 0 % Classic
					Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
					Jump $Script_Interact
				EndIf
				Set		*Flag_NormalInfoLearned	1
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_ClassicAbout ) % This mode is about...
				Call    ShowChoice    	( 001E001D ) % yes no
				Call    ContinueSpeech    	( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						If *Flag_Mode_Classic != 0
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
						EndIf
						Set *Flag_Mode_Classic 0 % Classic Mode Set
						Set *Flag_Mode_Rogue 0 % Roguelike Mode Deactivated
						Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
						Set *MapVar[0] 0 % Classic
					Case == 1 % no
						Jump $Script_ChooseMode
				EndSwitch
			Case == 1 % Roguelike
				If	*Flag_RoguelikeInfoLearned == 1
						If *Flag_Mode_Rogue != 1
							Set .CurrentMode 1 % Set MapVar[1] to 1
						EndIf
						Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
						Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
						Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
						Set *MapVar[0] 1 % Roguelike
						Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
						Jump $Script_Interact
				EndIf
				Set		*Flag_RoguelikeInfoLearned	1
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout ) % This mode is about...
				Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout2 )
				Call    ShowChoice    ( 001E001D ) % yes no
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						If *Flag_Mode_Rogue != 1
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
						EndIf
						Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
						Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
						Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
						Set *MapVar[0] 1 % Roguelike
					Case == 1 % no
						Jump $Script_ChooseMode
				EndSwitch
			Case == 2
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble ) % Close current dialog bubble
				Jump $Script_Interact
		EndSwitch
	Return
	End%/
	
#new:Script $Script_LearnMore
{
	Call    SpeakToPlayer 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_Welcome4 )
	Call    ShowChoice    	( $ModesList )
		Switch *Var[0]
			Case == 0 % Classic
				Set		*Flag_NormalInfoLearned 1
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_ClassicAbout ) % This mode is about...
				Call    ShowChoice    	( 001E001D ) % yes no
				Call    ContinueSpeech    	( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						% Wasn't already set to Classic/Normal?
						If *Flag_Mode_Classic != 0
							Call	CloseMessage
							SetF	*Var[0] *Fixed[25.0]  % speed
							SetF	*Var[1] *Fixed[255.0] % fully dark
							ExecWait $Script_FadeScreenOut
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
							Thread % Fade Screen Brightness
								Wait	10`
								SetF	*Var[0] *Fixed[25.0] % speed
								SetF	*Var[1] *Fixed[5.0]  % fully bright
								ExecWait $Script_FadeScreenIn
							EndThread
						EndIf
						Set *Flag_Mode_Classic 0 % Classic Mode Set
						Set *Flag_Mode_Rogue 0 % Roguelike Mode Deactivated
						Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
						Set *MapVar[0] 0 % Classic
					Case == 1 % no
						Jump $Script_LearnMore
				EndSwitch
			Case == 1 % Roguelike
				Set		*Flag_RoguelikeInfoLearned  1
				Call    ContinueSpeech 	( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout ) % This mode is about...
				Call    SpeakToPlayer 		( .Npc:Self 00AE0004 00AE0001 00000000 $String_RogueAbout2 )
				Call    ShowChoice    ( 001E001D ) % yes no
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble )
				Switch *Var[0]
					Case == 0 % yes
						% Wasn't already set to Roguelike?
						If *Flag_Mode_Rogue != .True
							Call	CloseMessage
							SetF	*Var[0] *Fixed[25.0]  % speed
							SetF	*Var[1] *Fixed[255.0] % fully dark
							ExecWait $Script_FadeScreenOut
							Exec	$Script_SetCurrentPipe
							Call    PlaySound   	( 208E ) % Pipe Spawning Sound
							Thread % Fade Screen Brightness
								Wait	10`
								SetF	*Var[0] *Fixed[25.0] % speed
								SetF	*Var[1] *Fixed[5.0]  % fully bright
								ExecWait $Script_FadeScreenIn
							EndThread
						EndIf
						Set *Flag_Mode_Classic 1 % Classic Mode Deactivated
						Set *Flag_Mode_Rogue 1 % Roguelike Mode Set
						Set *Flag_Mode_Endless 0 % Endless Mode Deactivated
						Set *MapVar[0] 1 % Roguelike
					Case == 1 % no
						Jump $Script_LearnMore
				EndSwitch
			Case == 2
				Call    ContinueSpeech    ( .Npc:Self 00AE0004 00AE0001 00000000 $CloseDialogBubble ) % Close current dialog bubble
				Jump $Script_Interact
		EndSwitch
	Return
	End
}

	
#string $Var_Classic
{
[PushColor][Color:1B]Classic[PopColor][END]
}

#string $Var_Roguelike
{
[PushColor][Color:1A]Roguelike[PopColor][END]
}

#string $Var_Endless % Scrapped Mode % Unused
{
Endless[END]
}

#string $Var_Normal
{
Normal[END]
}

#string $Var_Hard
{
Hard[END]
}

#string $Var_Veryhard
{
Very-hard[END]
}

#string $String_Welcome1
{
[STYLE:RIGHT][...]
Hello Mario, how can I help you?
The current mode is [Var:00],
and the difficulty is [PushColor][Color:19][Var:01][PopColor].
[Func_04][END]
}

#string $String_Welcome1-CoinsLosted
{
[STYLE:RIGHT][...]
Hello Mario, how can I help you?
The current mode is [Var:00],
and the difficulty is [PushColor][Color:19][Var:01][PopColor].
Also your coins are at Level [PushColor][Color:19][Var:02][PopColor]!
[Func_04][END]
}

#string $String_Welcome2 % unused
{
[STYLE:RIGHT][...]
What mode do you want to try
this time?
[Func_04][END]
}

#string $String_Welcome3
{
[STYLE:RIGHT][...]
What difficulty do you want to
try this time?
[Func_04][END]
}

#string $String_Welcome4
{
[STYLE:RIGHT][...]
Which mode do you want to know
more about?
[Func_04][END]
}

#string $String_ClassicAbout
{
[NEXT][...]
This mode is the core experience
of the Pit.
[WAIT][NEXT][...]
Challenge yourself through 100
floors full of enemies.
[WAIT][NEXT][...]
Every 10 floors there's a rest
room and a chest with a new
Badge awaiting for you.
[WAIT][NEXT][...]
What's inside the chest is based
on pure luck. But remember, the
deeper you are, the better the
badges you will get.
[WAIT][NEXT][...]
Wanna give it a try?
[Func_04][END]
}

#string $String_RogueAbout
{
[NEXT][...]
In this Pit you will always start
with [PushColor][Color:19]only 10HP and 5FP[PopColor] and
nothing else, all enemies will
have [PushColor][Color:19]zero defense[PopColor].
[WAIT][NEXT][...]
Each floor will present you with
a custom trap that you need to
surpass to get a reward
[WAIT][NEXT][...]
The rewards can be a bunch
of useful good like Items,
Badges, Upgrades and more!
[WAIT][NEXT][...]
All Badges you get, will get
automatically activated and
you can't disable them.
[WAIT][NEXT][...]
Although nothing you get in
this mode gets saved, except
for the coins.
[WAIT][END]
}

#string $String_RogueAbout2
{
[STYLE:RIGHT][...]
If you [PushColor][Color:19]escape from the Pit
alive[PopColor] you will get all the coins
you got on that Playthrough.
[WAIT][NEXT][...]
Regardless of the coins you
spent on that Playthrough.
[WAIT][NEXT][...]
Also remember [PushColor][Color:19]escaping alive
doesn't exactly means beating
the whole Pit[PopColor]
[WAIT][NEXT][...]
If you're defeated you will get
only [PushColor][Color:19]half of the total[PopColor] of
coins you got on that
Playthrough.
[WAIT][NEXT][...]
After coming from the Pit.
[WAIT][NEXT][...]
All your stats, gear and
partners [PushColor][Color:19]will get restored
like they were before starting
that Playthrough.[PopColor]
[WAIT][NEXT][...]
Wanna give it a try?
[Func_04][END]
}

#string $String_EndlessAbout
{
[NEXT][...]
In this mode you will fight against
endless troops of enemies until
you are defeated, how deep will you go this time?
[WAIT][NEXT][...]
Wanna give it a try?
[Func_04][END]
}

#string $ChoiceClassicActive % [STYLE:CHOICE:XCoords:YCoords:XLenght:YLenght]
{
[STYLE:CHOICE:23:60:FF:3E][...]
[DelayOff][Cursor:00][Option:00]Activate Roguelike Pit
[Cursor:01][Option:01]Change Pit Difficulty
[Cursor:02][Option:02]Tell me more about each Pit
[Option:FF][DelayOn][SetCancel:03][EndChoice:03][END]
}

#string $ChoiceRogueActive % [STYLE:CHOICE:XCoords:YCoords:XLenght:YLenght]
{
[STYLE:CHOICE:23:60:FF:3E][...]
[DelayOff][Cursor:00][Option:00]Activate Classic Pit
[Cursor:01][Option:01]Change Pit Difficulty
[Cursor:02][Option:02]Tell me more about each Pit
[Option:FF][DelayOn][SetCancel:03][EndChoice:03][END]
}
	
#string $ModesList
{
[STYLE:CHOICE:67:60:70:2E][...]
[DelayOff][Cursor:00][Option:00]Classic
[Cursor:01][Option:01]Roguelike
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $DifficultyList_1
{
[STYLE:CHOICE:67:60:75:2D][...]
[DelayOff][Cursor:00][Option:00]Normal
[Cursor:01][Option:01]Hard
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $DifficultyList_2
{
[STYLE:CHOICE:67:60:75:40][...]
[DelayOff][Cursor:00][Option:00]Normal
[Cursor:01][Option:01]Hard
[Cursor:02][Option:02]Very-hard
[Option:FF][DelayOn][SetCancel:03][EndChoice:03][END]
}

#string $CloseDialogBubble
{
[NEXT][...]
[END]
}

%%
% Merlee
%%

#new:NpcGroup $NpcGroup_Merlee
{
00000004 $BlankSettings ~Vec3f:NPCMerlee
00002D01 $Script_Init_Merlee 00000000 00000000 000000B4 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00BA0004 00BA0005 00BA0006 00BA0006 00BA0004 00BA0004 00BA0004 00BA0004 
00BA0004 00BA0004 00BA0004 00BA0004 00BA0004 00BA0004 00BA0004 00BA0004 
00000000 00000000 00000000 001A009B % She's a wizard, Merlee. She casts spells. If you l ...
}

	#new:Script $Script_Init_Merlee
{
	Call     BindNpcInteract	( .Npc:Self $ScriptMerlee_Interact )
	Return
	End
}

	#new:Script $ScriptMerlee_Interact
{
	Set		*Var[0] 7	% entry index
	Call    $Function_GetPos
	Call    PlayerMoveTo 	( *Var[1] *Var[3] 0000000D )
	Call    802D2C14 ( 00000001 )
	Call    SpeakToPlayer 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00D6 ) % Hello, how are you? Feeling jolly? Feelin ...
	Call    ShowChoice  	( 001E0011 ) % Yes No 
	If  *Var[0]  !=  00000000 
		Call     ContinueSpeech 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00D7 ) % Oh, how tragic, what a loss! Well, I guess you are ...
		Call     802D2C14 ( 00000000 )
		Return
	EndIf
	Call     ContinueSpeech 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00D8 ) % Oh, how lovely! Very good! Pick just one now, if y ...
	Call     ShowCoinCounter 	( .True )
	Call     ShowChoice  	( $Choice_Merlee )
	Call     ShowCoinCounter 	( .False )
	If  *Var[0]  ==  3
		Call     ContinueSpeech 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00D7 ) % Oh, how tragic, what a loss! Well, I guess you are ...
		Call     802D2C14 ( 00000000 )
		Return
	EndIf
	Call     $Function_SetSpell ( *Var[0] *Var[1] )
	If  *Var[1]  !=  0
		Call     ContinueSpeech 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00D9 ) % Oh! Of coins you lack a few. What a pity. Oh boo h ...
		Call     802D2C14 ( 0 )
		Return
	EndIf
	Call     ContinueSpeech 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00DA ) % Well, we're ready! Tally-ho! And here we go!  
	%Call     SetMusicTrack 	( 00000000 .Song:MerleeSpell 00000000 00000008 )
	Call     DisablePartnerAI 	( 00000000 )
	Call     SetNpcAnimation 	( .Npc:Partner 00000106 )
	Exec     $Script_CastAnimation *Var[9] 
	Loop     
		DoesScriptExist *Var[9] *Var[1] 
		If  *Var[1]  ==  0
			BreakLoop
		EndIf
		Wait     1
	EndLoop
	Wait	60`
	Call    SetNpcAnimation 	( 4 00BA0004 )
	Call    SetPlayerAnimation 	( .PlayerAnim:GotItem )
	Wait	15`
	Call    SetPlayerAnimation 	( 00010000 )	% StandStill
	Call    SpeakToPlayer 	( .Npc:Self 00BA0007 00BA0004 00000000 000D00DB ) % I think you'll find this power might get your foes ...
	Call    GetCurrentPartnerID 	( *Var[0] )
	If  *Var[0]  !=  .False
		Call     EnablePartnerAI
	EndIf
	Call     802D2C14 ( 0 )
	Return
	End
}

#string $Choice_Merlee
{
	[STYLE:CHOICE:32:46:E6:3C][...]
	[DelayOff][Cursor:00][Option:00]Special Course    250 coins
	[Cursor:01][Option:01]Ordinary Course  150 coins
	[Cursor:02][Option:02]Petit Course      100 coins
	[Option:FF][DelayOn][SetCancel:03][EndChoice:03][END]
}
  
  #new:Script $Script_CastAnimation
{
	UseArray $End[50] 
	Set  	*Array[9]  0
	Call    GetNpcPos   	( 4 *Array[4] *Array[5] *Array[6] )
	Add  	*Array[4]  60`
	Add  	*Array[6]  0
	Call    PlaySoundAtNpc ( 4 0201 0 )
	Call    MakeLerp    	( 720` 0 60` 0 )
	Loop     
		Call     UpdateLerp
		Call     SetNpcRotation ( 4 0 *Var[0] 0 )
		If  *Var[0]  >  360`
			Add  *Var[0]  -360`
		EndIf
		Switch  *Var[0] 
			Case  90`  to  270`
				Set  *Var[2]  00BA0001 
			Default
				Set  *Var[2]  00BA0002 
		EndSwitch
		Call     SetNpcAnimation 	( 4 *Var[2] )
		Wait     1
		If  *Var[1]  ==  0
			BreakLoop
		EndIf
	EndLoop
	Call    SetNpcRotation ( 4 0 0 0 )
	Call    SetNpcAnimation 	( 4 00BA000A )
	Call    PlaySoundAtNpc		( 4 0202 0 )
	Wait    50` 
	Call    SetNpcAnimation 	( 4 00BA0009 )
	Wait    7` 
	Call    SetNpcAnimation 	( 4 00BA000A )
	Wait    15`
	Call    SetNpcAnimation 	( 4 00BA000B )
	Set  	*Var[0]  *Array[5] 
	Add  	*Var[0]  25`
	Call 	GetNpcPos ( 4 *Var[4] *Var[5] *Var[6] )
	Add 	*Var[5] 20`
	Call    PlayEffect  	( ~FX:RadiatingEnerygOrb *Var[4] *Var[5] *Var[6] *Var[4] *Var[5] *Var[6] 00000000 00000000 00000000 00000000 00000000 00000000 )
	Set  *Array[8]  *Var[F] 
	Thread
		Call     802D7B10 ( *Array[8] )
	EndThread
	Call    DisablePlayerPhysics 	( .True )
	Call    InterpPlayerYaw 	( 0 0 )
	Call    SetPlayerAnimation 	( .PlayerAnim:GotItem )
	Wait	1
	Call    DisablePlayerPhysics 	( .False )
	Return
	End
}
   
#new:ByteTable $ByteTable_802475DC
{
	140A0500 
}

#new:ByteTable $ByteTable_MerleePrices
{
	00FA0096 00640000
}
   
#new:Function $Function_SetSpell
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S2, 18 (SP)
    8:  DADDU     S2, A0, R0
    C:  SW        RA, 1C (SP)
   10:  SW        S1, 14 (SP)
   14:  SW        S0, 10 (SP)
   18:  LW        S0, C (S2)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LIA       S1, 8010F290
   		% each price uses 2 bytes now
		COPY	  T1, V0
		ADDU	  T1, T1, T1
   30:  LTHU      A1, T1 ($ByteTable_MerleePrices)
   3C:  LHU       V1, C (S1) % load coins
   40:  LW        S0, 0 (S0)
   44:  LTBU      A2, V0 ($ByteTable_802475DC)
   50:  LHU       A0, C (S1)
   54:  SLT       V1, V1, A1
   58:  BEQ       V1, R0, .SubstractCoins
   		COPY	  V0, A1	% ANDI      V0, A1, FF
   60:  DADDU     A0, S2, R0
   64:  DADDU     A1, S0, R0
   68:  BEQ       R0, R0, .o108
   6C:  ADDIU     A2, R0, 1
        .SubstractCoins
   70:  SUBU      V0, A0, V0
   74:  SH        V0, C (S1)
   78:  LB        V0, 28A (S1)
   7C:  ANDI      V1, A2, FF
   80:  SLT       V0, V0, V1
   84:  BNEL      V0, R0, .o8C
   88:  SB        A2, 28A (S1)
        .o8C
   8C:  JAL       ~Func:rand_int
   90:  ADDIU     A0, R0, 2
   94:  ADDIU     V0, V0, 1
   98:  SH        V0, 28C (S1)
   9C:  JAL       ~Func:rand_int
   A0:  ADDIU     A0, R0, 3
   A4:  DADDU     V1, V0, R0
   A8:  ADDIU     A0, R0, 1
   AC:  BEQ       V1, A0, .oE4
   B0:  SLTI      V0, V1, 2
   B4:  BEQ       V0, R0, .oCC
   B8:  ADDIU     V0, R0, 2
   BC:  BEQL      V1, R0, .oFC
   C0:  SB        A0, 289 (S1)
   C4:  BEQ       R0, R0, .o100
   C8:  DADDU     A0, S2, R0
        .oCC
   CC:  BEQ       V1, V0, .oEC
   D0:  ADDIU     V0, R0, 3
   D4:  BEQ       V1, V0, .oF4
   D8:  DADDU     A0, S2, R0
   DC:  BEQ       R0, R0, .o104
   E0:  DADDU     A1, S0, R0
        .oE4
   E4:  BEQ       R0, R0, .oF8
   E8:  ADDIU     V0, R0, 2
        .oEC
   EC:  BEQ       R0, R0, .oF8
   F0:  ADDIU     V0, R0, 3
        .oF4
   F4:  ADDIU     V0, R0, 4
        .oF8
   F8:  SB        V0, 289 (S1)
        .oFC
   FC:  DADDU     A0, S2, R0
        .o100
  100:  DADDU     A1, S0, R0
        .o104
  104:  DADDU     A2, R0, R0
        .o108
  108:  JAL       ~Func:set_variable
  10C:  NOP
  110:  LW        RA, 1C (SP)
  114:  LW        S2, 18 (SP)
  118:  LW        S1, 14 (SP)
  11C:  LW        S0, 10 (SP)
  120:  ADDIU     V0, R0, 2
  124:  JR        RA
  128:  ADDIU     SP, SP, 20
}

  %%
  %	Fishmael
  %%

 #new:NpcGroup $NpcGroup_Fishmael
{
00000005 $Fishmael_Settings ~Vec3f:NPC_Fishmael
00A40D01 $Script_Init_Fishmael 00000000 00000000 00000000 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 
008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 008D0001 
00000000 00000000 00000000 $Tattle_Fishmael
}

#new:NpcSettings $Fishmael_Settings
{
00000000 00200018 00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00630000 
}

	#new:Script $Script_Init_Fishmael
{
	Exec	$Script_Initialize_Numbers
	Call     BindNpcInteract	( .Npc:Self $Script_Interact_Fishmael )
	Return
	End
}

#new:Script $Script_Initialize_Numbers
{
	% Init 0s
	Call 	CloneModel	 	( ~Model:num00 .Number_0000 ) % ModelToCloneID ModelClonedID
	Call 	CloneModel	 	( ~Model:num00 .Number_00 ) 
	Call 	CloneModel	 	( ~Model:num00 .Number_0 )
	% Init 1s
	Call 	CloneModel	 	( ~Model:num01 .Number_0001 )
	Call 	CloneModel	 	( ~Model:num01 .Number_0100 )
	Call 	CloneModel	 	( ~Model:num01 .Number_1000 )
	% Init 2s
	Call 	CloneModel	 	( ~Model:num02 .Number_0002 )
	Call 	CloneModel	 	( ~Model:num02 .Number_0200 )
	Call 	CloneModel	 	( ~Model:num02 .Number_2000 )
	% Init 3s
	Call 	CloneModel	 	( ~Model:num03 .Number_0003 )
	Call 	CloneModel	 	( ~Model:num03 .Number_0300 )
	Call 	CloneModel	 	( ~Model:num03 .Number_3000 )
	% Init 4s
	Call 	CloneModel	 	( ~Model:num04 .Number_0004 )
	Call 	CloneModel	 	( ~Model:num04 .Number_0400 )
	Call 	CloneModel	 	( ~Model:num04 .Number_4000 )
	% Init 5s
	Call 	CloneModel	 	( ~Model:num05 .Number_0005 )
	Call 	CloneModel	 	( ~Model:num05 .Number_0500 )
	Call 	CloneModel	 	( ~Model:num05 .Number_5000 )
	% Init 6s
	Call 	CloneModel	 	( ~Model:num06 .Number_0006 )
	Call 	CloneModel	 	( ~Model:num06 .Number_0600 )
	Call 	CloneModel	 	( ~Model:num06 .Number_6000 )
	% Init 7s
	Call 	CloneModel	 	( ~Model:num07 .Number_0007 )
	Call 	CloneModel	 	( ~Model:num07 .Number_0700 )
	Call 	CloneModel	 	( ~Model:num07 .Number_7000 )
	% Init 8s
	Call 	CloneModel	 	( ~Model:num08 .Number_0008 )
	Call 	CloneModel	 	( ~Model:num08 .Number_0800 )
	Call 	CloneModel	 	( ~Model:num08 .Number_8000 )
	% Init 9s
	Call 	CloneModel	 	( ~Model:num09 .Number_0009 )
	Call 	CloneModel	 	( ~Model:num09 .Number_0900 )
	Call 	CloneModel	 	( ~Model:num09 .Number_9000 )
	Return
	End
}

	#new:Script $Script_Interact_Fishmael
{
	%% Game Intro
	% When Meeting Oaklie, Fishamel and Chuck
	Call	GetSelfVar ( 5 *Var[0] )
	% If the player has already meet oaklie and he need to talk to the other guys
	If	*Var[0] == .True
		Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_GlMario )
		Return
	EndIf
	If *Flag_MeetingAtLobby == .False
		If *MapFlag[01] == .False
			Exec	$Script_MeetingFish_1 *Var[A]
			Exec	$SkipCutscene_MeetingFish_1
			Loop
				DoesScriptExist ( *Var[A] *Var[0] )
				If *Var[0] == .False
					BreakLoop
				EndIf
				Wait 1
			EndLoop
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
			Call    ShowGotItem 	( 7B .True 0 ) % Debit Card
			Call    AddKeyItem  	( 7B ) % Debit Card
			Set 	*MapFlag[01] .True
			Exec	$Script_MeetingFish_2 *Var[A]
			Exec	$SkipCutscene_MeetingFish_2
			Loop
				DoesScriptExist ( *Var[A] *Var[0] )
				If *Var[0] == .False
					BreakLoop
				EndIf
				Wait 1
			EndLoop
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
			Set		*Flag_Fishmael_1stTime_Talk .True
			Call	SetSelfVar ( 5 .True )
			Return
		EndIf
	EndIf
	%% Check if Mario completily losted his card % scrapped
	If *Flag_CardLosted == .True
		% Check if its the 1st time this happen 
		If *Flag_Fishmael_1stTime_CardCompletelyLost == .False
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_CardLosted )
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Wait	1
			Call 	SetPlayerAnimation ( 00010029 )
			Wait	20`
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Set *Flag_Fishmael_1stTime_CardCompletelyLost .True
		EndIf
		% Give Card
		Call    ShowGotItem 	( 7B .True 0 ) % Debit Card
		Call    AddKeyItem  	( 7B ) % Debit Card
		Set 	*Flag_CardLosted .False
		Return
	EndIf
	% Scrapped, before you can't use the bank anymore if you have coins losted
	/%% Check if Mario have coins losted in the pit
	Call	$Function_LoadLostedCoins
	If *Var[0] != 0		% If Mario lost some coins in the pit
		% Is the 1st time you talk to fish when you lost coins?
		If *Flag_Fishmael_1stTime_CoinsLosted == .False
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_LostCoins_1stTime )
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_LostCoins )
			Set	*Flag_Fishmael_1stTime_CoinsLosted .True
		Return
		% isn't the 1st time
		Else
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_LostCoins )
			Return
		EndIf
	EndIf%/
	%% Check if Mario even have any coins in the bank or in his pocket
	Call	$Function_LoadMarioCoins ( *Var[3] )
	If	*Var[3] == .False % Check Coins
		Call	$Function_LoadBankCoins ( *Var[3] )
		If	*Var[3] == .False % Check Bank Account
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Welcome_Cancel )
			Return
		EndIf
	EndIf
	% The code that shows the current coins in the bank is in a global patch at MiscHooks.path
	Exec	$Script_ZoomIn_Camera
	% Talk about Timing Tutor
	If *Flag_FishReward2 == .False
		If *Flag_FishTalksTimingTutor == .True
			Set	*Var[0] 00080007 % hand to the ear
			Set	*Var[1] .False
			Set	*Var[2] 35`
			ExecWait $SetPlayerAnimation
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_TimingTutor )
			Set	*Var[0] 00010003 % tired
			Set	*Var[1] .False
			Set	*Var[2] 35`
			ExecWait $SetPlayerAnimation
			Wait	10`
			Set 	*Flag_FishTalksTimingTutor .False
		EndIf
	EndIf
	% Check if Mario's coins bubble is already on screen
	Call GetNpcVar ( .Npc:Self .Default *Var[0] )
	If *Var[0] == .False
		Call	ShowCoinCounter ( .True )
	EndIf
	Call 	SetNpcVar ( .Npc:Self .Default .True )
	Set		*BankTextBoxPosition 1 % Used to handle the position for the Box with the Bank Coins
	Set		*TalkingToFishmael .True % This flags handle showing the box with the current coins in the bank
	ExecWait $Script_FishmaelRewards
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Welcome )
	%% Check if Mario have any coins on him or in the bank, to handle making each option available
	Call	$Function_LoadMarioCoins ( *Var[3] )
	If		*Var[3] == .False
		Call	ShowChoice 		( $Choice_Banking_OnlyWithdraw ) 
		%% Reformat Var0
		Switch *Var[0]
			Case == 0
				Set *Var[0] 1 % Withdraw
			Case == 1
				Set *Var[0] 2 % Cancel
		EndSwitch
	Else
	%% Check if Mario have any coins in the bank or if he currently have 9999 coins
		Call $Function_LoadBankCoins ( *Var[3] )
		If *Var[3] == 0
			Call	ShowChoice 		( $Choice_Banking_OnlyDeposit ) 
			%% Reformat Var0
			If *Var[0] == 1
				Set *Var[0] 2 % Cancel
			EndIf
		Else
			% Checking if Mario have 9999 coins
			Call	$Function_LoadMarioCoins ( *Var[3] )
			If *Var[3] == 9999`
				Call	ShowChoice 		( $Choice_Banking_OnlyDeposit ) 
				%% Reformat Var0
				If *Var[0] == 1
					Set *Var[0] 2 % Cancel
				EndIf
			Else
				% Load the normal dialog box with both options
				Call	ShowChoice 		( $Choice_Banking ) 
			EndIf
		EndIf
	EndIf
	If *Var[0] == 2 % Cancel
		Call 	SetNpcVar 		( .Npc:Self .Default .False )
		Call	ShowCoinCounter ( .False )
		Call	$Function_BankCoins_Close
		Call	$Function_BankCoins_UseLastFrame
		Call    ResetCam    	( .Cam:Default *Fixed[4.0] ) % Reset Zoom
		Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Cancel )
		Return
	EndIf
	Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
	Switch *Var[0]
		Case == 0 % Deposit
			Jump	$Script_Fishmael_Deposit
		Case == 1 % Withdraw
			Jump	$Script_Fishmael_Withdraw
	EndSwitch
	Return
	End
}

#string $String_Fishmael_TimingTutor
{
[STYLE:RIGHT][...]
Hmm... a way to make Stylish
Moves a little bit easier?
[WAIT][NEXT][...]
Yeah, of course I know a way,
but it has a price.
[WAIT][NEXT][...]
Just keep saving more coins.
[WAIT][NEXT][...]
I will help you with that when
you have enough coins in your
Bank Account.
[WAIT][NEXT][...]
Happy saving!
[WAIT][END]
}

#new:Script $Script_MeetingFish_1
{
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Meeting_1 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Meeting_2 )
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Meeting_3 )
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	% Give to the player his debit card
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_CreatingAccount_1 )
	Wait	10`
	Return
	End
}

#new:Script $SkipCutscene_MeetingFish_1
{
	Set *Flag_Skip .True
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			Call	SetNpcAnimation 	( .Npc_Fishmael 008D0001 ) % idle
			Call	SetPlayerAnimation ( .PlayerAnim:StandStill ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#new:Script $Script_MeetingFish_2
{
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_CreatingAccount_2 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( .PlayerAnim:Thinking )
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_CreatingAccount_3 )
	Return
	End
}

#new:Script $SkipCutscene_MeetingFish_2
{
	Set *Flag_Skip .True
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Call	SetNpcAnimation 	( .Npc_Fishmael 008D0001 ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

% Set Box Animation to the Ending one
#new:Function $Function_BankCoins_Close
{
	ADDIU T0, R0, 2
	SAW	  T0, $BoxAnimation_State % from MiscHooks.patch
	JR	  RA
	ADDIU V0, R0, 2
}

#new:Function $Function_BankCoins_UseLastFrame
{
	ADDIU T0, R0, 7
	SAW	  T0, $BoxAnimation_Offset % from MiscHooks.patch
	JR	  RA
	ADDIU V0, R0, 2
}

	%% Deposit - Script
	#new:Script $Script_Fishmael_Deposit % The max ammunt to hold in the bank is 9,999,999 / 0098967F
{
	% Clean all numbers on screen
	ExecWait	$Script_CleanAllNumbers
	Call	SetMessageString ( $String_value_deposit 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_WithdrawDeposit_Welcome )
	Call	ShowChoice 		( $Choice_Deposit )
	Switch *Var[0]
		Case == 0 % Specific
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Call 	SetNpcVar 		( .Npc:Self .Function .Deposit ) % Used to handle what i does the A and B button
			ExecWait $Script_LoadNumbers % Show the Numbers in Screen
			%% Check if Mario canceled the current deposit
			Call GetNpcVar ( .Npc:Self 1 *Var[0] )
			If *Var[0] == .True
				Call SetNpcVar ( .Npc:Self 1 .Cam:Default )
				%% Check current Function
				Call GetNpcVar ( .Npc:Self .Function *Var[4] )
				If *Var[4] == .Deposit
				%% If Deposit is the current function
					Set		*Var[5] .Default % Make the arrow invisible
					Call	$SetArrowPosition
					Jump	$Script_Fishmael_Deposit
				Else
				%% If Withdraw is the current function
					Set		*Var[5] .Default % Make the arrow invisible
					Call	$SetArrowPosition
					Jump	$Script_Fishmael_Withdraw
				EndIf
			EndIf
			Set		*Var[5] .Default % Make the arrow invisible
			Call	$SetArrowPosition
			Jump $Script_DepositCoins % Ask Confirmation and Deposit the coins
		Case == 1 % All my Coins
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Jump 	$Script_DepositCoins_All
		Case == 2 % Cancel
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Jump $Script_Interact_Fishmael
	EndSwitch
	Return
	End
}

#new:Script $Script_LoadNumbers % -222 -360 -359 % Numbers Models Starting Post
{
	% Nuke all cheat codes data
	Call 	$WriteAddress ( $Data_CheatsQueue 2 .False 0 .False )
	Call 	$WriteAddress ( $Data_CheatsQueue 2 .False 4 .False )
	Call 	$WriteAddress ( $Data_CheatsQueue 2 .False 8 .False )
	% Set the 0s at the start
	Call	TranslateModel ( .Number_0 		.Number_Pos_Left 	179` 0 )
	Call	TranslateModel ( .Number_00 	.Number_Pos_Center	179` 0 )
	Call	TranslateModel ( ~Model:num00 	.Number_Pos_Right 	179` 0 )
	Call	TranslateModel ( .Number_0000 	.Number_Pos_RRight	179` 0 )
	% Start Animation
	Set		*Var[5] 4 % Arrow Position
	Call	$SetArrowPosition
	Set		.CursorX 3 % Cursor Position
	Set		.CursorL 0
	Set		.CursorM 0
	Set		.CursorR 0
	Set		.CursorRR 0
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_HowMuch )
	Loop
		Set	*Var[0] 0
		Call $Function_TrackInputs
		If	*Var[0] != 0 % If any input hasn't been sended bypass everything
			% Handle Input
			Switch *Var[0]
				Case == 3 % Move to the Left
					Call	PlaySound ( C7 ) % Move Cursor
					If .CursorX == 0 % If is at the top left
						Set		*Var[5] 4 % Arrow Position
						Call	$SetArrowPosition
						Set 	.CursorX 3
						BreakCase
					EndIf
					Sub		*Var[5] 1 % Arrow Position
					Call	$SetArrowPosition
					Sub	.CursorX 1
				Case == 4 % Move to the Right
					Call	PlaySound ( C7 ) % Move Cursor
					If .CursorX == 3 % If is at the top right
						Set		*Var[5] 1 % Arrow Position
						Call	$SetArrowPosition
						Set 	.CursorX 0
						BreakCase
					EndIf
					Add		*Var[5] 1 % Arrow Position
					Call	$SetArrowPosition
					Add	.CursorX 1
				Case == 5 % A Button
					Call GetNpcVar ( .Npc:Self .Function *Var[4] )
					If *Var[4] == .Deposit
					%% If Deposit is the current function
						ExecWait $Script_FormatNumbers % Format the numbers to a single Int
						Call	 $Function_LoadMarioCoins
					 	%% If Mario doesn't have the enough coins
						If *Var[3] < .Amount % If Mario doesn't have the enough coins
							Call	PlaySound ( 21D ) % Error
							Exec	$Script_CheckCheatosCheats
							BreakCase
						EndIf
					Else
					%% If Withdraw is the current function
						ExecWait $Script_FormatNumbers % Format the numbers to a single Int
						Call	 $Function_LoadMarioCoins ( *Var[3] )
						 %% Checking if Mario will get above 9999 coins
						 Add	*Var[3] .Amount
						If *Var[3] > 9999`
							Call	PlaySound ( 21D ) % Error
							Exec	$Script_CheckCheatosCheats
							BreakCase
						EndIf
						%% Checking if the bank account doesn't have enought coins
						Call	 $Function_LoadBankCoins ( *Var[3] )
						If *Var[3] < .Amount
							Call	PlaySound ( 21D ) % Error
							Exec	$Script_CheckCheatosCheats
							BreakCase
						EndIf
					EndIf
					%% If you are trying to deposite/withdraw 0 coins
					If .Amount == .False
						Call	PlaySound ( 21D ) % Error
						Exec	$Script_CheckCheatosCheats
						BreakCase
					EndIf
					Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
					BreakLoop		
				Case == 6 % B Button
					Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
					Call 	SetNpcVar ( .Npc:Self 1 .True ) %% Used to handle stopping the parent script
					Return					
			EndSwitch
			Switch .CursorX
				Case == 0 % X000
					Switch	*Var[0]
						Case == 2 % Increase
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorL == 9
								Set .CursorL 0
								BreakCase % Finish the switch
							EndIf
							Add .CursorL 1
						Case == 1 % Decrease
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorL == 0
								Set .CursorL 9
								BreakCase % Finish the switch
							EndIf
							Sub .CursorL 1
					EndSwitch
					ExecWait $Script_CleanNumbers1
					ExecWait $Script_SetNumber1
					Call	TranslateModel ( *Var[1]	.Number_Pos_Left 	179` 0 )
				Case == 1 % 0X00
					Switch	*Var[0]
						Case == 2 % Increase
						Call	PlaySound ( C7 ) % Move Cursor
							If .CursorM == 9
								Set .CursorM 0
								BreakCase % Finish the switch
							EndIf
							Add .CursorM 1
						Case == 1 % Decrease
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorM == 0
								Set .CursorM 9
								BreakCase % Finish the switch
							EndIf
							Sub .CursorM 1
					EndSwitch
					ExecWait $Script_CleanNumbers2
					ExecWait $Script_SetNumber2
					Call	TranslateModel ( *Var[2] 	.Number_Pos_Center	179` 0 )
				Case == 2 % 00X0
				% Handle Joystick
					Switch	*Var[0]
						Case == 2 % Increase
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorR == 9
								Set .CursorR 0
								BreakCase % Finish the switch
							EndIf
							Add .CursorR 1
						Case == 1 % Decrease
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorR == 0
								Set .CursorR 9
								BreakCase % Finish the switch
							EndIf
							Sub .CursorR 1
					EndSwitch
					ExecWait $Script_CleanNumbers3
					ExecWait $Script_SetNumber3
					Call	TranslateModel ( *Var[3] 	.Number_Pos_Right 	179` 0 )
				Case == 3 % 000X
					% Handle Joystick
					Switch	*Var[0]
						Case == 2 % Increase
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorRR == 9
								Set .CursorRR 0
								BreakCase % Finish the switch
							EndIf
							Add .CursorRR 1
						Case == 1 % Decrease
							Call	PlaySound ( C7 ) % Move Cursor
							If .CursorRR == 0
								Set .CursorRR 9
								BreakCase % Finish the switch
							EndIf
							Sub .CursorRR 1
					EndSwitch
					ExecWait $Script_CleanNumbers4
					ExecWait $Script_SetNumber4
					Call	TranslateModel ( *Var[4] 	.Number_Pos_RRight 	179` 0 )
			EndSwitch
		EndIf
	EndLoop
	Return
	End
}

#new:Function $SetArrowPosition
{
	% Set Arrow position accordingly to the value from Var5
	PUSH	RA, V0, A1
	LIO 	A1, *Var[5]
	JAL 	~Func:get_variable 
	RESERVED
	ADDIU	T0, R0, 1
	BNE		V0, T0, .CheckPosition2
	NOP
	SAW		V0, $cursor % from MiscHooks.patch
	BEQ		R0, R0, .End
	NOP
	.CheckPosition2
	ADDIU	T0, R0, 2
	BNE		V0, T0, .CheckPosition3
	NOP
	SAW		V0, $cursor % from MiscHooks.patch
	BEQ		R0, R0, .End
	NOP
	.CheckPosition3
	ADDIU	T0, R0, 3
	BNE		V0, T0, .CheckPosition4
	NOP
	SAW		V0, $cursor % from MiscHooks.patch
	BEQ		R0, R0, .End
	NOP
	.CheckPosition4
	ADDIU	T0, R0, 4
	BNE		V0, T0, .DeactiveArrow
	NOP
	SAW		V0, $cursor % from MiscHooks.patch
	BEQ		R0, R0, .End
	NOP
	.DeactiveArrow
	SAW		R0, $cursor
	.End
	POP		RA, V0, A1
	JR		RA
	ADDIU	V0, R0, 2
}

#new:Function $Function_TrackInputs
{
	PUSH 	RA, V0, A1, A2
	LABU 	T2, 80074035 % Joystick % bit0(Up) bit1(Down) bit2(Left) bit3(Right)
	%% Checkin if was moved - Up
	COPY	T1, T2
	SLL		T1, T1, 31` % bit0/Up
	SRL 	T1, T1, 31` % Move all bits to just leave bit0
	ADDIU	T0, R0, 1
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 2 % A2 = 1, means the number will increase
	%% Checkin if was moved - Down
	COPY	T1, T2
	SLL		T1, T1, 30` % bit1/Down
	SRL 	T1, T1, 31` % Move all bits to just leave bit1
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 1 % A2 = 0, means the number will decrease
	%% Checkin if was moved - Left
	COPY	T1, T2
	SLL		T1, T1, 29` % bit2/Left
	SRL 	T1, T1, 31` % Move all bits to just leave bit2
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 3 % 
	%% Checkin if was moved - Right
	COPY	T1, T2
	SLL		T1, T1, 28` % bit3/Right
	SRL 	T1, T1, 31` % Move all bits to just leave bit3
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 4 % 
	%% Checking A Input
	LABU 	T2, 80074036 % Input A % bit7(A) bit6(B)
	COPY	T1, T2
	SLL		T1, T1, 24` % bit7/A Button
	SRL 	T1, T1, 31` % Move all bits to just leave bit7
	ADDIU	T0, R0, 1
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 5 % 
	%% Checking B Input
	COPY	T1, T2
	SLL		T1, T1, 25` % bit6/B Button
	SRL 	T1, T1, 31` % Move all bits to just leave bit6
	BEQL	T1, T0, .SaveVar
	ADDIU	A2, R0, 6 % 
	BEQ		R0, R0, .End
	NOP
	.SaveVar
	LIO 	A1, *Var[0]
	JAL 	~Func:set_variable
	RESERVED
	%% If the stick wasn't moved, just finish everything
	.End
	POP	 	RA, V0, A1, A2
	JR	 	RA
	NOP
}

#new:Function $Function_LoadMarioCoins
{
	PUSH RA, A1, A2, V0
	LAHU A2, 8010F29C % coins
	LIO  A1, *Var[3] % var3
	JAL ~Func:set_variable
	RESERVED
	POP	 RA, A1, A2, V0
	JR	 RA
	NOP
}

#new:Script $Script_SetNumber1
{
	Switch .CursorL
		Case == 0
			Set *Var[1] .Number_0
		Case == 1
			Set *Var[1] .Number_1000
		Case == 2
			Set *Var[1] .Number_2000
		Case == 3
			Set *Var[1] .Number_3000
		Case == 4
			Set *Var[1] .Number_4000
		Case == 5
			Set *Var[1] .Number_5000
		Case == 6
			Set *Var[1] .Number_6000
		Case == 7
			Set *Var[1] .Number_7000
		Case == 8
			Set *Var[1] .Number_8000
		Case == 9
			Set *Var[1] .Number_9000
	EndSwitch
	Return
	End
}

#new:Script $Script_SetNumber2
{
	Switch .CursorM
		Case == 0
			Set *Var[2] .Number_00
		Case == 1
			Set *Var[2] .Number_0100
		Case == 2
			Set *Var[2] .Number_0200
		Case == 3
			Set *Var[2] .Number_0300
		Case == 4
			Set *Var[2] .Number_0400
		Case == 5
			Set *Var[2] .Number_0500
		Case == 6
			Set *Var[2] .Number_0600
		Case == 7
			Set *Var[2] .Number_0700
		Case == 8
			Set *Var[2] .Number_0800
		Case == 9
			Set *Var[2] .Number_0900
	EndSwitch
	Return
	End
}

#new:Script $Script_SetNumber3
{
	Switch .CursorR
		Case == 0
			Set *Var[3] ~Model:num00
		Case == 1
			Set *Var[3] ~Model:num01
		Case == 2
			Set *Var[3] ~Model:num02
		Case == 3
			Set *Var[3] ~Model:num03
		Case == 4
			Set *Var[3] ~Model:num04
		Case == 5
			Set *Var[3] ~Model:num05
		Case == 6
			Set *Var[3] ~Model:num06
		Case == 7
			Set *Var[3] ~Model:num07
		Case == 8
			Set *Var[3] ~Model:num08
		Case == 9
			Set *Var[3] ~Model:num09
	EndSwitch
	Return
	End
}

#new:Script $Script_SetNumber4
{
	Switch .CursorRR
		Case == 0
			Set *Var[4] .Number_0000
		Case == 1
			Set *Var[4] .Number_0001
		Case == 2
			Set *Var[4] .Number_0002
		Case == 3
			Set *Var[4] .Number_0003
		Case == 4
			Set *Var[4] .Number_0004
		Case == 5
			Set *Var[4] .Number_0005
		Case == 6
			Set *Var[4] .Number_0006
		Case == 7
			Set *Var[4] .Number_0007
		Case == 8
			Set *Var[4] .Number_0008
		Case == 9
			Set *Var[4] .Number_0009
	EndSwitch
	Return
	End
}

% Make the numbers invisible before remplacing to the new one
#new:Script $Script_CleanNumbers1
{
	Call	TranslateModel ( .Number_0 		0 0 0 )
	Call	TranslateModel ( .Number_1000	0 0 0 )
	Call	TranslateModel ( .Number_2000	0 0 0 )
	Call	TranslateModel ( .Number_3000	0 0 0 )
	Call	TranslateModel ( .Number_4000	0 0 0 )
	Call	TranslateModel ( .Number_5000	0 0 0 )
	Call	TranslateModel ( .Number_6000	0 0 0 )
	Call	TranslateModel ( .Number_7000	0 0 0 )
	Call	TranslateModel ( .Number_8000	0 0 0 )
	Call	TranslateModel ( .Number_9000	0 0 0 )
	Return
	End
}

#new:Script $Script_CleanNumbers2
{
	Call	TranslateModel ( .Number_00 	0 0 0 )
	Call	TranslateModel ( .Number_0100	0 0 0 )
	Call	TranslateModel ( .Number_0200	0 0 0 )
	Call	TranslateModel ( .Number_0300	0 0 0 )
	Call	TranslateModel ( .Number_0400	0 0 0 )
	Call	TranslateModel ( .Number_0500	0 0 0 )
	Call	TranslateModel ( .Number_0600	0 0 0 )
	Call	TranslateModel ( .Number_0700	0 0 0 )
	Call	TranslateModel ( .Number_0800	0 0 0 )
	Call	TranslateModel ( .Number_0900	0 0 0 )
	Return
	End
}

#new:Script $Script_CleanNumbers3
{
	Call	TranslateModel ( ~Model:num00	0 0 0 )
	Call	TranslateModel ( ~Model:num01	0 0 0 )
	Call	TranslateModel ( ~Model:num02	0 0 0 )
	Call	TranslateModel ( ~Model:num03	0 0 0 )
	Call	TranslateModel ( ~Model:num04	0 0 0 )
	Call	TranslateModel ( ~Model:num05	0 0 0 )
	Call	TranslateModel ( ~Model:num06	0 0 0 )
	Call	TranslateModel ( ~Model:num07	0 0 0 )
	Call	TranslateModel ( ~Model:num08	0 0 0 )
	Call	TranslateModel ( ~Model:num09	0 0 0 )
	Return
	End
}

#new:Script $Script_CleanNumbers4
{
	Call	TranslateModel ( .Number_0000 	0 0 0 )
	Call	TranslateModel ( .Number_0001	0 0 0 )
	Call	TranslateModel ( .Number_0002	0 0 0 )
	Call	TranslateModel ( .Number_0003	0 0 0 )
	Call	TranslateModel ( .Number_0004	0 0 0 )
	Call	TranslateModel ( .Number_0005	0 0 0 )
	Call	TranslateModel ( .Number_0006	0 0 0 )
	Call	TranslateModel ( .Number_0007	0 0 0 )
	Call	TranslateModel ( .Number_0008	0 0 0 )
	Call	TranslateModel ( .Number_0009	0 0 0 )
	Return
	End
}

#new:Script $Script_FormatNumbers
{
	Set	.Amount .Default
	% Load each cursor on the following vars
	Set *Var[0] .CursorL
	Set *Var[1] .CursorM
	Set *Var[2] .CursorR
	Set *Var[3] .CursorRR
	% Format each var
	Mul *Var[0] 1000` 	% thousands
	Mul *Var[1] 100` 	% hundreds
	Mul *Var[2] 10` 	% tens
	Mul *Var[3] 1 		% units % isn't neccesary but whatever
	% Sum everything and add to Amount
	Add *Var[0] *Var[1]
	Add *Var[0] *Var[2]
	Add *Var[0] *Var[3]
	Add .Amount *Var[0] % Add final amount to Amount
	Return
	End
}

%% Deposit - All Coins
#new:Script $Script_DepositCoins_All
{
	Call	$Function_LoadMarioCoins ( *Var[3] )
	Set		.Amount *Var[3]
	%% Ask for confirmation
	Call	SetMessageString ( $String_value_deposit 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Confirmation )
	Call	ShowChoice ( $Choice_YesNo )
	If *Var[0] == 1 % No
		Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
		Jump	$Script_Fishmael_Deposit
	EndIf
	%% Deposit Coins
	Set *Var[0] .Amount
	Mul *Var[0] -1`
	Call	AddCoin ( *Var[0] ) % Sub Coins
	SetTimescale *Fixed[15.0]
	Loop .Amount
		Call	PlaySound ( 211 ) % Coin
		Call	$Function_SaveCoinsInToAccount
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
	Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
	Jump	$Script_Interact_Fishmael
	Return
	End
}

%% Deposit - Confirmation
#new:Script $Script_DepositCoins
{
	Call	SetMessageString ( $String_value_deposit 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Confirmation )
	Call	ShowChoice ( $Choice_YesNo )
	If *Var[0] == 1 % No
		% Clean all numbers on screen
		ExecWait	$Script_CleanAllNumbers
		Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
		Jump	$Script_Fishmael_Deposit
	EndIf
	Set *Var[0] .Amount
	Mul *Var[0] -1`
	Call	AddCoin ( *Var[0] ) % Sub Coins
	SetTimescale *Fixed[15.0]
	Loop .Amount
		Call	PlaySound ( 211 ) % Coin
		Call	$Function_SaveCoinsInToAccount
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
	% Clean all numbers on screen
	ExecWait	$Script_CleanAllNumbers
	Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
	Jump	$Script_Interact_Fishmael
	Return
	End
}

#new:Script $Script_FishmaelRewards
{
	Call $ReadAddress ( 803560DC 2 *Var[0] .False .False ) % load bank account
	% Check Challenges
	Switch *Var[0]
		Case >= 40000`
			Set *Flag_Cheev_Global_13 .True
			Set *Flag_Cheev_Global_12 .True
			Set *Flag_Cheev_Global_11 .True
		Case >= 10000`
			Set *Flag_Cheev_Global_12 .True
			Set *Flag_Cheev_Global_11 .True
		Case >= 1000`
			Set *Flag_Cheev_Global_11 .True
	EndSwitch
	% Get Timing Tutor
	If *Flag_FishReward2 == .False
		If *Var[0] >= 1000`
			Call	SetMessageValue ( 1000` 1 )
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Rewards1 )
			% close coin box
			Call	$Function_BankCoins_Close
			Call	$Function_BankCoins_UseLastFrame
			Wait	10`
			Call    ShowGotItem 	( 012D .True 0 ) % Timing Tutor
			Call	AddBadge ( 012D 0 )
			Set		*Flag_FishReward2 .True
			% show coin box
			Set		*BankTextBoxPosition 1 % Used to handle the position for the Box with the Bank Coins
			Set		*TalkingToFishmael .True % This flags handle showing the box with the current coins in the bank
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Rewards3 )
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Rewards2 )
		EndIf
	EndIf
	% Check if the player will get a reward
	Call $ReadAddress ( 803560DC 2 *Var[0] .False .False ) % load bank account
	% Get Coin Quicker
	If *Flag_FishReward1 == .False
		If *Var[0] >= 3000`
			Call	SetMessageValue ( 3000` 1 )
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Rewards1 )
			% close coin box
			Call	$Function_BankCoins_Close
			Call	$Function_BankCoins_UseLastFrame
			Wait	10`
			Call    ShowGotItem 	( 0150 .True 0 ) % Coin Quicker
			Call	AddBadge ( 0150 0 )
			Set		*Flag_FishReward1 .True
			% show coin box
			Set		*BankTextBoxPosition 1 % Used to handle the position for the Box with the Bank Coins
			Set		*TalkingToFishmael .True % This flags handle showing the box with the current coins in the bank
			Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Rewards4 )
		EndIf
	EndIf
	Return
	End
}

#string $String_Fishmael_Rewards1
{
[STYLE:RIGHT][...]
Hey, looks like you already
have at least [PushColor][Color:19][Var:01][PopColor] coins
in your Bank Account!
[WAIT][NEXT][...]
Here take this as a token of
appreciation.
[WAIT][END]
}

#string $String_Fishmael_Rewards2
{
[STYLE:RIGHT][...]
Also, remember to keep saving
more coins to get new rewards!
[WAIT][END]
}

#string $String_Fishmael_Rewards3
{
[STYLE:RIGHT][...]
That's a very special Badge
because you can keep it even
if you enter the Roguelike Pit.
[WAIT][NEXT][...]
Just keep in mind it needs to
be activated [PushColor][Color:19]before[PopColor] entering
the Pit.
[WAIT][NEXT][...]
Because you can't activate
Badges by yourself when you
are inside that Pit.
[WAIT][NEXT][...]
Don't forget that my friend.
[WAIT][END]
}

#string $String_Fishmael_Rewards4
{
[STYLE:RIGHT][...]
Hehe looks like you already
got all rewards.
[WAIT][NEXT][...]
But remember Mario, it is always
important to keep saving your
coins!
[WAIT][END]
}

#new:Function $Function_SaveCoinsInToAccount
{
	LAW	  T0, 803560DC % Bank Account
	ADDIU T0, T0, 1
	SAW	  T0, 803560DC
	JR	  RA
	ADDIU V0, R0, 2
}

%% Withdraw - Script
#new:Script $Script_Fishmael_Withdraw
{
	% Clean all numbers on screen
	ExecWait	$Script_CleanAllNumbers
	Call	SetMessageString ( $String_value_withdraw 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_WithdrawDeposit_Welcome )
	Call	ShowChoice 		( $Choice_Withdraw )
	Switch *Var[0]
		Case == 0 % Specific
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Call 	SetNpcVar 		( .Npc:Self .Function .Withdraw ) % Used to handle what i does the A and B button
			ExecWait $Script_LoadNumbers % Show the Numbers in Screen
			%% Check if Mario canceled the current deposit
			Call GetNpcVar ( .Npc:Self 1 *Var[0] )
			If *Var[0] == .True
				Call SetNpcVar ( .Npc:Self 1 .Cam:Default )
				%% Check current Function
				Call GetNpcVar ( .Npc:Self .Function *Var[4] )
				If *Var[4] == .Deposit
				%% If Deposit is the current function
					Set		*Var[5] .Cam:Default % Make the arrow invisible
					Call	$SetArrowPosition
					Jump	$Script_Fishmael_Deposit
				Else
				%% If Withdraw is the current function
					Set		*Var[5] .Cam:Default % Make the arrow invisible
					Call	$SetArrowPosition
					Jump	$Script_Fishmael_Withdraw
				EndIf
			EndIf
			Set		*Var[5] .Cam:Default % Make the arrow invisible
			Call	$SetArrowPosition
			Jump $Script_WithdrawCoins % Ask Confirmation and withdraw the coins
		Case == 1 % Max Amount
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Jump 	$Script_WithdrawCoins_All
		Case == 2 % Cancel
			Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
			Jump $Script_Interact_Fishmael
	EndSwitch
	Return
	End
}

%% Withdraw - Confirmation
#new:Script $Script_WithdrawCoins
{
	Call	SetMessageString ( $String_value_withdraw 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Confirmation )
	Call	ShowChoice ( $Choice_YesNo )
	If *Var[0] == 1 % No
		% Clean all numbers on screen
		ExecWait	$Script_CleanAllNumbers
		Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
		Jump	$Script_Fishmael_Withdraw
	EndIf
	Call	AddCoin ( .Amount ) % Add Coins
	SetTimescale *Fixed[15.0]
	Loop .Amount
		Call	PlaySound ( 211 ) % Coin
		Call	$Function_SubCoinsFromAccount
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
	% Clean all numbers on screen
	ExecWait	$Script_CleanAllNumbers
	Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
	Jump	$Script_Interact_Fishmael
	Return
	End
}

%% Withdraw - Max Amount Possible
#new:Script $Script_WithdrawCoins_All
{
	Call	$Function_LoadBankCoins ( *Var[3] )
	Set		.Bank *Var[3]
	%% Ask for confirmation
	Call	SetMessageString ( $String_value_withdraw 1 )
	Call    SpeakToPlayer 	( .Npc:Self 008D0002 008D0001 00000000 $String_Fishmael_Confirmation )
	Call	ShowChoice ( $Choice_YesNo )
	If *Var[0] == 1 % No
		Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
		Jump	$Script_Fishmael_Withdraw
	EndIf
	%% Withdraw Coins
	Call	$Function_LoadMarioCoins ( *Var[3] )
	Set		.Amount *Var[3]
	SetTimescale *Fixed[15.0]
	Loop
		Call	PlaySound ( 211 ) % Coin
		Call	$Function_SubCoinsFromAccount % Sub 1 coint from the bank account
		Call	AddCoin ( 1 ) % Add 1 Coin
		Sub		.Bank 	1
		Add		.Amount 1
		Wait	1
		If .Bank == 0
			%% Break if the bank account is empty
			BreakLoop
		EndIf
		If .Amount == 9999`
			%% Break if Mario have 9999 coins
			BreakLoop
		EndIf
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
	Call    ContinueSpeech    	( .Npc:Self 008D0002 008D0001 00000000 $CloseDialogBubble )
	Jump	$Script_Interact_Fishmael
	Return
	End
}

% Clean all numbers on screen
#new:Script $Script_CleanAllNumbers
{
	Exec $Script_CleanNumbers1
	Exec $Script_CleanNumbers2
	Exec $Script_CleanNumbers3
	Exec $Script_CleanNumbers4
	Return
	End
}

#new:Function $Function_LoadBankCoins
{
	PUSH RA, A1, A2, V0
	LAW  A2, 803560DC % coins
	LIO  A1, *Var[3] % var3
	JAL ~Func:set_variable
	RESERVED
	POP	 RA, A1, A2, V0
	JR	 RA
	NOP
}

#new:Function $Function_SubCoinsFromAccount
{
	LAW	  T0, 803560DC % Bank Account
	ADDIU T1, R0, 1
	SUBU  T0, T0, T1 
	SAW	  T0, 803560DC
	JR	  RA
	ADDIU V0, R0, 2
}

#string $Choice_Banking
{
[STYLE:CHOICE:67:60:70:2E][...]
[DelayOff][Cursor:00][Option:00]Deposit
[Cursor:01][Option:01]Withdraw
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $Choice_Banking_OnlyWithdraw
{
[STYLE:CHOICE:67:60:70:2E][...]
[DelayOff][PushColor][Color:0B]Deposit[PopColor]
[Cursor:00][Option:00]Withdraw
[Option:FF][DelayOn][SetCancel:01][EndChoice:01][END]
}

#string $Choice_Banking_OnlyDeposit
{
[STYLE:CHOICE:67:60:70:2E][...]
[DelayOff][PushColor][Color:0B]Withdraw[PopColor]
[Cursor:00][Option:00]Deposit
[Option:FF][DelayOn][SetCancel:01][EndChoice:01][END]
}

#string $Choice_Deposit % [STYLE:CHOICE:XCoords:YCoords:XLenght:YLenght]
{
[STYLE:CHOICE:47:60:D0:2E][...]
[DelayOff][Cursor:00][Option:00]A Specific Amount
[Cursor:01][Option:01]All My Current Coins
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $Choice_Withdraw % [STYLE:CHOICE:XCoords:YCoords:XLenght:YLenght]
{
[STYLE:CHOICE:27:60:F0:2E][...]
[DelayOff][Cursor:00][Option:00]A Specific Amount
[Cursor:01][Option:01]The Biggest Amount Possible
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $String_Fishmael_WithdrawDeposit_Welcome
{
[STYLE:RIGHT][...]
Okay, you want to [PushColor][Color:19][Var:01][PopColor].
What do you have in mind?
[Func_04][END]
}

#string $String_Fishmael_Welcome
{
[STYLE:RIGHT][...]
Hello Mario! You wanna do some
banking?
[Func_04][END]
}

#string $String_Fishmael_Welcome_Cancel
{
[STYLE:RIGHT][...]
Hello Mario! Looks like
you don't have a single penny at
the moment.
[WAIT][NEXT][...]
Please come back, when you
have some coins in your
pocket.
[WAIT][END]
}



#string $String_Fishmael_LostCoins_1stTime
{
[STYLE:RIGHT][...]
Hi Mario, hmm... you lost some
coins inside the Pit didn't you?
[WAIT][NEXT][...]
I'm afraid to tell you but...
[WAIT][NEXT][...]
Looks like they took your
debit card too!
[WAIT][NEXT][...]
Sorry but I need that card
to being able to do any
operation on your account.
[WAIT][END]
}

#string $String_Fishmael_LostCoins
{
[STYLE:RIGHT][...]
Mario, you need to get back
those coins and your card
as soon as possible!
[WAIT][END]
}

#string $String_Fishmael_CardLosted
{
[STYLE:RIGHT][...]
Looks like you wasn't able to
get your card back from the
Pit... yikes...
[WAIT][NEXT][...]
Don't worry my friend
I've got you covered!
[WAIT][NEXT][...]
I was searching in all my stuff
and looks like I have a few
replacement cards.
[WAIT][NEXT][...]
I will give you this one for free.
But keep in mind the next time
I will probably ask you for a
few coins.
[WAIT][NEXT][...]
Got it?
[WAIT][END]
}

#string $String_Fishmael_Cancel
{
[NEXT][...]
Come back anytime soon!
[WAIT][END]
}

#string $String_Fishmael_HowMuch
{
[STYLE:RIGHT][...]
How much do you want to
[PushColor][Color:19][Var:01][PopColor]?
[Func_04][END]
}

#string $String_Fishmael_Confirmation
{
[STYLE:RIGHT][...]
Are you sure you want to
[PushColor][Color:19][Var:01][PopColor] the following amount?
[Func_04][END]
}

#string $String_value_deposit
{
deposit[END]
}

#string $String_value_withdraw
{
withdraw[END]
}

#string $Choice_YesNo % [STYLE:CHOICE:XCoords:YCoords:XLenght:YLenght]
{
[STYLE:CHOICE:70:30:50:2E][...]
[DelayOff][Cursor:00][Option:00]Yes
[Cursor:01][Option:01]No
[Option:FF][DelayOn][SetCancel:01][EndChoice:02][END]
}

%%
%	Oaklie
%%

#new:NpcGroup $NpcGroup_Oaklie
{
  00000006 $Fishmael_Settings ~Vec3f:NPC_Oaklie
  00A40D01 $Script_Init_Oaklie 00000000 00000000 00000000 
  ~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
  00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 
  00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 00BE0001 
  00000000 00000000 00000000 $Tattle_Oaklie
}

% All data, functions and scripts for oaklie are in:
% globals/patch/pt_00_OaklieAndChuck_Data.patch

% This scripts need to be still here:

#new:Script $Script_Init_Chuck
{
	Call     BindNpcInteract	( .Npc:Self $Script_Interact_Chuck )
	Return
	End
}

#new:Script $Script_Interact_Chuck
{
	%% Game Intro
	% When Meeting Oaklie, Fishmael and Chuck
	Call	GetSelfVar ( 5 *Var[0] )
	% If the player has already meet this npc and he need to talk to the other guys
	If	*Var[0] == .True
		Call    SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 $String_GlMario )
		Return
	EndIf
	If *Flag_MeetingAtLobby == .False
		Exec	$Script_MeetingChuck *Var[A]
		Exec	$SkipCutscene_MeetingChuck
		Loop
			DoesScriptExist ( *Var[A] *Var[0] )
			If *Var[0] == .False
				BreakLoop
			EndIf
			Wait 1
		EndLoop
		Set 	*Flag_Skip .False
		Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
		Call	SetSelfVar ( 5 .True )
		Return
	EndIf
	% Move Mario position when he start talking to Chuck
	Set		*Var[0] 8	% entry index
	Call    $Function_GetPos
	Call    PlayerMoveTo 	( *Var[1] *Var[3] 13` )
	Call    SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 $String_Chuck_Welcome )
	Call	ShowChoice 	  ( $Choice_Chuck )
	Switch *Var[0]
		Case == 0 % Furniture
			Call	CloseMessage
			Thread % Init list cursor position, to not set the cursor to the last element from the list
				Wait 1
				Call $WriteAddress ( 8010D648 2 0 .False .False ) % 8010D648 - Cursor List
			EndThread
			ExecWait $Script_Chuck_Furniture
		Case == 1 % Skins
			Call	CloseMessage
			Set		*MapVar[D] *PlayerSkin % 1st time about to open the skin list
			ExecWait $Script_Chuck_Skins
		Case == 2 % Cancel
			Call    ContinueSpeech ( .Npc:Self 00AF0004 00AF0001 00000000 $String_Chuck_Bye )
	EndSwitch
	Return
	End
}

#new:Script $Script_MeetingChuck
{
	Call    SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 $String_Chuck_Meeting_1 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 $String_Chuck_Meeting_2 )
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc:Self 00AF0004 00AF0001 00000000 $String_Chuck_Meeting_3 )
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Return
	End
}

#new:Script $SkipCutscene_MeetingChuck
{
	Set 	*Flag_Skip .True
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			Call	SetNpcAnimation 	( 8 00AF0001 ) % idle
			Call	SetPlayerAnimation ( .PlayerAnim:StandStill ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#string $String_Chuck_Meeting_1
{
[STYLE:RIGHT][...]
So you're Mario, nice to meet ya'
I'm Chuck.
[WAIT][END]
}

#string $String_Chuck_Meeting_2
{
[STYLE:RIGHT][...]
It seems to me that the only way
to get out of this place is
related to that Pit.
[WAIT][NEXT][...]
So I figured the best approach
will be if all of us give you
support on this Mario.
[WAIT][NEXT][...]
Although I barely remember how
I even got here in first
place...
[WAIT][NEXT][...]
Isn't that strange?
Hmm... I guess our only
solution right now is that Pit.
[WAIT][END]
}

#string $String_Chuck_Meeting_3
{
[STYLE:RIGHT][...]
Listen to me Mario.
[WAIT][NEXT][...]
You must have already realized
that appearance is everything,
right?
[WAIT][NEXT][...]
Well, in everything related to
style I'm the right man for
you.
[WAIT][NEXT][...]
So talk to me if you want to
buy new clothes or if you want
to customize this place and
lift the mood a little bit here.
[WAIT][NEXT][...]
Got it?
[WAIT][END]
}

#new:Function $Function_ShowList_Furniture
{
	ADDIU     SP, SP, FFC0
	SW        S4, 28 (SP)
	COPY      S4, A0
	SW        RA, 3C (SP)
	SW        S8, 38 (SP)
	SW        S7, 34 (SP)
	SW        S6, 30 (SP)
	SW        S5, 2C (SP)
	SW        S3, 24 (SP)
	SW        S2, 20 (SP)
	SW        S1, 1C (SP)
	BEQ       A1, R0, .o38
	SW        S0, 18 (SP)
	SW        R0, 70 (S4)
	.o38
	LW        A3, 70 (S4)
	BEQ       A3, R0, .o58
	SW        A3, 10 (SP)
	ADDIU     V0, R0, 1
	BEQ       A3, V0, .o21C
	CLEAR     V0
	BEQ       R0, R0, .o428
	NOP
	.o58
	CLEAR     S7
	COPY      S2, S7
	ADDIU     S8, R0, 1
	LIA       S6, $Data_StringsBank_Furniture_1
	LIA       S5, $???_80244D24
	LIA       S1, $End[0]
	.o7C
	LW        S0, 0 (S5)
	ADDIU     V0, R0, FFFE
	BEQ       S0, V0, .oCC
	%CLEAR     S3 % NOP = Enable all elements in the list
	SLTI      V0, S0, FFFF
	BEQ       V0, R0, .oA8
	ADDIU     V0, R0, FFFD
	BEQ       S0, V0, .oEC
	CLEAR     A0
	BEQ       R0, R0, .o130
	LUI       A1, F5DE
	.oA8
	ADDIU     V0, R0, FFFF
	BNE       S0, V0, .o12C
	CLEAR     A0
	LAHU      V0, 8010F552
	BEQ       V0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.oCC
	CLEAR     A0
	LIO       A1, *Flag_MAC_98
	JAL       ~Func:get_variable
	RESERVED
	BEQ       V0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.oEC
	CLEAR     S0
	COPY      A0, S0
	LIO       A1, *StoryProgress
	JAL       ~Func:get_variable
	RESERVED
	SLTI      V0, V0, 6
	BNE       V0, R0, .o11C
	COPY      A0, S0
	LIO       A1, *Flag_MAC_EE
	JAL       ~Func:get_variable
	RESERVED
	SLTU      S0, R0, V0
	.o11C
	BEQ       S0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.o12C
	LIO       A1, *StoryProgress
	.o130
	JAL       ~Func:get_variable
	NOP
	SLT       V0, V0, S0
	BEQL      V0, R0, .o144
	ADDIU     S3, R0, 1
	.o144
	BEQ       S3, R0, .o1B0
	COPY      S0, S2
	LIA       V0, 80081398 % Load icon's script - 1 - Super Hammer
	SW        V0, 0 (S1)
	SW        S2, 108 (S1)
	SW        S8, 18C (S1)
	LW        V0, 0 (S6)
	SW        R0, 294 (S1)
	BGEZ      S2, .o174
	SW        V0, 84 (S1)
	ADDIU     S0, S2, 7
	.o174
	SRA       S0, S0, 3
	JAL       ~Func:get_global_byte
	%ADDIU     A0, S0, E % NOP = The icons don't get grayed when you already selected that element before
	SLL       S0, S0, 3
	SUBU      S0, S2, S0
	SLLV      S0, S8, S0
	AND       S0, V0, S0
	BEQ       S0, R0, .o1A8
	SW        R0, 210 (S1)
	LIA       V0, 80081398 % Load icon's script - 2 - Super Hammer
	SW        S8, 210 (S1)
	SW        V0, 0 (S1)
	.o1A8
	ADDIU     S1, S1, 4
	ADDIU     S7, S7, 1
	.o1B0
	ADDIU     S6, S6, 4
	ADDIU     S2, S2, 1
	SLTI      V0, S2, 13` % Max amount of elements in the list
	BNE       V0, R0, .o7C
	ADDIU     S5, S5, 4
	BNE       S7, R0, .o1D8
	ADDIU     V0, R0, D % List Style ID
	SW        R0, 84 (S4)
	BEQ       R0, R0, .o428
	ADDIU     V0, R0, 2
	.o1D8
	SAW       V0, $End[318]
	SAW       S7, $End[324]
	LW        V0, 7C (S4)
	LIA       A0, $End[0]
	JAL       800F4E40
	SW        V0, 328 (A0)
	JAL       800E98C4
	NOP
	JAL       800E97B8
	NOP
	ADDIU     V0, R0, 1
	SW        R0, 74 (S4)
	BEQ       R0, R0, .o424
	SW        V0, 70 (S4)
	.o21C
	LW        V0, 74 (S4)
	BNE       V0, R0, .o248
	ADDIU     V0, V0, 1
	LAH       V0, $End[32C]
	BEQ       V0, R0, .o424
	SW        V0, 78 (S4)
	JAL       800F13B0
	NOP
	LW        V0, 74 (S4)
	ADDIU     V0, V0, 1
	.o248
	SW        V0, 74 (S4)
	SLTI      V0, V0, F
	BNE       V0, R0, .o428
	CLEAR     V0
	JAL       800F1538
	NOP
	LW        V1, 78 (S4)
	ADDIU     V0, R0, FF
	BNE       V1, V0, .o280
	ADDIU     V1, V1, FFFF
	ADDIU     V0, R0, FFFF
	SW        V0, 84 (S4)
	BEQ       R0, R0, .o428
	ADDIU     V0, R0, 2
	.o280
	LW        V0, 78 (S4)
	LIA       A3, $End[0]
	SW        V1, 7C (S4)
	ADDIU     V0, V0, FFFF
	SLL       V0, V0, 2
	ADDU      V0, V0, A3
	LW        S8, 108 (V0)
	SLL       V0, S8, 2
	LTW       V0, V0 ( $Data_StringsBank_Furniture_2 )
	COPY      S0, S8
	BGEZ      S8, .o2C0
	SW        V0, 84 (S4)
	ADDIU     S0, S8, 7
	.o2C0
	SRA       S0, S0, 3
	ADDIU     S1, S0, E
	JAL       ~Func:get_global_byte
	COPY      A0, S1
	COPY      A0, S1
	SLL       S0, S0, 3
	LW        A3, 10 (SP)
	SUBU      S0, S8, S0
	SLLV      S0, A3, S0
	JAL       ~Func:set_global_byte
	OR        A1, V0, S0
	ADDIU     V0, R0, 3
	BNE       S8, V0, .o308
	CLEAR     A0
	LIO       A1, *Flag_KMR_49
	JAL       ~Func:set_variable
	ADDIU     A2, R0, 1
	.o308
	LIA       S4, $End[330]
	COPY      A2, S4
	LIA       S3, $Data_CardsImages
	LIA       S2, 0010F1B0
	LW        A1, 0 (S3)
	ADDIU     S5, S2, 3D86
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S5
	LIA       S0, $End[40B8]
	COPY      A2, S0
	LW        A1, 4 (S3)
	ADDIU     S6, S2, 200
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S6
	LIA       S1, $End[8250]
	ADDIU     V0, R0, 96
	SH        V0, 8 (S1)
	ADDIU     V0, R0, 69
	ADDIU     S7, R0, 2
	SW        S0, 4 (S1)
	SLL       S0, S8, 1
	SH        V0, A (S1)
	ADDU      V0, S0, S7
	SLLV      V0, V0, S7
	ADDU      V0, V0, S3
	SW        S4, 0 (S1)
	LIA       S4, $End[42C0]
	SW        S7, C (S1)
	SW        R0, 10 (S1)
	LW        A1, 0 (V0)
	COPY      A2, S4
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S5
	ADDIU     S0, S0, 3
	SLLV      S0, S0, S7
	ADDU      S0, S0, S3
	LIA       S3, $End[8048]
	LW        A1, 0 (S0)
	COPY      A2, S3
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S6
	CLEAR     A0
	ADDIU     V0, R0, 46
	SH        V0, 1C (S1)
	ADDIU     V0, R0, 5F
	SW        S4, 14 (S1)
	SW        S3, 18 (S1)
	SH        V0, 1E (S1)
	SW        S7, 20 (S1)
	LW        A3, 10 (SP)
	LIA       A1, $Function_OakChuck_802405BC
	%JAL       8012323C % Display Cards
	SW        A3, 24 (S1)
	SAW       V0, $End[8248]
	SAW       R0, $End[824C]
	BEQ       R0, R0, .o428
	COPY      V0, S7
	.o424
	CLEAR     V0
	.o428
	LW        RA, 3C (SP)
	LW        S8, 38 (SP)
	LW        S7, 34 (SP)
	LW        S6, 30 (SP)
	LW        S5, 2C (SP)
	LW        S4, 28 (SP)
	LW        S3, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	JR        RA
	ADDIU     SP, SP, 40
}

#new:Function $Function_OakChuck_802405BC
{
	ADDIU     SP, SP, FFB0
	SW        S3, 44 (SP)
	LIA       S3, $End[824C]
	SW        RA, 48 (SP)
	SW        S2, 40 (SP)
	SW        S1, 3C (SP)
	SW        S0, 38 (SP)
	LW        V0, 0 (S3)
	ADDIU     V0, V0, 14
	SW        V0, 0 (S3)
	SLTI      V0, V0, 100
	BNE       V0, R0, .o3C
	ADDIU     V0, R0, FF
	SW        V0, 0 (S3)
	.o3C
	LIA       S0, $End[8250]
	LW        A0, 0 (S0)
	LW        A3, C (S0)
	ADDIU     V0, R0, 55
	SW        V0, 18 (SP)
	ADDIU     V0, R0, 61
	ADDIU     S2, R0, 140
	SW        V0, 1C (SP)
	SW        R0, 20 (SP)
	SW        R0, 24 (SP)
	SW        S2, 28 (SP)
	LHU       A1, 8 (S0)
	ADDIU     S1, R0, F0
	SW        S1, 2C (SP)
	LW        V0, 10 (S0)
	LHU       A2, A (S0)
	LW        V1, 4 (S0)
	LBU       T0, 3 (S3)
	SW        V0, 10 (SP)
	SW        V1, 14 (SP)
	JAL       8012E9A0
	SW        T0, 30 (SP)
	LW        A0, 14 (S0)
	LW        A3, 20 (S0)
	ADDIU     V0, R0, A0
	SW        V0, 18 (SP)
	LHU       A1, 1C (S0)
	ADDIU     V0, R0, 66
	SW        V0, 1C (SP)
	SW        R0, 20 (SP)
	SW        R0, 24 (SP)
	SW        S2, 28 (SP)
	SW        S1, 2C (SP)
	LW        V0, 24 (S0)
	LHU       A2, 1E (S0)
	LW        V1, 18 (S0)
	LBU       T0, 3 (S3)
	SW        V0, 10 (SP)
	SW        V1, 14 (SP)
	JAL       8012E9A0
	SW        T0, 30 (SP)
	LW        RA, 48 (SP)
	LW        S3, 44 (SP)
	LW        S2, 40 (SP)
	LW        S1, 3C (SP)
	LW        S0, 38 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

#new:Function $Function_ShowList_Skins1
{
	ADDIU     SP, SP, FFC0
	SW        S4, 28 (SP)
	COPY      S4, A0
	SW        RA, 3C (SP)
	SW        S8, 38 (SP)
	SW        S7, 34 (SP)
	SW        S6, 30 (SP)
	SW        S5, 2C (SP)
	SW        S3, 24 (SP)
	SW        S2, 20 (SP)
	SW        S1, 1C (SP)
	BEQ       A1, R0, .o38
	SW        S0, 18 (SP)
	SW        R0, 70 (S4)
	.o38
	LW        A3, 70 (S4)
	BEQ       A3, R0, .o58
	SW        A3, 10 (SP)
	ADDIU     V0, R0, 1
	BEQ       A3, V0, .o21C
	CLEAR     V0
	BEQ       R0, R0, .o428
	NOP
	.o58
	CLEAR     S7
	COPY      S2, S7
	ADDIU     S8, R0, 1
	LIA       S6, $Data_StringsBank_Skins_1
	% The player has already beated the game?
	% Check if the global flag is true, I don't want to bother with Pop and Pushes so I just loaded
	% the flag manually
	LABU	  T0, 80357041 % Flag_Cheev_Global_1-7
	ANDI	  T0, T0, 8 % bit3 % *Flag_Cheev_Global_03
	BEQ		  T0, R0, .GameNotBeated
	NOP
	LIA       S6, $Data_StringsBank_Skins_1_GameBeated
	.GameNotBeated
	LIA       S5, $???_80244D24_Skins
	LIA       S1, $End[0]
	.o7C
	LW        S0, 0 (S5)
	ADDIU     V0, R0, FFFE
	BEQ       S0, V0, .oCC
	%CLEAR     S3 % NOP = Enable all elements in the list
	SLTI      V0, S0, FFFF
	BEQ       V0, R0, .oA8
	ADDIU     V0, R0, FFFD
	BEQ       S0, V0, .oEC
	CLEAR     A0
	BEQ       R0, R0, .o130
	LUI       A1, F5DE
	.oA8
	ADDIU     V0, R0, FFFF
	BNE       S0, V0, .o12C
	CLEAR     A0
	LAHU      V0, 8010F552
	BEQ       V0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.oCC
	CLEAR     A0
	LIO       A1, *Flag_MAC_98
	JAL       ~Func:get_variable
	RESERVED
	BEQ       V0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.oEC
	CLEAR     S0
	COPY      A0, S0
	LIO       A1, *StoryProgress
	JAL       ~Func:get_variable
	RESERVED
	SLTI      V0, V0, 6
	BNE       V0, R0, .o11C
	COPY      A0, S0
	LIO       A1, *Flag_MAC_EE
	JAL       ~Func:get_variable
	RESERVED
	SLTU      S0, R0, V0
	.o11C
	BEQ       S0, R0, .o144
	NOP
	BEQ       R0, R0, .o144
	ADDIU     S3, R0, 1
	.o12C
	LIO       A1, *StoryProgress
	.o130
	JAL       ~Func:get_variable
	NOP
	SLT       V0, V0, S0
	BEQL      V0, R0, .o144
	ADDIU     S3, R0, 1
	.o144
	BEQ       S3, R0, .o1B0
	COPY      S0, S2
	LIA       V0, $IconScript_MarioHead % Load icon's script - 1 - Mario Head (was Star 80086498)
	SW        V0, 0 (S1)
	SW        S2, 108 (S1)
	SW        S8, 18C (S1)
	LW        V0, 0 (S6)
	SW        R0, 294 (S1)
	BGEZ      S2, .o174
	SW        V0, 84 (S1)
	ADDIU     S0, S2, 7
	.o174
	SRA       S0, S0, 3
	JAL       ~Func:get_global_byte
	%ADDIU     A0, S0, E % NOP = The icons don't get grayed when you already selected that element before
	SLL       S0, S0, 3
	SUBU      S0, S2, S0
	SLLV      S0, S8, S0
	AND       S0, V0, S0
	BEQ       S0, R0, .o1A8
	SW        R0, 210 (S1)
	LIA       V0, $IconScript_MarioHead % Load icon's script - 2 - Mario Head (was Star 80086498)
	SW        S8, 210 (S1)
	SW        V0, 0 (S1)
	.o1A8
	ADDIU     S1, S1, 4
	ADDIU     S7, S7, 1
	.o1B0
	ADDIU     S6, S6, 4
	ADDIU     S2, S2, 1
	SLTI      V0, S2, 16` % Max amount of elements in the list
	BNE       V0, R0, .o7C
	ADDIU     S5, S5, 4
	BNE       S7, R0, .o1D8
	ADDIU     V0, R0, D % List Style ID
	SW        R0, 84 (S4)
	BEQ       R0, R0, .o428
	ADDIU     V0, R0, 2
	.o1D8
	SAW       V0, $End[318]
	SAW       S7, $End[324]
	% Check if is the 1st time opening this list (player didn't pressed b to go back to this list)
	LAW		  A0, 802DBCDC % load *MapVar[D]
	BEQ		  A0, R0, .Isn1stTime
	NOP
	SAW		 R0, 802DBCDC % clear *MapVar[D]
	BEQ		 R0, R0, .LoadSkinID
	NOP
	.Isn1stTime
	LW        V0, 7C (S4) % load last cursor pos
	SLTIU	  A0, V0, 15` % Last PlayerSkin
	BNE		  A0, R0, .DontLoadSkinID % isn't a pointer
	NOP
	.LoadSkinID
	LABU	  V0, 8035613A % *PlayerSkin
	.DontLoadSkinID
	LIA       A0, $End[0]
	JAL       800F4E40
	SW        V0, 328 (A0)
	JAL       800E98C4
	NOP
	JAL       800E97B8
	NOP
	ADDIU     V0, R0, 1
	SW        R0, 74 (S4)
	BEQ       R0, R0, .o424
	SW        V0, 70 (S4)
	.o21C
	LW        V0, 74 (S4)
	BNE       V0, R0, .o248
	ADDIU     V0, V0, 1
	LAH       V0, $End[32C]
	BEQ       V0, R0, .o424
	SW        V0, 78 (S4)
	JAL       800F13B0
	NOP
	LW        V0, 74 (S4)
	ADDIU     V0, V0, 1
	.o248
	SW        V0, 74 (S4)
	SLTI      V0, V0, F
	BNE       V0, R0, .o428
	CLEAR     V0
	JAL       800F1538
	NOP
	LW        V1, 78 (S4)
	ADDIU     V0, R0, FF
	BNE       V1, V0, .o280
	ADDIU     V1, V1, FFFF
	ADDIU     V0, R0, FFFF
	SW        V0, 84 (S4)
	BEQ       R0, R0, .o428
	ADDIU     V0, R0, 2
	.o280
	LW        V0, 78 (S4)
	LIA       A3, $End[0]
	SW        V1, 7C (S4)
	ADDIU     V0, V0, FFFF
	SLL       V0, V0, 2
	ADDU      V0, V0, A3
	LW        S8, 108 (V0)
	SLL       V0, S8, 2
	LTW       V0, V0 ($Data_StringsBank_Skins_2)
	COPY      S0, S8
	BGEZ      S8, .o2C0
	SW        V0, 84 (S4)
	ADDIU     S0, S8, 7
	.o2C0
	SRA       S0, S0, 3
	ADDIU     S1, S0, E
	JAL       ~Func:get_global_byte
	COPY      A0, S1
	COPY      A0, S1
	SLL       S0, S0, 3
	LW        A3, 10 (SP)
	SUBU      S0, S8, S0
	SLLV      S0, A3, S0
	JAL       ~Func:set_global_byte
	OR        A1, V0, S0
	ADDIU     V0, R0, 3
	BNE       S8, V0, .o308
	CLEAR     A0
	LIO       A1, *Flag_KMR_49
	JAL       ~Func:set_variable
	ADDIU     A2, R0, 1
	.o308
	LIA       S4, $End[330]
	COPY      A2, S4
	LIA       S3, $Data_CardsImages
	LIA       S2, 0010F1B0
	LW        A1, 0 (S3)
	ADDIU     S5, S2, 3D86
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S5
	LIA       S0, $End[40B8]
	COPY      A2, S0
	LW        A1, 4 (S3)
	ADDIU     S6, S2, 200
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S6
	LIA       S1, $End[8250]
	ADDIU     V0, R0, 96
	SH        V0, 8 (S1)
	ADDIU     V0, R0, 69
	ADDIU     S7, R0, 2
	SW        S0, 4 (S1)
	SLL       S0, S8, 1
	SH        V0, A (S1)
	ADDU      V0, S0, S7
	SLLV      V0, V0, S7
	ADDU      V0, V0, S3
	SW        S4, 0 (S1)
	LIA       S4, $End[42C0]
	SW        S7, C (S1)
	SW        R0, 10 (S1)
	LW        A1, 0 (V0)
	COPY      A2, S4
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S5
	ADDIU     S0, S0, 3
	SLLV      S0, S0, S7
	ADDU      S0, S0, S3
	LIA       S3, $End[8048]
	LW        A1, 0 (S0)
	COPY      A2, S3
	ADDU      A0, A1, S2
	JAL       ~Func:dma_copy
	ADDU      A1, A1, S6
	CLEAR     A0
	ADDIU     V0, R0, 46
	SH        V0, 1C (S1)
	ADDIU     V0, R0, 5F
	SW        S4, 14 (S1)
	SW        S3, 18 (S1)
	SH        V0, 1E (S1)
	SW        S7, 20 (S1)
	LW        A3, 10 (SP)
	LIA       A1, $Function_OakChuck_802405BC_Skins
	%JAL       8012323C % Display Cards
	SW        A3, 24 (S1)
	SAW       V0, $End[8248]
	SAW       R0, $End[824C]
	BEQ       R0, R0, .o428
	COPY      V0, S7
	.o424
	CLEAR     V0
	.o428
	LW        RA, 3C (SP)
	LW        S8, 38 (SP)
	LW        S7, 34 (SP)
	LW        S6, 30 (SP)
	LW        S5, 2C (SP)
	LW        S4, 28 (SP)
	LW        S3, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	JR        RA
	ADDIU     SP, SP, 40
}

% This icon is loaded only when the game is
% paused, So I just copy and pasted the icon data
% here to being able to load it.
#new:Unknown $IconScript_MarioHead
{
00000008
00000007 00000003 00000003
00000002 0000003C $MarioIcon_Image $MarioIcon_Palette
00000003 00000000
}

#new:Function $Function_OakChuck_802405BC_Skins
{
	ADDIU     SP, SP, FFB0
	SW        S3, 44 (SP)
	LIA       S3, $End[824C]
	SW        RA, 48 (SP)
	SW        S2, 40 (SP)
	SW        S1, 3C (SP)
	SW        S0, 38 (SP)
	LW        V0, 0 (S3)
	ADDIU     V0, V0, 14
	SW        V0, 0 (S3)
	SLTI      V0, V0, 100
	BNE       V0, R0, .o3C
	ADDIU     V0, R0, FF
	SW        V0, 0 (S3)
	.o3C
	LIA       S0, $End[8250]
	LW        A0, 0 (S0)
	LW        A3, C (S0)
	ADDIU     V0, R0, 55
	SW        V0, 18 (SP)
	ADDIU     V0, R0, 61
	ADDIU     S2, R0, 140
	SW        V0, 1C (SP)
	SW        R0, 20 (SP)
	SW        R0, 24 (SP)
	SW        S2, 28 (SP)
	LHU       A1, 8 (S0)
	ADDIU     S1, R0, F0
	SW        S1, 2C (SP)
	LW        V0, 10 (S0)
	LHU       A2, A (S0)
	LW        V1, 4 (S0)
	LBU       T0, 3 (S3)
	SW        V0, 10 (SP)
	SW        V1, 14 (SP)
	JAL       8012E9A0
	SW        T0, 30 (SP)
	LW        A0, 14 (S0)
	LW        A3, 20 (S0)
	ADDIU     V0, R0, A0
	SW        V0, 18 (SP)
	LHU       A1, 1C (S0)
	ADDIU     V0, R0, 66
	SW        V0, 1C (SP)
	SW        R0, 20 (SP)
	SW        R0, 24 (SP)
	SW        S2, 28 (SP)
	SW        S1, 2C (SP)
	LW        V0, 24 (S0)
	LHU       A2, 1E (S0)
	LW        V1, 18 (S0)
	LBU       T0, 3 (S3)
	SW        V0, 10 (SP)
	SW        V1, 14 (SP)
	JAL       8012E9A0
	SW        T0, 30 (SP)
	LW        RA, 48 (SP)
	LW        S3, 44 (SP)
	LW        S2, 40 (SP)
	LW        S1, 3C (SP)
	LW        S0, 38 (SP)
	JR        RA
	ADDIU     SP, SP, 50
}

#new:Script $Script_Chuck_Skins
{
Set		*Flag_IgnoreAButton_Lists .False
Set		*Flag_IgnoreAButton_ErrorSfx .False
Call 	AdjustCam 	( .Cam:Default *Fixed[8.0] *Fixed[25.0] *Fixed[250.0] *Fixed[20.0] *Fixed[-7.0] ) % camID ? RightOffset BoomLenght BoomPitch ViewPitch
Call	$WriteAddress ( $DescriptionBox_Data 0 .True 0 .False ) % show only the description box and the list
Call	$WriteAddress ( $DescriptionBox_Data 0 .True 2 .False ) % set menu id
Set		*MapVar[A] *PlayerSkin
% Swap Skins according to the cursor position
Thread
	Loop
		Call	$ReadAddress ( 8010D64B 0 *Var[1] 0 .False ) % read cursor position
		Switch *Var[1]
			Case == 0 % Default
				Set *PlayerSkin 0
			Case == 1 % Doopliss
				Set *PlayerSkin 1
			Case == 2 % B&W
				Set *PlayerSkin 2
			Case == 3 % Gameboy
				Set *PlayerSkin 3
			Case == 4 % Luigi
				Set *PlayerSkin 4
			Case == 5 % Wario
				Set *PlayerSkin 5
			Case == 6 % Waluigi
				Set *PlayerSkin 6
			Case == 7 % Fire Flower
				Set *PlayerSkin 7
			Case == 8 % Icy Flower
				Set *PlayerSkin 8
			Case == 9 % Jumpman
				Set *PlayerSkin 9
			Case == 10` % SMB1
				Set *PlayerSkin 10`
			Case == 11` % SMB3
				Set *PlayerSkin 11`
			Case == 12` % Maker
				Set *PlayerSkin 12`
			Case == 13` % Modern
				Set *PlayerSkin 13`
			Case == 14` % Black Pit
				If *Flag_Cheev_Global_03 == .True
					Set *PlayerSkin 14`
				Else
					Set *PlayerSkin 0 % Default
				EndIf
			Case == 15` % Gold
				Set *PlayerSkin 15`
		EndSwitch
		Call SetPlayerAnimation ( .PlayerAnim:StandStill )
		% Set what will happen when pressing A ( Error Sfx or Buy that Skin )
		Call	$ReadAddress ( 8010D64B 0 *Var[1] 0 .False ) % read cursor position
		Switch *Var[1]
			Case == 0 % Default Skin
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
			Case == 1 % Doopliss
				% The player can buy this?
				If *HighestFloor_Rogue < 20`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 2 % B&W
				% The player can buy this?
				If *HighestFloor_Classic < 20`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 3 % Gameboy
				% The player can buy this?
				If *HighestFloor_Rogue < 40`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 4 % Luigi
				% The player can buy this?
				If *HighestFloor_Classic < 40`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 5 % Wario
				% The player can buy this?
				If *HighestFloor_Rogue < 60`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 6 % Waluigi
				% The player can buy this?
				If *HighestFloor_Classic < 60`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 7 % Fire Flower
				% The player can buy this?
				If *HighestFloor_Rogue < 80`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 8 % Ice Flower
				% The player can buy this?
				If *HighestFloor_Classic < 80`
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 9 % Jumpman
				% The player can buy this?
				If *Flag_RoguelikeBeated == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 10` % SMB1
				% The player can buy this?
				If *Flag_Cheev_Rogue_17 == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 11` % SMB3
				% The player can buy this?
				If *Flag_ClassicBeated == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 12` % Maker
				% The player can buy this?
				If *Flag_Cheev_Classic_22 == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 13` % Modern
				% The player can buy this?
				If *Flag_Mistar == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 14` % Black Pit
				% The player can buy this?
				If *Flag_Cheev_Global_03 == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
			Case == 15` % Gold
				% The player can buy this?
				If *Flag_Cheev_Global_01 == .False
					% can't be buyed
					Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
					Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
				Else
					% can be buyed or has been already buyed
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
				EndIf
		EndSwitch
		Set		*MapVar[B] *Var[1] % save selected element
		Call	$ReadAddress ( $DescriptionBox_Data 0 *Var[A] 0 .False )
		If	*Var[A] == .False % Set Mario back to oaklie
			BreakLoop
		EndIf
		Wait 1
	EndLoop
EndThread
Call	$Function_ShowList_Skins1 % display skins menu
Wait    5
If  *Var[0]  ==  -1` % Go back
	ExecWait $Script_Chuck_Skins_Restore
	Set		*Flag_IgnoreAButton_Lists .False
	Set		*Flag_IgnoreAButton_ErrorSfx .False
	Call    ResetCam	( .Cam:Default *Fixed[4.0] ) % Reset Zoom
	Return
EndIf
% Check if the skin is even available to be purchased
Switch *MapVar[B]
	Case == 0 % Default
		Wait 1
		Goto End
	Case == 1 % Doopliss
		If *HighestFloor_Rogue < 20`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 2 % B&W
		If *HighestFloor_Classic < 20`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 3 % Gameboy
		If *HighestFloor_Rogue < 40`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 4 % Luigi
		If *HighestFloor_Classic < 40`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 5 % Wario
		If *HighestFloor_Rogue < 60`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 6 % Waluigi
		If *HighestFloor_Classic < 60`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 7 % Fire Flower
		If *HighestFloor_Rogue < 80`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 8 % Icy Flower
		If *HighestFloor_Classic < 80`
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 9 % Jumpman
		If *Flag_RoguelikeBeated == .False
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 10` % SMB1
		If *Flag_Cheev_Rogue_17 == .False
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 11` % SMB3
		If *Flag_ClassicBeated == .False
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 12` % Maker
		If *Flag_Cheev_Classic_22 == .False
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 13` % Modern
		If *Flag_Mistar == .False
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 14` % Black Pit
		If *Flag_Cheev_Global_03 == .False % Game beated flag
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
	Case == 15` % Gold
		If *Flag_Cheev_Global_01 == .False % Platinum Flag
			ExecWait $Script_Chuck_Skins_Restore
			Call PlaySound ( 21D ) % Error
			Jump $Script_Chuck_Skins
		EndIf
EndSwitch
% Check if the selected skin has been already purchased if not, ask for
% confirmation.
Switch *MapVar[B]
	Case == 1 % Doopliss
		Set *Var[4] *Flag_Skin01
	Case == 2 % B&W
		Set *Var[4] *Flag_Skin02
	Case == 3 % Gameboy
		Set *Var[4] *Flag_Skin03
	Case == 4 % Luigi
		Set *Var[4] *Flag_Skin04
	Case == 5 % Wario
		Set *Var[4] *Flag_Skin05
	Case == 6 % Waluigi
		Set *Var[4] *Flag_Skin06
	Case == 7 % Fire Flower
		Set *Var[4] *Flag_Skin07
	Case == 8 % Icy Flower
		Set *Var[4] *Flag_Skin08
	Case == 9 % Jumpman
		Set *Var[4] *Flag_Skin09
	Case == 10` % SMB1
		Set *Var[4] *Flag_Skin10
	Case == 11` % SMB3
		Set *Var[4] *Flag_Skin11
	Case == 12` % Maker
		Set *Var[4] *Flag_Skin12
	Case == 13` % Modern
		Set *Var[4] *Flag_Skin13
	Case == 14` % Black Pit
		Set *Var[4] *Flag_Skin14
	Case == 15` % Gold
		Set *Var[4] *Flag_Cheev_Global_01
EndSwitch
% already purchased
If *Var[4] == .True
	Wait 1
	If *PlayerSkin != 0
		Set	*Flag_Cheev_Global_18 .True
	EndIf
	Goto End
EndIf
% Check if the player even have enough coins.
Call	$ReadAddress ( 803560DC 2 *Var[2] 0 .False ) % get Bank Account
Call	AddCoin ( 0 ) % get Coins
Add		*Var[2] *Var[0]
% Get Skin Price
Switch *MapVar[B]
	Case == 1 % Doopliss
		Set *Var[3] 100`
	Case == 2 % B&W
		Set *Var[3] 150`
	Case == 3 % Gameboy
		Set *Var[3] 150`
	Case == 4 % Luigi
		Set *Var[3] 200`
	Case == 5 % Wario
		Set *Var[3] 200`
	Case == 6 % Waluigi
		Set *Var[3] 250`
	Case == 7 % Fire Flower
		Set *Var[3] 300`
	Case == 8 % Icy Flower
		Set *Var[3] 300`
	Case == 9 % Jumpman
		Set *Var[3] 350`
	Case == 10` % SMB1
		Set *Var[3] 400`
	Case == 11` % SMB3
		Set *Var[3] 350`
	Case == 12` % Maker
		Set *Var[3] 400`
	Case == 13` % Modern
		Set *Var[3] 400`
	Case == 14` % Black Pit
		Set *Var[3] 500`
	Case == 15` % Gold
		Set *Var[3] 0
EndSwitch
% Hide the description Box when the asking prompt appears
Call	$WriteAddress ( $DescriptionBox_Data 2 .False 0 .False )
Call	ShowCoinCounter ( .True )
Set		*BankTextBoxPosition 1
Set		*TalkingToFishmael 	.True % show bank ammount
If	*Var[2] < *Var[3] % not enough coins
	Call 	PlaySound ( 21D ) % Error
	Call	ShowMessageAtScreenPos 	( $String_BuySkin_NotEnoughCoins A0 28 )
	Call	CloseMessage
	% Close coins boxes
	Call	ShowCoinCounter ( .False )
	Call	$Function_BankCoins_Close
	Call	$Function_BankCoins_UseLastFrame
	ExecWait $Script_Chuck_Skins_Restore
	Jump $Script_Chuck_Skins
EndIf
Call	ShowMessageAtScreenPos 	( $String_BuySkin_Confirmation A0 28 )
Call    ShowChoice    ( 001E001D ) % yes no
If *Var[0] == 1 % no
	Call	CloseMessage
	% Close coins boxes
	Call	ShowCoinCounter ( .False )
	Call	$Function_BankCoins_Close
	Call	$Function_BankCoins_UseLastFrame
	ExecWait $Script_Chuck_Skins_Restore
	Jump $Script_Chuck_Skins
EndIf
Add *SkinsPurchased 1
If *SkinsPurchased == 14`
	Set *Flag_Cheev_Global_19 .True
EndIf
% Substract coins
% Sub from Bank Account
Call CloseMessage
Set *Var[1] *Var[3] % move amount to sub to Var1
SetTimescale *Fixed[15.0]
Loop
	Call	$Function_LoadBankCoins 	( *Var[3] )
	If	*Var[3] == 0 % If the account is empty, break
		BreakLoop
	EndIf
	Call	PlaySound ( 211 ) % Coin
	Call	$Function_SubCoinsFromAccount
	Sub		*Var[1] 1
	If	*Var[1] == 0 % If the ammount has been fully substracted
		Goto SkinPurchased
	EndIf
	Wait	1
EndLoop
SetTimescale *Fixed[1.0] % Back to Normal
% If the amount still isn't 0, use Mario's coins now
% Sub from Mario's pocket
If	*Var[1] != 0
	Mul	*Var[1] -1`
	Call AddCoin ( *Var[1] )
EndIf
Label	SkinPurchased
% Close coins boxes
Call	ShowCoinCounter ( .False )
Call	$Function_BankCoins_Close
Call	$Function_BankCoins_UseLastFrame
% Set Purchased Flag
Switch *MapVar[B]
	Case == 1 % Doopliss
		Set *Flag_Skin01 .True
	Case == 2 % B&W
		Set *Flag_Skin02 .True
	Case == 3 % Gameboy
		Set *Flag_Skin03 .True
	Case == 4 % Luigi
		Set *Flag_Skin04 .True
	Case == 5 % Wario
		Set *Flag_Skin05 .True
	Case == 6 % Waluigi
		Set *Flag_Skin06 .True
	Case == 7 % Fire Flower
		Set *Flag_Skin07 .True
	Case == 8 % Icy Flower
		Set *Flag_Skin08 .True
	Case == 9 % Jumpman
		Set *Flag_Skin09 .True
	Case == 10` % SMB1
		Set *Flag_Skin10 .True
	Case == 11` % SMB3
		Set *Flag_Skin11 .True
	Case == 12` % Maker
		Set *Flag_Skin12 .True
	Case == 13` % Modern
		Set *Flag_Skin13 .True
	Case == 14` % Black Pit
		Set *Flag_Skin14 .True
	%Case == 15` % Gold % this skin get automatically unlocked when you beat all challenges
		%Set *Flag_Skin15 .True
EndSwitch
% Ask if you want to equip this new skin
Call	ShowMessageAtScreenPos 	( $String_BuySkin_Confirmation2 A0 28 )
Call	ShowChoice ( 001E001D ) % yes no
If *Var[0] == 1 % no
	Wait 1
	Call	CloseMessage
	ExecWait $Script_Chuck_Skins_Restore
	Jump $Script_Chuck_Skins
EndIf
Call	CloseMessage
Set 	*Flag_Cheev_Global_18 .True
Call	PlaySound ( 0010 ) % game saved
Label	End
Set		*Flag_IgnoreAButton_Lists .False
Set		*Flag_IgnoreAButton_ErrorSfx .False
Call	$WriteAddress ( $DescriptionBox_Data 2 .False 0 .False ) % Hide Box
Call    ResetCam	( .Cam:Default *Fixed[4.0] ) % Reset Zoom
Return
End
}

#string $String_Chuck_Welcome
{
[STYLE:RIGHT][...]
Hello Mario, what can I do for
you?
[Func_04][END]
}

#string $String_Chuck_Bye
{
[NEXT][...]
Take care.
[WAIT][END]
}

#string $Choice_Chuck
{
[STYLE:CHOICE:5F:60:80:2E][...]
[DelayOff][Cursor:00][Option:00]Furniture
[Cursor:01][Option:01]Skins
[Option:FF][DelayOn][SetCancel:02][EndChoice:02][END]
}

#string $String_BuySkin_NotEnoughCoins
{
[STYLE:INSPECT][...]
This skin has a cost of [PushColor][Color:07][Var:01][PopColor] coins
You don't have enough coins.
[WAIT][END]
}

#string $String_BuySkin_Confirmation
{
[STYLE:INSPECT][...]
Do you want to buy this skin
for [PushColor][Color:07][Var:01][PopColor] coins?
[Func_04][END]
}

#string $String_BuySkin_Confirmation2
{
[STYLE:INSPECT][...]
Do you want to equip this skin?
[Func_04][END]
}

#string $String_BuyFurniture_NotEnoughCoins
{
[STYLE:INSPECT][...]
This furniture has a cost of
[PushColor][Color:07][Var:01][PopColor] coins.

You don't have enough coins.
[WAIT][END]
}

#string $String_BuyFurniture_Confirmation
{
[STYLE:INSPECT][...]
Do you want to buy this
for [PushColor][Color:07][Var:01][PopColor] coins?
[Func_04][END]
}

#new:Script $Script_Chuck_Furniture
{
	Exec	$Script_SetAllFurniture
	Set		*Flag_IgnoreAButton_Lists .False
	Set		*Flag_IgnoreAButton_ErrorSfx .False
	Call	SetCamSpeed ( .Default *Fixed[1.0] ) % default speed
	Call	$WriteAddress ( $DescriptionBox_Data 0 .True 0 .False ) % show only the description box and the list
	Call	$WriteAddress ( $DescriptionBox_Data 0 0 2 .False ) % set menu id
	Set		*MapVar[A] .Default % cursor position
	Call    802D2520 ( 00010000 7 0 ) % Set Player Alpha as Zero
	Call	DisablePartnerAI ( .Default )
	/%  UNUSED - Was needed in the old lobby due to his size
	now mario isn't even visible when you're trying to buy a
	piece of furniture xd
	-----
	Swap player position to parade mario npc, and set the parade
	% npc's palette to mario's current palette
	%
	% Why swapping Mario's pos?
	% The camera move according to the cursor because
	% mario get moved to a new Camera Zone everytime.
	%
	% I know there's a lot of others approach to do this
	% like using Camera functions but I just wanted to
	% use this one :]
	Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
	Call	$WriteAddress ( 802CDB6C 2 0 0 .False ) % Disable SetNpcAnimation(?), to being able to overwrite parade mario palette
	% Set Skin for the Parade NPC
	% 805DB09A = Parade Mario(NPC#7) Palette ID
	Switch *PlayerSkin
		Case == 1 % Doopliss
			Call	$WriteAddress ( 805DB09A 0 1 0 .False )
		Case == 2 % B&W
			Call	$WriteAddress ( 805DB09A 0 2 0 .False )
		Case == 3 % Gameboy
			Call	$WriteAddress ( 805DB09A 0 3 0 .False )
		Case == 4 % Luigi
			Call	$WriteAddress ( 805DB09A 0 4 0 .False )
		Case == 5 % Wario
			Call	$WriteAddress ( 805DB09A 0 5 0 .False )
		Case == 6 % Waluigi
			Call	$WriteAddress ( 805DB09A 0 6 0 .False )
		Case == 7 % Fire Flower
			Call	$WriteAddress ( 805DB09A 0 7 0 .False )
		Case == 8 % Ice Flower
			Call	$WriteAddress ( 805DB09A 0 8 0 .False )
		Case == 9 % Jumpman
			Call	$WriteAddress ( 805DB09A 0 9 0 .False )
		Case == 10` % SMB1
			Call	$WriteAddress ( 805DB09A 0 10` 0 .False )
		Case == 11` % SMB3
			Call	$WriteAddress ( 805DB09A 0 11` 0 .False )
		Case == 12` % Maker
			Call	$WriteAddress ( 805DB09A 0 12` 0 .False )
		Case == 13` % Modern
			Call	$WriteAddress ( 805DB09A 0 13` 0 .False )
		Case == 14` % Gold
			Call	$WriteAddress ( 805DB09A 0 14` 0 .False )
		Default % Normal
			Call	$WriteAddress ( 805DB09A 0 0 0 .False )
	EndSwitch
	% Parade Mario is already visible?
	Call	GetNpcPos ( 7 0 *Var[3] 0 )
	If	*Var[3] < -300`
		Call	SetNpcPos ( 7 *Var[0] *Var[1] *Var[2] ) % Put Parade Mario in Player's pos
	EndIf%/
	% Choosing piece of Forniture
	% Move the camera and swap the models according to the cursor position
	Call	SetCamSpeed ( .Default *Fixed[7.0] )
	Thread
		Loop
			Call	$ReadAddress ( 8010D64B 0 *Var[1] 0 .False ) % read cursor position
			Switch *Var[1]
				Case == 0 % Candy Cane
					Call	SetPlayerPos ( -1005` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture1 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Classic < 20`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 1 % Sarcophagus
					Call	SetPlayerPos ( -954` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture2 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Rogue < 30`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 2 % Painting
					Call	SetPlayerPos ( -908` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture3 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Classic < 40`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 3 % Jack
					Call	SetPlayerPos ( -861` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture4 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Rogue < 50`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 4 % Statue
					Call	SetPlayerPos ( -811` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture5 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Classic < 60`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 5 % Flowers
					Call	SetPlayerPos ( -764` -237` -92` )
					% The player has already buyed this?
					If	*Flag_Furniture6 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Rogue < 70`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 6 % Snowman
					Call	SetPlayerPos ( -1007` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture7 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *HighestFloor_Classic < 80`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 7 % Ship
					Call	SetPlayerPos ( -958` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture8 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						If *Flag_RoguelikeBeated == .False
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 8 % Stars
					Call	SetPlayerPos ( -909` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture9 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						%Set *Flag_ClassicBeated .True % testing
						If *Flag_ClassicBeated == .False
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 9 % HBD
					Call	SetPlayerPos ( -861` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture10 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						%Set *Flag_Cheev_Global_03 .True % testing
						If *Flag_Cheev_Global_03 == .False
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 10` % Exor
					Call	SetPlayerPos ( -812` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture11 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						ExecWait $Script_GetChallengesCompleted % save in var2
						If *Var[2] < 21`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 11` % M&L
					Call	SetPlayerPos ( -765` -237` -34` )
					% The player has already buyed this?
					If	*Flag_Furniture12 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						ExecWait $Script_GetChallengesCompleted % save in var2
						If *Var[2] < 41`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
				Case == 12` % Late 90s
					Call	SetPlayerPos ( -1006` -237` 26` )
					% The player has already buyed this?
					If	*Flag_Furniture13 == .True
						% Show furniture and hide shadow
						Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
						Set		*Flag_IgnoreAButton_ErrorSfx .False
						Exec	$Script_SetAllFurniture
					Else
						% The player can buy this?
						ExecWait $Script_GetChallengesCompleted % save in var2
						%Set *Var[2] 82` % testing
						If *Var[2] != 82`
							% can't be buyed
							% Only show the shadow of this furniture
							Set		*Flag_IgnoreAButton_Lists .True % don't do anything when pressing A
							Set		*Flag_IgnoreAButton_ErrorSfx .True % Play an error sound fx if A get pressed
							Exec	$Script_ShowFurniture_CantBeBuyed
						Else
							% can be buyed
							% Show furniture and hide shadow
							Set		*Flag_IgnoreAButton_Lists .False
							Set		*Flag_IgnoreAButton_ErrorSfx .False
							Exec	$Script_ShowFurniture_CanBeBuyed
						EndIf
					EndIf
			EndSwitch
			Set		*MapVar[B] *Var[1] % save selected element
			% List closed
			Call	GetSelfVar ( 0 *Var[0] )
			If *Var[0] == .True % list closed by pressing B?
				Call	$ReadAddress ( $DescriptionBox_Data 0 *Var[A] 0 .False )
				If	*Var[A] == .False % Set Mario back to oaklie
					Call	DisablePlayerPhysics ( .True )
					Call    802D2520 ( 00010000 7 FF ) % Set Player Alpha as FF (fully visible)
					Call	SetPlayerPos ( ~Vec3d:ChuckInteract_Pos )
					Wait	5
					Exec	$Script_SetAllFurniture
					Set		*Flag_IgnoreAButton_Lists .False
					Set		*Flag_IgnoreAButton_ErrorSfx .False
					Call	SetSelfVar ( 0 .False )
					Call	DisablePlayerPhysics ( .False )
					Call	ResetCam ( .Default *Fixed[7.0] )
					Call	EnablePartnerAI
					BreakLoop
				EndIf
			EndIf
			Wait 1
		EndLoop
	EndThread
	% Open furniture List
	Call	$Function_ShowList_Furniture
	Wait    5
	If  *Var[0]  ==  -1 % Go back
		Wait  1
		Call	SetSelfVar ( 0 .True )
        Goto  	End
	EndIf
	% Buying Furniture Stuff
	Call	$ReadAddress ( 8010D64B 0 *Var[1] 0 .False ) % read last cursor position
	Switch *Var[1]
		Case == 0 % Candy Cane
			Call	SetPlayerPos ( -1005` -237` -92` )
		Case == 1 % Sarcophagus
			Call	SetPlayerPos ( -954` -237` -92` )
		Case == 2 % Painting
			Call	SetPlayerPos ( -908` -237` -92` )
		Case == 3 % Jack
			Call	SetPlayerPos ( -861` -237` -92` )
		Case == 4 % Statue
			Call	SetPlayerPos ( -811` -237` -92` )
		Case == 5 % Flowers
			Call	SetPlayerPos ( -764` -237` -92` )
		Case == 6 % Snowman
			Call	SetPlayerPos ( -1007` -237` -34` )
		Case == 7 % Ship
			Call	SetPlayerPos ( -958` -237` -34` )
		Case == 8 % Stars
			Call	SetPlayerPos ( -909` -237` -34` )
		Case == 9 % HBD
			Call	SetPlayerPos ( -861` -237` -34` )
		Case == 10` % Exor
			Call	SetPlayerPos ( -812` -237` -34` )
		Case == 11` % M&L
			Call	SetPlayerPos ( -765` -237` -34` )
		Case == 12` % Late 90s
			Call	SetPlayerPos ( -1006` -237` 26` )
	EndSwitch
	% Check if this furniture is available to be purchased
	Switch *MapVar[B]
		Case == 0 % Candy Cane
			If *HighestFloor_Classic < 20`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 1 % Sarcophagus
			If *HighestFloor_Rogue < 30`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 2 % Painting
			If *HighestFloor_Classic < 40`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 3 % Jack
			If *HighestFloor_Rogue < 50`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 4 % Statue
			If *HighestFloor_Classic < 60`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 5 % Flowers
			If *HighestFloor_Rogue < 70`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 6 % Snowman
			If *HighestFloor_Classic < 80`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 7 % Ship
			If *Flag_RoguelikeBeated == .False
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 8 % Stars
			If *Flag_ClassicBeated == .False
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 9 % HBD
			If *Flag_Cheev_Global_03 == .False
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 10` % Exor
			% Get Challenges Completed
			ExecWait $Script_GetChallengesCompleted % save in var2
			If *Var[2] < 21`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 11` % M&L
			% Get Challenges Completed
			ExecWait $Script_GetChallengesCompleted % save in var2
			If *Var[2] < 41`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
		Case == 12` % Late 90s
			% Get Challenges Completed
			ExecWait $Script_GetChallengesCompleted % save in var2
			%Set *Var[2] 82` % testing
			If *Var[2] != 82`
				ExecWait $Script_Chuck_Furniture_Restore
				Call PlaySound ( 21D ) % Error
				Jump $Script_Chuck_Furniture
			EndIf
	EndSwitch
	% Check if the selected furniture has been already purchased if not, ask for
	% confirmation.
	Switch *MapVar[B]
		Case == 0 % Candy Cane
			Set *Var[4] *Flag_Furniture1
		Case == 1 % Sarcophagus
			Set *Var[4] *Flag_Furniture2
		Case == 2 % Painting
			Set *Var[4] *Flag_Furniture3
		Case == 3 % Jack
			Set *Var[4] *Flag_Furniture4
		Case == 4 % Statue
			Set *Var[4] *Flag_Furniture5
		Case == 5 % Flowers
			Set *Var[4] *Flag_Furniture6
		Case == 6 % Snowman
			Set *Var[4] *Flag_Furniture7
		Case == 7 % Ship
			Set *Var[4] *Flag_Furniture8
		Case == 8 % Stars
			Set *Var[4] *Flag_Furniture9
		Case == 9 % HBD
			Set *Var[4] *Flag_Furniture10
		Case == 10` % Exor
			Set *Var[4] *Flag_Furniture11
		Case == 11` % M&L
			Set *Var[4] *Flag_Furniture12
		Case == 12` % Late 90s
			Set *Var[4] *Flag_Furniture13
	EndSwitch
	% already purchased
	If *Var[4] == .True
		ExecWait $Script_Chuck_Furniture_Restore
		Jump $Script_Chuck_Furniture
		Return
	EndIf
	% Check if the player even have enough coins.
	Call	$ReadAddress ( 803560DC 2 *Var[2] 0 .False ) % get Bank Account
	Call	AddCoin ( 0 ) % get Coins
	Add		*Var[2] *Var[0]
	% Get Skin Price
	Switch *MapVar[B]
		Case == 0 % Candy Cane
			Set *Var[3] 100`
		Case == 1 % Sarcophagus
			Set *Var[3] 200`
		Case == 2 % Painting
			Set *Var[3] 200`
		Case == 3 % Jack
			Set *Var[3] 300`
		Case == 4 % Statue
			Set *Var[3] 350`
		Case == 5 % Flowers
			Set *Var[3] 400`
		Case == 6 % Snowman
			Set *Var[3] 350`
		Case == 7 % Ship
			Set *Var[3] 400`
		Case == 8 % Stars
			Set *Var[3] 500`
		Case == 9 % HBD
			Set *Var[3] 20`
		Case == 10` % Exor
			Set *Var[3] 550`
		Case == 11` % M&L
			Set *Var[3] 350`
		Case == 12` % Late 90s
			Set *Var[3] 1000`
	EndSwitch
	% Hide the description Box when the asking prompt appears
	Call	$WriteAddress ( $DescriptionBox_Data 2 .False 0 .False )
	Call	ShowCoinCounter ( .True )
	Set		*BankTextBoxPosition 1
	Set		*TalkingToFishmael 	.True % show bank ammount
	If	*Var[2] < *Var[3] % not enough coins
		Call 	PlaySound ( 021D ) % Error
		Call	ShowMessageAtScreenPos 	( $String_BuyFurniture_NotEnoughCoins A0 28 )
		Call	CloseMessage
		% Close coins boxes
		Call	ShowCoinCounter ( .False )
		Call	$Function_BankCoins_Close
		Call	$Function_BankCoins_UseLastFrame
		ExecWait $Script_Chuck_Furniture_Restore
		Jump $Script_Chuck_Furniture
	EndIf
	Call	ShowMessageAtScreenPos 	( $String_BuyFurniture_Confirmation A0 28 )
	Call    ShowChoice    ( 001E001D ) % yes no
	If *Var[0] == 1 % no
		Call	CloseMessage
		% Close coins boxes
		Call	ShowCoinCounter ( .False )
		Call	$Function_BankCoins_Close
		Call	$Function_BankCoins_UseLastFrame
		ExecWait $Script_Chuck_Furniture_Restore
		Jump $Script_Chuck_Furniture
	EndIf
	Set	*Flag_Cheev_Global_16 .True
	Add *ForniturePurchased 1
	If *ForniturePurchased == 10`
		Set *Flag_Cheev_Global_17 .True
	EndIf
	% Substract coins
	% Sub from Bank Account
	Call CloseMessage
	Set *Var[1] *Var[3] % move amount to sub to Var1
	SetTimescale *Fixed[15.0]
	Loop
		Call	$Function_LoadBankCoins 	( *Var[3] )
		If	*Var[3] == 0 % If the account is empty, break
			BreakLoop
		EndIf
		Call	PlaySound ( 211 ) % Coin
		Call	$Function_SubCoinsFromAccount
		Sub		*Var[1] 1
		If	*Var[1] == 0 % If the ammount has been fully substracted
			Goto FurniturePurchased
		EndIf
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
	% If the amount still isn't 0, use Mario's coins now
	% Sub from Mario's pocket
	If	*Var[1] != 0
		Mul	*Var[1] -1`
		Call AddCoin ( *Var[1] )
	EndIf
	Label	FurniturePurchased
	% Close coins boxes
	Call	ShowCoinCounter ( .False )
	Call	$Function_BankCoins_Close
	Call	$Function_BankCoins_UseLastFrame
	% Set Purchased Flag
	Switch *MapVar[B]
		Case == 0 % Candy Cane
			Set *Flag_Furniture1 .True
		Case == 1 % Sarcophagus
			Set *Flag_Furniture2 .True
		Case == 2 % Painting
			Set *Flag_Furniture3 .True
		Case == 3 % Jack
			Set *Flag_Furniture4 .True
		Case == 4 % Statue
			Set *Flag_Furniture5 .True
		Case == 5 % Flowers
			Set *Flag_Furniture6 .True
		Case == 6 % Snowman
			Set *Flag_Furniture7 .True
		Case == 7 % Ship
			Set *Flag_Furniture8 .True
		Case == 8 % Stars
			Set *Flag_Furniture9 .True
		Case == 9 % HBD
			Set *Flag_Furniture10 .True
		Case == 10` % Exor
			Set *Flag_Furniture11 .True
		Case == 11` % M&L
			Set *Flag_Furniture12 .True
		Case == 12` % Late 90s
			Set *Flag_Furniture13 .True
	EndSwitch
	Call	PlaySound ( 0010 ) % game saved
	Jump 	$Script_Chuck_Furniture % reopen the menu
	Label	End
	Wait	5
	Exec	$Script_SetAllFurniture
	Call	SetCamSpeed ( .Default *Fixed[1.0] ) % default speed
	Call	$WriteAddress ( 802CDB6C 2 AE300028 0 .False ) % Enable SetNpcAnimation(?) once again, AE300028=SW	S0, 0028 (S1)
	Call	$WriteAddress ( $DescriptionBox_Data 2 .False 0 .False ) % Hide Box
	Set		*Flag_IgnoreAButton_Lists .False
	Set		*Flag_IgnoreAButton_ErrorSfx .False
	Call	SetPlayerAnimation ( .PlayerAnim:StandStill )
	Return
	End
}


#string $Tattle_Oaklie
{
[STYLE:TATTLE][...]
He is Oaklie, he will help us
to make us stronger in exchange
for some coins.
[WAIT][NEXT][...]
If you prefer to get new badges
without entering the Pit, he can
sell to you random Badges too.
[WAIT][NEXT][...]
Just keep in mind the prices are
kinda expensive, ok?
[WAIT][END]
}

%%
%	Chuck
%%

#new:NpcGroup $NpcGroup_Chuck
{
00000008 $Fishmael_Settings ~Vec3f:NPC_Chuck
00A40D01 $Script_Init_Chuck 00000000 00000000 0000010E 
~NoItems ~NoHP ~NoFP ~NoCoinBonus ~NoMovement
00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 
00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 00AF0001 
00000000 00000000 00000000 $Tattle_Chuck
}

% All data, functions and scripts for Chuck are in:
% globals/patch/pt_00_OaklieAndChuck_Data.patch
  
#string $Tattle_Chuck
{
[STYLE:TATTLE][...]
He is Chuck.
Everything to do with looks
and style is his specialty.
[WAIT][NEXT][...]
You can talk to him to
personalize this room by
buying new pieces of
furniture.
[WAIT][NEXT][...]
You can buy new clothes
from him too.
[WAIT][NEXT][...]
They say appearance doesn't
matter but dressing well
always feels great!
[WAIT][END]
}


%%
% Exits
%%

#new:Script $Script_MakeExits
{
	Bind     $Script_Exit0  .Trigger:FloorAbove ~Collider:Col0 00000001 00000000 % Left Door
	Bind     $Script_Exit1  .Trigger:FloorTouch ~Collider:Col1 00000001 00000000 % Down Pipe 
	Bind     $Script_Exit2  .Trigger:FloorAbove ~Collider:Col2 00000001 00000000 % Right Door
	Return
	End	
}
	
#new:Script $Script_Exit1
{
	Set  *Var[A]  ~Entry:Entry2 % Entry ID
	Set  *Var[B]  ~Collider:Col1 % Collider ID
	If	*Flag_Mode_Rogue == .True % If Roguelike Mode are Activated
		ExecWait $Script_TrackPlayer_Rogue
	Else
		ExecWait $Script_TrackPlayer_Main
	EndIf
	Return
	End
}
   
#new:Script $Script_TrackPlayer_Rogue
{
	Call     $Function_TrackInput	% loaded from UsingPipeDown.mpat
	If  *Var[0]  ==  0
		Return
	EndIf
	Call     GetCurrentPartner ( *Var[0] )
	If  *Var[0]  !=  0
		Call     GetCurrentPartnerID 	( *Var[1] )
		If  *Var[1]  !=  6
			Return
		Else
			Call     802D2B6C
			Call     DisablePlayerInput	( .True )
		EndIf
	Else
		Call     DisablePlayerInput	( .True )
	EndIf
	Unbind
	% Save everything in Memory
	Call	$Function_SaveCurrentPartners
	Call	$Function_SavePartnersRanks
	Call	$Function_SaveMariosStats
	Call	$Function_SaveItems
	Call	$Function_SaveActivatedBadges		% Save in a list Mario's current activated badges
	% Reset Addresses
	Set     *Rogue_Keys .Default
	Set		*BadgesEquipped_Rogue .Default
	Set		*Rogue_RowfPurchases .Default
	Set		*StarSpiritsUsedInPit .False
	Set		*PartnersTurnsUsed .False
	% Timing Tutor - The player can keep this badge activated even if he enters the pit
	Set		*Var[0] 012D % Timing Tutor
	ExecWait $IsBadgeEquipped_Script
	Call	$Function_DisableActivatedBadges	% Disable Mario's Current activated badges
	If *Var[0] == .True
		% Restore Timing Tutor if was previously activated
		Call $WriteAddress ( 8010F498 1 012D .False .False ) % Activate TimingTutor
	EndIf
	Call	$Function_DisablePartnersAndRanks
	Call	$Function_SetMariosStats
	Switch *PitDifficulty 
		Case == 1 % Hard % HP=15 & FP=10
			Call 	$WriteAddress ( 8010F290 0 15` 2 .False ) % Current HP
			Call 	$WriteAddress ( 8010F290 0 15` 3 .False ) % Max HP1
			Call 	$WriteAddress ( 8010F290 0 15` 4 .False ) % Max HP2
			Call 	$WriteAddress ( 8010F290 0 10` 5 .False ) % Current FP
			Call 	$WriteAddress ( 8010F290 0 10` 6 .False ) % Max FP1
			Call 	$WriteAddress ( 8010F290 0 10` 7 .False ) % Max FP2
		Case >= 2 % Very-Hard HP=20 & FP=15
			Call 	$WriteAddress ( 8010F290 0 20` 2 .False ) % Current HP
			Call 	$WriteAddress ( 8010F290 0 20` 3 .False ) % Max HP1
			Call 	$WriteAddress ( 8010F290 0 20` 4 .False ) % Max HP2
			Call 	$WriteAddress ( 8010F290 0 15` 5 .False ) % Current FP
			Call 	$WriteAddress ( 8010F290 0 15` 6 .False ) % Max FP1
			Call 	$WriteAddress ( 8010F290 0 15` 7 .False ) % Max FP2
	EndSwitch
	%Call	FullyRestoreSP % scrapped
	Call	$Function_ResetItems
	 % Check if the Player has the sack to remove it from the key items
	Call	FindKeyItem 	( 54 *Var[0] )
	If *Var[0] != -1
		Call	RemoveKeyItemAt ( *Var[0] )
	EndIf
	% Disable Current Partner
	Set		*LastPartnerUsed .Default
	Call	$SaveCurrentPartner 				% save in byte, to restore after comming from the pit
	Call    $DespawnPartner
	If *Flag_Rogue1stTime == .False
		Call	ShowMessageAtScreenPos ( $String_Rogue_Defenseless A0 28 )
		Set 	*Flag_Rogue1stTime .True
	EndIf
	ExecWait $Script_PipeAnimation 				% loaded from UsingPipeDown.mpat
	Return
	End
}

#string $String_Rogue_Defenseless
{
	[STYLE:INSPECT][...]
	Remember on Roguelike [PushColor][Color:07]all enemies
	have zero defense[PopColor].
	[WAIT][END]
}

	#new:Function $Function_SaveCurrentPartners
{
	PUSH	RA, V0, A1, A2
	LABU 	A2, 8010F2AC % Goombario Byte
	LIO 	A1, *Flag_Rogue_Goombario
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2B4 % Kooper Byte
	LIO 	A1, *Flag_Rogue_Kooper
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2BC % Bombette Byte
	LIO 	A1, *Flag_Rogue_Bombette
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2C4 % Parakarry Byte
	LIO 	A1, *Flag_Rogue_Parakarry
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2EC % Bow Byte
	LIO 	A1, *Flag_Rogue_Bow
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2D4 % Watt Byte
	LIO 	A1, *Flag_Rogue_Watt
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2DC % Sushie Byte
	LIO 	A1, *Flag_Rogue_Sushie
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2E4 % Lakilester Byte
	LIO 	A1, *Flag_Rogue_Lakilester
	JAL 	~Func:set_variable
	NOP
	JPOP	RA, V0, A1, A2
}

	#new:Function $Function_SavePartnersRanks
{
	PUSH	RA, V0, A1, A2
	LABU 	A2, 8010F2AD % Goombario Rank
	LIO 	A1, *Rogue_Goombario_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2B5 % Kooper Rank
	LIO 	A1, *Rogue_Kooper_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2BD % Bombette Rank
	LIO 	A1, *Rogue_Bombette_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2C5 % Parakarry Rank
	LIO 	A1, *Rogue_Parakarry_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2ED % Bow Rank
	LIO 	A1, *Rogue_Bow_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2D5 % Watt Rank
	LIO 	A1, *Rogue_Watt_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2DD % Sushie Rank
	LIO 	A1, *Rogue_Sushie_Rank
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2E5 % Lakilester Rank
	LIO 	A1, *Rogue_Lakilester_Rank
	JAL 	~Func:set_variable
	NOP
	JPOP	RA, V0, A1, A2
}

	#new:Function $SaveCurrentPartner
{
	PUSH 	RA, A1, A2, V0
	LABU 	A2, 8010F2A2 % Current Partner
	LIO 	A1, *Rogue_LastPartner
	JAL 	~Func:set_variable
	NOP
	JPOP 	RA, A1, A2, V0
}

	#new:Function $Function_SaveMariosStats
{
	PUSH 	RA, A1, A2, V0
	LABU 	A2, 8010F293 % Max HP
	LIO 	A1, *Rogue_MaxHP
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F296 % Max FP
	LIO 	A1, *Rogue_MaxFP
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F290 % Boots
	LIO 	A1, *Rogue_Boots
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F291 % Hammer
	LIO 	A1, *Rogue_Hammer
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F29C % Coins % 1st Byte
	LIO 	A1, *Rogue_CoinsSaved1
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F29D % Coins % 2nd Byte
	LIO 	A1, *Rogue_CoinsSaved2
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F2AE % Strange Sack
	LIO 	A1, *Flag_Rogue_Sack
	JAL 	~Func:set_variable
	NOP
	JPOP 	RA, A1, A2, V0
}

	#new:Function $Function_SaveItems
{
	PUSH 	RA, A1, A2, V0
	LABU 	A2, 8010F445 % Item Slot 1
	LIO 	A1, *Rogue_ItemSlot1
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F447 % Item Slot 2
	LIO 	A1, *Rogue_ItemSlot2
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F449 % Item Slot 3
	LIO 	A1, *Rogue_ItemSlot3
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F44B % Item Slot 4
	LIO 	A1, *Rogue_ItemSlot4
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F44D % Item Slot 5
	LIO 	A1, *Rogue_ItemSlot5
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F44F % Item Slot 6
	LIO 	A1, *Rogue_ItemSlot6
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F451 % Item Slot 7
	LIO 	A1, *Rogue_ItemSlot7
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F453 % Item Slot 8
	LIO 	A1, *Rogue_ItemSlot8
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F455 % Item Slot 9
	LIO 	A1, *Rogue_ItemSlot9
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F457 % Item Slot 10
	LIO 	A1, *Rogue_ItemSlot10
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F459 % Item Slot 11
	LIO 	A1, *Rogue_ItemSlot11
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F45B % Item Slot 12
	LIO 	A1, *Rogue_ItemSlot12
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F45D % Item Slot 13
	LIO 	A1, *Rogue_ItemSlot13
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F45F % Item Slot 14
	LIO 	A1, *Rogue_ItemSlot14
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F461 % Item Slot 15
	LIO 	A1, *Rogue_ItemSlot15
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F463 % Item Slot 16
	LIO 	A1, *Rogue_ItemSlot16
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F465 % Item Slot 17
	LIO 	A1, *Rogue_ItemSlot17
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F467 % Item Slot 18
	LIO 	A1, *Rogue_ItemSlot18
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F469 % Item Slot 19
	LIO 	A1, *Rogue_ItemSlot19
	JAL 	~Func:set_variable
	NOP
	LABU 	A2, 8010F46B % Item Slot 20
	LIO 	A1, *Rogue_ItemSlot20
	JAL 	~Func:set_variable
	NOP
	JPOP 	RA, A1, A2, V0
}

	% Nuke Addresses

	#new:Function $Function_DisablePartnersAndRanks
{
	SAH		R0, 8010F2AC % Goombario
	SAH		R0, 8010F2B4 % Kooper
	SAH		R0, 8010F2BC % Bombette
	SAH		R0, 8010F2C4 % Parakarry
	SAH		R0, 8010F2EC % Bow
	SAH		R0, 8010F2D4 % Watt
	SAH		R0, 8010F2DC % Sushie
	SAH		R0, 8010F2E4 % Lakilester
	JR RA
	NOP
}

#new:Function $Function_SetMariosStats
{
	ADDIU 	T0, R0, 5
	ADDIU 	T1, R0, A
	SAB		T1, 8010F292 % Current HP
	SAB		T1, 8010F293 % Max HP1
	SAB		T1, 8010F294 % Max HP2
	SAB		T0, 8010F295 % Current FP
	SAB		T0, 8010F296 % Max FP1
	SAB		T0, 8010F297 % Max FP2
	SAB		R0, 8010F290 % Boots
	SAB		R0, 8010F291 % Hammer
	SAH		R0, 8010F29C % Coins
	SAB		R0, 8010F2AE % Strange Sack
	JR		RA
	NOP
}

	#new:Function $Function_ResetItems
{
	SAW		R0, 8010F444 % Item Slots 1-2
	SAW		R0, 8010F448 % Item Slots 3-4
	SAW		R0, 8010F44C % Item Slots 5-6
	SAW		R0, 8010F450 % Item Slots 7-8
	SAW		R0, 8010F454 % Item Slots 9-10
	SAW		R0, 8010F458 % Item Slots 11-12
	SAW		R0, 8010F45C % Item Slots 13-14
	SAW		R0, 8010F460 % Item Slots 15-16
	SAW		R0, 8010F464 % Item Slots 17-18
	SAW		R0, 8010F468 % Item Slots 19-20
	JR		RA
	NOP
}

% Restore Addresses

#new:Function $RestorePartnersRanks
{
	PUSH	RA, V0, A1, A2
	% Goombario
	LIO 	A1, *Flag_Rogue_Goombario
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2AC % Goombario Byte Flag
	LIO 	A1, *Rogue_Goombario_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2AD % Goombario Rank
	% Kooper
	LIO 	A1, *Flag_Rogue_Kooper
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2B4 % Kooper Byte Flag
	LIO 	A1, *Rogue_Kooper_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2B5 % Kooper Rank
	% Bombette
	LIO 	A1, *Flag_Rogue_Bombette
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2BC % Bombette Byte Flag
	LIO 	A1, *Rogue_Bombette_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2BD % Bombette Rank
	% Parakarry
	LIO 	A1, *Flag_Rogue_Parakarry
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2C4 % Parakarry Byte Flag
	LIO 	A1, *Rogue_Parakarry_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2C5 % Parakarry Rank
	% Bow
	LIO 	A1, *Flag_Rogue_Bow
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2EC % Bow Byte Flag
	LIO 	A1, *Rogue_Bow_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2ED % Bow Rank
	% Watt
	LIO 	A1, *Flag_Rogue_Watt
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2D4 % Watt Byte Flag
	LIO 	A1, *Rogue_Watt_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2D5 % Watt Rank
	% Sushie
	LIO 	A1, *Flag_Rogue_Sushie
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2DC % Sushie Byte Flag
	LIO 	A1, *Rogue_Sushie_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2DD % Sushie Rank
	% Lakilester
	LIO 	A1, *Flag_Rogue_Lakilester
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2E4 % Lakilester Byte Flag
	LIO 	A1, *Rogue_Lakilester_Rank
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2E5 % Lakilester Rank
	POP	RA, V0, A1, A2
	JR RA
	NOP
}

#new:Function $RestoreMariosStats
{
	PUSH	RA, V0, A1, A2
	% HP
	LIO 	A1, *Rogue_MaxHP
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F293 % MaxHP1
	SAB		V0, 8010F294 % MaxHP2
	% FP
	LIO 	A1, *Rogue_MaxFP
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F296 % MaxFP1
	SAB		V0, 8010F297 % MaxFP2
	% Boots
	LIO 	A1, *Rogue_Boots
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F290
	% Hammer
	LIO 	A1, *Rogue_Hammer
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F291
	% Coins
	LIO 	A1, *Rogue_CoinsSaved1
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F29C % 1st Byte
	LIO 	A1, *Rogue_CoinsSaved2
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F29D % 2nd Byte
	% Sack
	LIO 	A1, *Flag_Rogue_Sack
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F2AE
	POP		RA, V0, A1, A2
	JR		RA
	NOP
}

#new:Function $RestoreItems
{
	PUSH	RA, V0, A1, A2
	% Slot 1
	LIO 	A1, *Rogue_ItemSlot1
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F445
	 % Slot 2
	LIO 	A1, *Rogue_ItemSlot2
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F447
	% Slot 3
	LIO 	A1, *Rogue_ItemSlot3
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F449
	% Slot 4
	LIO 	A1, *Rogue_ItemSlot4
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F44B
	% Slot 5
	LIO 	A1, *Rogue_ItemSlot5
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F44D
	% Slot 6
	LIO 	A1, *Rogue_ItemSlot6
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F44F
	% Slot 7
	LIO 	A1, *Rogue_ItemSlot7
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F451
	% Slot 8
	LIO 	A1, *Rogue_ItemSlot8
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F453
	% Slot 9
	LIO 	A1, *Rogue_ItemSlot9
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F455
	% Slot 10
	LIO 	A1, *Rogue_ItemSlot10
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F457
	% Slot 11
	LIO 	A1, *Rogue_ItemSlot11
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F459
	% Slot 12
	LIO 	A1, *Rogue_ItemSlot12
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F45B
	% Slot 13
	LIO 	A1, *Rogue_ItemSlot13
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F45D
	% Slot 14
	LIO 	A1, *Rogue_ItemSlot14
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F45F
	% Slot 15
	LIO 	A1, *Rogue_ItemSlot15
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F461
	% Slot 16
	LIO 	A1, *Rogue_ItemSlot16
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F463
	% Slot 17
	LIO 	A1, *Rogue_ItemSlot17
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F465
	% Slot 18
	LIO 	A1, *Rogue_ItemSlot18
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F467
	% Slot 19
	LIO 	A1, *Rogue_ItemSlot19
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F469
	% Slot 20
	LIO 	A1, *Rogue_ItemSlot20
	JAL 	~Func:get_variable
	NOP
	SAB		V0, 8010F46B
	POP		RA, V0, A1, A2
	JR		RA
	NOP
}

#new:Function $ResetKeyStarPiecesBox % Set the key box to his start state
{
	SAW		R0, $KeyStarPieces_BoxData
	SAW		R0, $KeyStarPieces_BoxDataExtra
	JR		RA
	NOP
}

#new:Script $Script_TrackPlayer_Main
{
	Call     $Function_TrackInput % from UsingPipeDown.mpat
	If  *Var[0]  ==  .False
		Return
	EndIf
	Call     GetCurrentPartner ( *Var[0] )
	If  *Var[0]  !=  .Partner:Empty
		Call     GetCurrentPartnerID 	( *Var[1] )
		If  *Var[1]  !=  .Partner:Watt
			Return
		Else
			Call     802D2B6C
			Call     DisablePlayerInput 	( .True )
		EndIf
	Else
		Call     DisablePlayerInput 	( .True )
	EndIf
	% The player hasn't enter the pit before?
	If *Flag_Goombario == .False
		If *Flag_EnablePause == .False
			Set *GameByte[000] 81  % to being able to pause the game
			Set *Flag_EnablePause .True
		EndIf
	EndIf
	Set	*StarSpiritsUsedInPit .False
	Set	*PartnersTurnsUsed .False
	% Check if Mario should buy some upgrades before entering classic
	If *Flag_Goombario == .True
		Call $Function_OakChuck_GetPartnersUpgrades % save in var3
		Call $ReadAddress ( 8010F290 0 *Var[4] .False .False ) % get boots
		Add	*Var[3] *Var[4]
		Call $ReadAddress ( 8010F291 0 *Var[4] .False .False ) % get hammer
		Add	*Var[3] *Var[4]
		If *Var[3] == 0 % The player haven't bought any upgrades
			Call    PlaySoundAtNpc  ( .Npc_Cheato 0262 .Default ) % !
			Call    ShowEmote   	( .Npc_Cheato .Emote:Exclamation -45` 20` 1 0 0 0 0 )
			Wait	10`
			Call    SpeakToPlayer 	( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Suggestion1 )
			Call    ShowChoice    ( 001E001D ) % yes no
			If *Var[0] == 0 % Yes
				Call	CloseMessage
				Call    DisablePlayerInput 	( .False )
				Return
			EndIf
			Call    ContinueSpeech 	( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Suggestion2_No )
		EndIf
	EndIf
	Unbind
	ExecWait $Script_PipeAnimation		% loaded from UsingPipeDown.mpat
	Return
	End
}

#string $String_Cheato_Suggestion1
{
[STYLE:RIGHT][...]
Hey Mario!
[WAIT][NEXT][...]
Looks like you still haven't
bought any [PushColor][Color:19]upgrades[PopColor].
[WAIT][NEXT][...]
I suggest to you to buy a few
ones from [PushColor][Color:19]Oaklie[PopColor] before trying
to enter the [PushColor][Color:19]Classic Pit[PopColor].
[WAIT][NEXT][...]
If you don't have enought coins
for anything.
[WAIT][NEXT][...]
Try farming some coins from
[PushColor][Color:19]Roguelike[PopColor] before, don't you think?
[Func_04][END]
}

#string $String_Cheato_Suggestion2_No
{
[NEXT][...]
Well, that's up to you.
Good luck over there.
[WAIT][END]
}
	
#new:Script $TrackEntry
{
	Call     GetEntryID  	( *Var[0] )
	Switch *Var[0]
		Case == 3 % ~Entry:Entry3 % Top Pipe
			Exec     $ComingDownPipe
			Exec	 $Script_MakeExits
			If	*Flag_Mode_Rogue == .True % If Roguelike Mode are Activated
				Call	DisablePlayerInput ( .True )
				ExecWait $Script_RestoreData_Roguelike
				Call	DisablePlayerInput ( .False )
			EndIf
			% Meeting Fishmael, Oaklie and Chuck
			If *Flag_MeetingAtLobby == .False
				If *Flag_Goombario == .True
					% The player can't leave the room
					Call ModifyColliderFlags ( .True ~Collider:HideMerlee 7FFFFE00 )
					Call ModifyColliderFlags ( .True ~Collider:LockPipe 7FFFFE00 )
					Call ModifyColliderFlags ( .True ~Collider:LockSaveBlock 7FFFFE00 )
					Call ModifyColliderFlags ( .False ~Collider:Col0 7FFFFE00 ) % Left Exit
					Call ModifyColliderFlags ( .False ~Collider:bed 7FFFFE00 )
					Exec $Script_Cutscene_MeetingOaklieFish *Var[A] % save script ID
					Exec $SkipCutscene_Cutscene_MeetingOaklieFish
				EndIf
			Else % the player has already meet everyone
				ExecWait $Script_Check_TeachStuff
			EndIf
		Case == 6 % If Player Died
			Call DisablePlayerInput ( .True )
			% Check if is the game intro
			If *Flag_Intro == .False
				% Move Cheato close to Mario
				Call	SetNpcFlagBits ( .Npc_Cheato 00000200 .True ) % enable npc gravity
				Call 	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
				Sub  	*Var[0] 100`
				Call 	SetNpcPos 	( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
				Call	SetNpcYaw 	( .Npc_Cheato -90` )
				Exec	$Script_Cutscene_Intro0 *Var[A] % save script ID
				Exec	$SkipCutscene_Cutscene_Intro
				Exec	$Script_MakeExits
				Return
			EndIf
			If	*Flag_Mode_Rogue == .True % If Mario died in Roguelike Mode
				Exec $Script_Mario_WakeUpfromDeath
				ExecWait $Script_RestoreData_Roguelike
			Else
				% If isn't Rogue Mode, check if is the 1st time the player has died and if he losted any coins
				If *Flag_Died_1stTime == .False
					Call $ReadAddress ( 8010F2B0 1 *Var[0] .False .False ) % load losted coins
					If *Var[0] != 0
						% move cheato
						Call 	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
						Sub  	*Var[0] 100`
						Call 	SetNpcPos 	( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
						Call	SetNpcFlagBits ( .Npc_Cheato 00000200 .True ) % enable npc gravity
						Call	SetNpcVar ( .Npc_Cheato 2 .False )
						Call	SetNpcVar ( .Npc_Cheato 3 .False )
						ExecWait $Script_Mario_WakeUpfromDeath
						ExecWait $Script_Cutscene_WalkOffBed % Mario leave the bed and cheato go talk to him
						Exec	 $Script_SaveAmountOfThingsAboutToBeTeached
						Exec	 $Script_Cutscene_1stDead *Var[A]
						Exec	 $SkipCutscene_Script_1stDead
						Loop
							DoesScriptExist ( *Var[A] *Var[0] )
							If *Var[0] == .False
								BreakLoop
							EndIf
							Wait 1
						EndLoop
						Set 	*Flag_Skip .False
						Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
						Set 	*Flag_Died_1stTime .True
						ExecWait $Script_Check_TeachStuff
						% If the player skipped one of the teaching cutscenes wait until
						% the screen completily unfades
						Loop
							Call 	$ReadAddress ( 80156904 2 *Var[0] .False .False ) % load screen brightness
							Switch *Var[0]
								CaseOR == 40A00000 % cutscene skipped
								CaseOR == 437F0000 % cutscene skipped (nothing will be learned)
								CaseOR == BF800000 % default brightness
									BreakLoop
								EndCaseGroup
							EndSwitch
							Wait 1
						EndLoop
						% Check if Cheato teached nothing and if the player skipped previous cutscene
						Call	GetNpcVar ( .Npc_Cheato 2 *Var[0] )
						If *Var[0] == 0 % nothing was teached
							Call	GetNpcVar ( .Npc_Cheato 3 *Var[0] )
							If *Var[0] == .False % previous cutscene wasn't skipped
								Call	SetNpcVar ( .Npc_Cheato 3 .False )
								ExecWait $Script_FadeToBlack
							EndIf
						EndIf
						% Check if Cheato teached something
						Call	GetNpcVar ( .Npc_Cheato 2 *Var[0] )
						If *Var[0] > 0 % previous cutscene wasn't skipped
							Call	SetNpcVar ( .Npc_Cheato 3 .False )
							ExecWait $Script_FadeToBlack
						EndIf
						Call	SetNpcVar ( .Npc_Cheato 2 .False )
						Call 	SetNpcPos ( .Npc_Cheato ~Vec3d:CheatoSpawn ) % put cheato back to his spawn pos
						Wait 	20`
						Exec	$Script_FadeFromBlack
						Exec	$Script_MakeExits
						Call 	DisablePlayerInput ( .False )
						Return
					EndIf
				% Mario has died but he has already died before
				Else
					ExecWait $Script_Mario_WakeUpfromDeath
					ExecWait $Script_Check_TeachStuff
					% Cheato walked to mario's pos?
					Call GetNpcPos ( .Npc_Cheato *Var[0] .False .False )
					If *Var[0] > 0
						ExecWait $Script_FadeToBlack
						Call 	SetNpcPos ( .Npc_Cheato ~Vec3d:CheatoSpawn ) % put cheato back to his spawn pos
						Wait 	20`
						Exec	$Script_FadeFromBlack
					EndIf
				EndIf
			EndIf
			Exec	$Script_MakeExits
			% Check if Mario got out of the bed by himself
			Call GetEntryID ( *Var[0] )
			If *Var[0] != 6 % Dead
				% Check cheato status
				Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
				If *Var[0] == .False
					ExecWait $Script_Mario_WakeUpfromDeath
				EndIf
			EndIf
			Call 	 DisablePlayerInput ( .False )
		Case == 9 %~Entry:Entry_MazeOpen % Maze Opened Cutscene
			If	*Flag_Mode_Rogue == .True % If Roguelike Mode are Activated
				ExecWait $Script_RestoreData_Roguelike
				% Check Mario current HP/FP doesn't bypass his max one
				% HP
				Call 	$ReadAddress ( 8010F292 0 *Var[0] 0 .False ) % load HP
				Call 	$ReadAddress ( 8010F292 0 *Var[1] 1 .False ) % load Max HP
				If *Var[0] > *Var[1]
					Set *Var[0] *Var[1]
					Call 	$WriteAddress ( 8010F292 0 *Var[0] .False .False ) % HP
				EndIf
				% FP
				Call 	$ReadAddress ( 8010F295 0 *Var[0] 0 .False ) % load FP
				Call 	$ReadAddress ( 8010F295 0 *Var[1] 1 .False ) % load Max FP
				If *Var[0] > *Var[1]
					Set *Var[0] *Var[1]
					Call 	$WriteAddress ( 8010F295 0 *Var[0] .False .False ) % FP
				EndIf
				Call    $RunFunction ( 800E9B6C ) % ~Func:sync_status_menu
			EndIf
			Call 	DisablePlayerInput ( .True )
			Call	EnableModel ( ~Model:ee_kousi .True ) % Always show bars
			Call    TranslateModel ( ~Model:ee_kousi 10` 0 0 )
			Wait	40`
			Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			Add		*Var[0] 52`
			Call	SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			%Call	ResetCam ( .Default *Fixed[7.0] ) % cam speed
			Wait	70`
			% Metal Bars Animation
			Call  	PlaySound   	( 026B )
			Call    MakeLerp    	( 0 90` 50` .Easing:QuadraticIn )
			Loop     
				Call     UpdateLerp
				Call     TranslateModel ( ~Model:ee_kousi 10` *Var[0] 0 )
				Wait     1
				If  *Var[1]  ==  0
					BreakLoop
				EndIf
			EndLoop
			Set		*Flag_DungeonOpened .True
			Wait	40`
			Call 	PlaySound         ( 00DC )
			Call    GotoMapSpecial    ( "pre_03" ~Entry:Entry0 D ) 
		Case == A % ~Entry:EntryTesting % testing stuff
			Call  DisablePlayerInput    ( .True )
			Call  DisablePlayerPhysics  ( .True )
			%Call  SetPlayerPos  ( -1000` 0 0 )
			Wait  1`
			Call  GetCurrentPartnerID   ( *Var[0] )
			If  *Var[0]  !=  .Partner:None % 0
				Call  DisablePartnerAI  ( .Default )
				Call  SetNpcFlagBits    ( .Npc:Partner 00000200 .False )
				Call  SetNpcPos ( .Npc:Partner 0 -1000` 0 )
			EndIf
			Call	ResetCam ( .Default *Fixed[1.0] )
			/%Call  SetSpriteShading  ( -1` )
			Call  SetCamPerspective ( .Cam:Default 00000003 00000019 00000010 00001000 )
			Call  SetCamBGColor 	( .Cam:Default 0 0 0 ) % black
			Call  SetCamEnabled 	( .Cam:Default .True )
			Call  SetCamLeadPlayer  ( .Cam:Default .False )
			Call  SetCamType    	( .Cam:Default 00000004 .False )
			Call  SetCamPitch   	( .Cam:Default 00000000 00000000 )
			Call  SetCamDistance    ( .Cam:Default 000001B8 )
			Call  SetCamPosA    ( .Cam:Default 00000000 00000064 )
			Call  SetCamPosB    ( .Cam:Default 00000000 00000000 )
			Call  SetCamPosC    ( .Cam:Default 00000000 00000041 )
			Call  SetPanTarget  ( .Cam:Default 00000000 00000000 00000000 )
			Call  SetCamSpeed   ( .Cam:Default *Fixed[90.0] )
			Call  PanToTarget   ( .Cam:Default 00000000 00000001 )
			Call  DisablePlayerInput    ( .True )
			Call  DisablePlayerPhysics  ( .True )%/
			Wait  1`
			Exec  $Script_SaveAndQuit
		Case == B % ~Entry:PitBeated
			% Hide Cheato, Oaklie and Chuck
			Call  SetNpcPos ( 5 0 -1000` 0 ) % Fishmael
			Call  SetNpcPos ( 6 0 -1000` 0 ) % Oaklie
			Call  SetNpcPos ( 8 0 -1000` 0 ) % Chuck
			Call  DisablePlayerInput    ( .True )
			% Get Stuff Completed
			Set	*Var[0] *Flag_ClassicBeated
			Add	*Var[0] *Flag_RoguelikeBeated
			Add	*Var[0] *Flag_Mistar
			Switch *Var[0]
				Case == 1 % One pit beated
					If *Flag_Cycle1 == .False % Cutscene already seen?
						Exec	 $Script_Cutscene_Intro1 *Var[A] % save script ID
						Exec	 $SkipCutscene_Cutscene_Intro1
						Loop
							DoesScriptExist ( *Var[A] *Var[0] )
							If *Var[0] == .False
								BreakLoop
							EndIf
							Wait 1
						EndLoop
						Set *Flag_Cycle1 .True
						Wait	5
						% Jump to the Pipe
						Call	SetPlayerSpeed 	( *Fixed[1.0] )
						Call    SetPlayerJumpscale 	  ( *Fixed[1.2] )
						Call	PlayerJump ( ~Vec3d:JumpPos_Pipe 15` ) % xyz, height
						Wait	15`
						% Mario ask himself
						Call 	SetPlayerAnimation ( .PlayerAnim:StandStill )
						Call 	SetPlayerAnimation ( .PlayerAnim:Thinking )
						Call 	PlaySoundAtPlayer 	( 0263 .Default ) % ?
						Call 	ShowEmote 		  	( .Default .Emote:Question -45` 20` 0 0 0 0 0 )
						Call  	ShowMessageAtScreenPos    ( $String_AfterPit_Cutscene1_0 000000A0 00000028 )
						Call 	SetPlayerAnimation ( .PlayerAnim:StandStill )
						Wait	5
						ExecWait $Script_PipeAnimation0
					EndIf
					Thread
						Wait 4
						Call    $RespawnPartner ( *LastPartner )
					EndThread
					Call	GotoMapSpecial ( "pre_03" 4 1 )
					Return
					%Call  DisablePlayerInput    ( .False )
				Case == 2 % one pit + the other pit beated or maze
					If *Flag_Cycle2 == .False % Cutscene already seen?
						Exec	 $Script_Cutscene_Intro2 *Var[A] % save script ID
						Exec	 $SkipCutscene_Cutscene_Intro2
						Loop
							DoesScriptExist ( *Var[A] *Var[0] )
							If *Var[0] == .False
								BreakLoop
							EndIf
							Wait 1
						EndLoop
						Set *Flag_Cycle2 .True
						Wait	5
						% Jump to the Pipe
						Call	InterpPlayerYaw ( 90` 0 )
						Call    SetPlayerJumpscale 	  ( *Fixed[1.2] )
						Call	PlayerJump ( ~Vec3d:JumpPos_Pipe 15` ) % xyz, height
						Wait	5
						ExecWait $Script_PipeAnimation0
					EndIf
					Thread
						Wait 4
						Call    $RespawnPartner ( *LastPartner )
					EndThread
					Call	GotoMapSpecial ( "pre_03" 4 1 )
					Return
					%Call  DisablePlayerInput    ( .False )
				Case == 3 % both pits and maze beated
					% scrapped, this cutscene happen now in the epilogue(Chapter 2)
			EndSwitch
		CaseOR == C % ~Entry:AfterPrologue
		CaseOR == D % ~Entry:Entry_PurchaseAChest
			If *Var[0] == C % ~Entry:AfterPrologue
				Call InterpPlayerYaw ( 90` 1 )
				Call SetNpcPos ( .Npc_Cheato ~Vec3d:CheatoSpawn ) % i dunno why cheato just spawns at 0 0 0 when comming from this entry, wtf
			Else
				Call InterpPlayerYaw ( -90` 1 )
			EndIf
			Exec $Script_MakeExits
		EndCaseGroup
		Case == E % ~Entry:Entry_RubyCS
			Exec	$Script_Cutscene_RubyKing
		Case != 3 % ~Entry:Entry3 % Top Pipe
			Set	 *Var[0] $Script_MakeExits
			Exec EnterWalk
	EndSwitch
	Wait     1
	Return
	End
}

#new:Script $Script_RestoreData_Roguelike
{
	Call	$Function_DisableActivatedBadges
	Call	$RestoreBadges
	Call	$RestorePartnersRanks
	Call	$RestoreMariosStats
	Call	$RestoreItems
	Call	$ResetKeyStarPiecesBox
	If	*Flag_Rogue_Sack == .True
		Call	AddKeyItem ( 54 ) % Strange Sack
	EndIf
	% Restore previous partner if current partner
	% is one that Mario currently doesn't have
	Call 	$ReadAddress ( 8010F2A2 0 *Var[A] .False .False ) % load current partner
	Switch *Var[A]
		Case == .Partner:Goombario
			Call 	$ReadAddress ( 8010F2AC 0 *Var[A] .False .False )
		Case == .Partner:Kooper
			Call 	$ReadAddress ( 8010F2B4 0 *Var[A] .False .False )
		Case == .Partner:Bombette
			Call 	$ReadAddress ( 8010F2BC 0 *Var[A] .False .False )
		Case == .Partner:Parakarry
			Call 	$ReadAddress ( 8010F2C4 0 *Var[A] .False .False )
		Case == .Partner:Bow
			Call 	$ReadAddress ( 8010F2EC 0 *Var[A] .False .False )
		Case == .Partner:Watt
			Call 	$ReadAddress ( 8010F2D4 0 *Var[A] .False .False )
		Case == .Partner:Sushie
			Call 	$ReadAddress ( 8010F2DC 0 *Var[A] .False .False )
		Case == .Partner:Lakilester
			Call 	$ReadAddress ( 8010F2E4 0 *Var[A] .False .False )
	EndSwitch
	If *Var[A] == .False % If Mario doesn't have this partner unlocked
		Call	$RespawnPartner_PartnerBeforeEnteringRoguelike
	EndIf
	Wait	25`
	% The partner saved in LastPartnerUsed is a partner the player has already unlocked?
	Switch *LastPartnerUsed
		Case == .Partner:Goombario
			Set *Var[0] 8010F2AC % Goombario's Byteflag
		Case == .Partner:Kooper
			Set *Var[0] 8010F2B4
		Case == .Partner:Bombette
			Set *Var[0] 8010F2BC
		Case == .Partner:Parakarry
			Set *Var[0] 8010F2C4
		Case == .Partner:Bow
			Set *Var[0] 8010F2EC
		Case == .Partner:Watt
			Set *Var[0] 8010F2D4
		Case == .Partner:Sushie
			Set *Var[0] 8010F2DC
		Case == .Partner:Lakilester
			Set *Var[0] 8010F2E4
	EndSwitch
	If *LastPartnerUsed != .False
		Call 	$ReadAddress ( *Var[0] 0 *Var[1] .False .False )
		If *Var[1] == .False % If the player doesn't have this partner unlocked set *LastPartnerUsed as false
			Set *LastPartnerUsed .False
		EndIf
	EndIf
	Return
	End
}

#string $String_DaysLater
{
	[STYLE:INSPECT][...]
	A few floors later.
	[WAIT][END]
}

 % Lobby Cutscene - One pit beated
#new:Script $Script_Cutscene_Intro1
{
	% Set Cheato's Pos
	Call	SetNpcYaw 		( .Npc_Cheato 90` ) % Look at Mario
	Call	InterpPlayerYaw ( -90` 1 ) % Look at cheato
	Call	GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 50`
	Call	SetNpcPos 		( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
	Wait	40`
	% Conversation
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0004 ) % talk
	Wait	20`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % idle
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0004 ) % talk
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	10`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % idle
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0004 ) % talk
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
	Wait	20`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_9 )
	Call 	SetPlayerAnimation ( 00010032 ) % Thumb Up
	Wait	30`
	Set 	*Flag_Skip .False
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	% Move mario to the pipe
	Call	SetPlayerSpeed ( *Fixed[4.0] )
	% offset 1
	Call	GetNpcPos 	( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
	Add		*Var[2] 20`
	Call	PlayerMoveTo ( *Var[0] *Var[2] 0 )
	% offset 2
	Call	GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 40` % x
	Call	PlayerMoveTo ( *Var[0] *Var[2] 0 )
	% offset 3
	Call	GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 230` % x
	Sub		*Var[2] 104` % z
	Call	PlayerMoveTo ( *Var[0] *Var[2] 0 )
	Return
	End
}

#new:Script $SkipCutscene_Cutscene_Intro1
{
	Set	*Flag_Skip .True % show skip text
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Wait 1
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			% after cutscene code
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
			Set		*Var[0] -125` % x
			Set		*Var[1] -237` % y
			Set		*Var[2] -232` % z
			Call	SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#new:Script $Script_Cutscene_Intro2
{
	Call	SetPlayerPos	( ~Vec3d:Entry1 )
	Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 55`
	Call	SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
	Wait	10`
	% Move Mario towards Cheato
	Call	GetNpcPos ( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 81`
	Add		*Var[2] 64`
	Call	PlayerMoveTo ( *Var[0] *Var[2] 70` )
	Call	GetNpcPos ( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
	Sub		*Var[0] 51`
	Thread % Cheato's !
		Wait	36`
		Call    PlaySoundAtNpc ( .Npc_Cheato 0262 .Default ) % !
		Call    ShowEmote   	( .Npc_Cheato .Emote:Exclamation -45` 20` 1 0 0 0 0 )
	EndThread
	Call	PlayerMoveTo ( *Var[0] *Var[2] 40` )
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_AfterPit_Cutscene2_0 )
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	% Cheato and Mario are meeting each other
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0004 ) % talk
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	10`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % idle
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0004 ) % talk
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
	Wait	20`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_9 )
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	% Mario is about to leave
	Call	InterpPlayerYaw ( -90` 0 )
	Wait	50`
	Call	InterpPlayerYaw ( 90` 0 )
	Wait	30`
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_AfterPit_Cutscene2_1 )
	Call 	SetPlayerAnimation ( 00010028 ) % ?
	Call	InterpPlayerYaw ( -90` 0 )
	Wait	30`
	Set		*Flag_Skip .False
	% Start walking away % 1
	Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
	Set		*Var[4] *Var[0]
	Sub		*Var[0] 13` % x
	Add		*Var[2] 71` % z
	Call	PlayerMoveTo ( *Var[0] *Var[2] 70` )
	Call 	SetPlayerAnimation ( 00010028 ) % ?
	Wait	5
	Call	ShowMessageAtScreenPos  ( $String_AfterPit_Cutscene2_2 000000A0 00000028 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	10`
	% Start walking away % 2
	Add		*Var[4] 70` % x
	Add		*Var[2] 40` % z
	Call	PlayerMoveTo ( *Var[4] *Var[2] 55` )
	Wait	10`
	Call 	SetPlayerAnimation ( 00010028 ) % ?
	Wait	5
	Call	ShowMessageAtScreenPos  ( $String_AfterPit_Cutscene2_3 000000A0 00000028 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	5
	Return
	End
}

#new:Script $SkipCutscene_Cutscene_Intro2
{
	Wait 120` % wait until Mario start talking to cheato
	Set	*Flag_Skip .True % show skip text
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			Wait 1
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			% after cutscene code
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
			Set		*Var[0] -190` % x
			Set		*Var[1] -237` % y
			Set		*Var[2] -246` % z
			Call	SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#new:Script $Script_PipeAnimation0
{
	Call     DisablePlayerPhysics 	( .True )
	Call     HidePlayerShadow 	( .True )
	Set		 *Var[0]  ~Entry:Entry2
	Call     $Function_GetColliderPos
	Call     PlayerMoveTo 	( *Var[1] *Var[3] 3 )
	Set		 *Var[0]  ~Entry:Entry2
	Call     $Function_GetColliderPos
	Call     SetPlayerPos 	( *Var[1] *Var[2] *Var[3] )
	Call     SetPlayerFlagBits 	( 00200000 .True )
	Call     $Function_SetAnimation
	Call     InterpPlayerYaw 	( *Var[0] 0 )
	Wait     2
	Call     SetPlayerFlagBits 	( 00200000 .False )
	Call     PlaySound   	( 0163 ) % Pipe sound
	Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
	Thread
		Wait     4
		Loop     40` 
			Sub  *Var[1]  1
			Call     SetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
			Wait     1
		EndLoop
	EndThread
	Call     802D286C ( 00000800 )
	Call     802D2520 ( 00010002 5 2 1 1 0 )
	Wait     25`	
	Return
	End
}

#string $String_AfterPit_Cutscene1_0
{
	[STYLE:INSPECT][...]
	Wasn't I...
	[WAIT][NEXT][...]
	Did I just...
	[WAIT][NEXT][...]
	Hmm... 
	[WAIT][NEXT][...]
	Maybe I'm just overthinking
	everything.
	[WAIT][NEXT][...]
	Okay, time to take a look at that
	Pit Cheato was talking about.
	[WAIT][END]
}

#string $String_AfterPit_Cutscene2_0
{
[STYLE:RIGHT][...]
Wow! what a surprise!
[WAIT][NEXT][...]
My bad, is not very common for us
to get new guests here.
[WAIT][NEXT][...]
So I usually get somewhat
excited when a new face is
shows around, like you did.
[WAIT][NEXT][...]
In any case my name is Cheato,
what's your's lad?
[WAIT][END]
}


#string $String_AfterPit_Cutscene2_1
{
[STYLE:RIGHT][...]
Do you have the feeling that
we have already met before?
[WAIT][NEXT][...]
Hmm...
[WAIT][NEXT][...]
Maybe you are mistaking me for
someone else?
[WAIT][NEXT][...]
Not even the name Mario is
somewhat familiar to me, sorry.
[WAIT][END]
}

#string $String_AfterPit_Cutscene2_2
{
[STYLE:INSPECT][...]
Hmm... I'm really sure I
have met him before...
[WAIT][NEXT][...]
But that memory is somewhat
blurry.
[WAIT][END]
}

#string $String_AfterPit_Cutscene2_3
{
[STYLE:INSPECT][...]
I dunno, something feels kinda
weird in this place...
[WAIT][NEXT][...]
Hmmm....
[WAIT][NEXT][...]
Anyways I guess It's time for me
to take a look at this Pit.
[WAIT][NEXT][...]
Though I vaguely remember having
been in that Pit as well.
[WAIT][NEXT][...]
...
[WAIT][END]
}

#new:Script $Script_SaveAndQuit
{
	Wait  	10`
	Call	PlaySound ( 0009 ) % Save Message
	Call  	ShowMessageAtScreenPos    ( 001D0004 000000A0 00000028 ) % Do you want to save?
	Call	ShowChoice ( 001E000A ) % Save Don't Save
    Switch  *Var[0]
		Case  ==  0 % Save
			Call  	$Function_Save
            Wait  	10`
			Call	PlaySound ( 0010 ) % game saved
			Call	SwitchMessage ( 001D0005 ) % Save Completed
            Call  	$Script_GoToMainMenu
            Wait  	100`
		Case  ==  1 % Don't Save
			Call	SwitchMessage ( $String_DontSave1 )
			Call	ShowChoice ( 001E0004 ) % Yes No
			If *Var[0] != 0 % no
				Call	CloseMessage
				Jump	$Script_SaveAndQuit
			EndIf
			Call	CloseMessage
            Call  	$Script_GoToMainMenu
            Wait  	100`
    EndSwitch
    Return
    End
}

#string $String_DontSave1
{
	[InputOff][PAUSE:0F][InputOn][NEXT][...]
	Do you want to back to the
	Main Menu?[Func_04][END]
}

#new:Function $Function_Save
{
	ADDIU     SP, SP, FFD0
	LIA       A0, $ASCII_pt_255
	SW        S0, 18 (SP)
	LIA       S0, 8007419C
	ADDIU     A1, SP, 10
	SW        RA, 28 (SP)
	SW        S3, 24 (SP)
	SW        S2, 20 (SP)
	SW        S1, 1C (SP)
	LW        V0, 0 (S0)
	LHU       S1, 86 (V0)
	LHU       S2, 8C (V0)
	LHU       S3, 8E (V0)
	JAL       ~Func:get_map_IDs_by_name
	ADDIU     A2, SP, 12
	LW        V1, 0 (S0)
	LHU       V0, 10 (SP)
	LHU       A1, 12 (SP)
	LBU       A0, 166 (V1)
	SH        V0, 86 (V1)
	ADDIU     V0, R0, 0 % entry ID
	SH        A1, 8C (V1)
	JAL       ~Func:fio_save_game
	SH        V0, 8E (V1)
	LW        V1, 0 (S0)
	SH        S1, 86 (V1)
	SH        S2, 8C (V1)
	SH        S3, 8E (V1)
	LW        RA, 28 (SP)
	LW        S3, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 30
}

#new:ASCII $ASCII_pt_255
{
    "pt_255"
}

#new:Function $Script_GoToMainMenu
{
	ADDIU     SP, SP, FFE0
	SW        S0, 18 (SP)
	COPY      S0, A0
	BEQ       A1, R0, .o20
	SW        RA, 1C (SP)
	JAL       ~Func:set_map_transition_effect
	ADDIU     A0, R0, 4
	SW        R0, 74 (S0)
	.o20
	LHU       V0, 76 (S0)
	ADDIU     A0, SP, 10
	JAL       801382AC
	SH        V0, 10 (SP)
	SLL       V0, V0, 10
	BEQ       V0, R0, .o4C
	CLEAR     V0
	JAL       ~Func:set_game_mode
	CLEAR     A0
	BEQ       R0, R0, .o54
	ADDIU     V0, R0, 2
	.o4C
	LH        V1, 10 (SP)
	SW        V1, 74 (S0)
	.o54
	LW        RA, 1C (SP)
	LW        S0, 18 (SP)
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Script $SkipCutscene_Script_1stDead
{
	Set	*Flag_Skip .True % show skip text
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			% after cutscene code
			Set 	*Var[0] 6	% entryID ~Entry:Respawn
			Call    $Function_GetPos % GetEntryPos % save xyz in var1/2/3
			Sub		*Var[2] 14` % y
			Add		*Var[3] 50` % z
			Call	SetPlayerPos ( *Var[1] *Var[2] *Var[3] )
			Call	InterpPlayerYaw ( -90` 1 )
			% move cheato
			Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			Sub		*Var[0] 50`
			Call	SetNpcPos 	( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
			Call	SetNpcAnimation 	( .Npc_Cheato 00AE0001 ) % idle
			Call	SetPlayerAnimation ( .PlayerAnim:StandStill ) % idle
			Kill	*Var[A]
			Call 	 $WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
			ResumeAll .True
			Call	SetNpcVar ( .Npc_Cheato 3 .True )
			Call	GetNpcVar ( .Npc_Cheato 2 *Var[0] )
			If *Var[0] > 0 % something will be teached
				Exec	 $Script_FadeFromBlack
			EndIf
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

% Check if Cheato is about to teach something
%
% *out = Var0 = Amount of things about to be teached right now
%
% [ ! ] Writes in Var[3]
#new:Script $Script_SaveAmountOfThingsAboutToBeTeached
{
	Call	GetNpcVar ( .Npc_Cheato 2 *Var[0] )
	% Quick Swap
	Call	$Function_GetPartnersUnlocked % save in var[3]
	If *Var[3] > 1
		If *Flag_QuickSwapping_Learned == .False
			Add *Var[0] 1
		EndIf
	EndIf
	% Belts
	If *BadgeList >= 5
		If *Flag_BadgeLists_Learned == .False
			Add *Var[0] 1
		EndIf
	EndIf
	Call	SetNpcVar ( .Npc_Cheato 2 *Var[0] )
	Return
	End
}

	#new:Script $Script_Mario_WakeUpfromDeath
{
	Call SetPlayerAnimation ( 00010002 ) % idle
	Call SetPlayerAnimation ( 0001000F ) % Dead
	Wait 32`
	Call SetPlayerAnimation ( 00010030 ) % Get Up
	Wait 16`
	Return
	End
}
	
% Check if is time to teach some stuff to mario
#new:Script $Script_Check_TeachStuff
{
	% Check if is time for cheato to teach some stuff
	% Quick Swapping Partners
	If *Flag_QuickSwapping_Learned == .False
		% Check amount of Partners unlocked
		Call	$Function_GetPartnersUnlocked % save in var[3]
		% If Mario have more than one partners unlocked
		If *Var[3] > 1
			% Check if Mario will get out of the bed by himself
			Call GetEntryID ( *Var[0] )
			If *Var[0] != 6 % Dead
				% Check cheato status
				Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
				If *Var[0] == .False
					Call 	DisablePlayerInput ( .True )
					Wait 	70` % wait until mario falls from the pipe
					Call	GetNpcPos ( .Npc_Cheato *Var[0] .False *Var[1] )
					Add		*Var[0] 50`
					Call	PlayerMoveTo ( *Var[0] *Var[1] 10` )
					Call 	SetNpcVar ( .Npc_Cheato .Default .True ) % mario learned something
				EndIf
			Else % The player died and he has already died before
				Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
				If *Var[0] == .False
					If *Flag_Died_1stTime == .True
						Call 	GetPlayerPos ( *Var[0] .False *Var[1] )
						Call	SetNpcSpeed ( .Npc_Cheato *Fixed[6.0] )
						Call	SetNpcAnimation	( .Npc_Cheato 00AE0003 ) % Running
						Sub		*Var[0]	100`
						Call	NpcMoveTo	( .Npc_Cheato *Var[0] *Var[1] 0 )
						Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % idle
						Call	SetNpcSpeed ( .Npc_Cheato *Fixed[1.0] )
						Call 	SetNpcVar ( .Npc_Cheato .Default .True ) % mario learned something
					EndIf
				EndIf
			EndIf
			Exec	$Script_Cheato_Teach_QuickSwapping *Var[A]
			Exec	$SkipCutscene_Teaching
			Loop
				DoesScriptExist ( *Var[A] *Var[0] )
				If *Var[0] == .False
					BreakLoop
				EndIf
				Wait 1
			EndLoop
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
			Call	SetNpcAnimation 	( .Npc_Cheato 00AE0001 ) % idle
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Set		*Flag_QuickSwapping_Learned .True
		EndIf
	EndIf
	% Badge Belts % Mario has already learned how to quickswap
	If *Flag_BadgeLists_Learned == .False
		% Check if Mario has at least 5 Badges
		If *BadgeList >= 5
			% Check if Mario will get out of the bed by himself
			Call GetEntryID ( *Var[0] )
			If *Var[0] != 6 % Dead
				% Check cheato status
				Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
				If *Var[0] == .False
					Call 	DisablePlayerInput ( .True )
					Wait 	70` % wait until mario falls from the pipe
					Call	GetNpcPos ( .Npc_Cheato *Var[0] .False *Var[1] )
					Add		*Var[0] 50`
					Call	PlayerMoveTo ( *Var[0] *Var[1] 10` )
					Call 	SetNpcVar ( .Npc_Cheato .Default .True ) % mario learned something
				EndIf
			Else % Mario died and he already died before
				Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
				If *Var[0] == .False
					If *Flag_Died_1stTime == .True
						Call 	GetPlayerPos ( *Var[0] .False *Var[1] )
						Call	SetNpcSpeed ( .Npc_Cheato *Fixed[6.0] )
						Call	SetNpcAnimation	( .Npc_Cheato 00AE0003 ) % Running
						Sub		*Var[0]	100`
						Call	NpcMoveTo	( .Npc_Cheato *Var[0] *Var[1] 0 )
						Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % idle
						Call	SetNpcSpeed ( .Npc_Cheato *Fixed[1.0] )
						Call 	SetNpcVar ( .Npc_Cheato .Default .True ) % mario learned something
					EndIf
				EndIf
			EndIf
			Exec	$Script_Cheato_Teach_Belts *Var[A]
			Exec	$SkipCutscene_Teaching
			Loop
				DoesScriptExist ( *Var[A] *Var[0] )
				If *Var[0] == .False
					BreakLoop
				EndIf
				Wait 1
			EndLoop
			Set 	*Flag_Skip .False
			Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
			Call	SetNpcAnimation 	( .Npc_Cheato 00AE0001 ) % idle
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Set		*Flag_BadgeLists_Learned .True
		EndIf
	EndIf
	% The player came from the top pipe and learned something?
	Call GetEntryID ( *Var[0] )
		If *Var[0] != 6 % Dead
			Call GetNpcVar ( .Npc_Cheato .Default *Var[0] )
			If *Var[0] == .True
				Call	DisablePlayerInput ( .False )
			EndIf
		EndIf
	Return
	End
}

#new:Script $SkipCutscene_Teaching
{
    Set *Flag_Skip .True
    Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 1st try
            % Fade Screen Brightness
            SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
            Kill	*Var[A]
            Call 	$WriteAddress ( 80155128 0 3 0 .False ) % Close active dialog bubble - 2nd try
            ResumeAll .True
			Wait	5
            Thread % Fade Screen Brightness
                SetF	*Var[0] *Fixed[25.0] % speed
                SetF	*Var[1] *Fixed[5.0]  % fully bright
                ExecWait $Script_FadeScreenIn
            EndThread
		EndIf
		Wait 1
		If *Flag_Skip == .False
            BreakLoop
		EndIf
	EndLoop
	Return
	End
}

% Fade the screen to black
#new:Script $Script_FadeToBlack
{
	Loop
		Call 	$WriteAddress ( 80156903 0 0 .False .False ) % remove brightness lock
		Call 	$ReadAddressFloat  ( 80156904 2 *Var[0] .False .False ) % load brightness
		AddF	*Var[0] *Fixed[26.0] % fade speed
		If *Var[0] >= *Fixed[255.0]
			SetF 	*Var[0] *Fixed[255.0]
			Call 	$WriteAddressFloat  ( 80156904 2 *Var[0] .False .False ) % save brightness
			BreakLoop
		EndIf
		Call 	$WriteAddressFloat  ( 80156904 2 *Var[0] .False .False ) % save brightness
		Wait 	1
	EndLoop
	Return
	End
}

% Fade the screen from black
#new:Script $Script_FadeFromBlack
{
	Loop
		Call 	$WriteAddress ( 80156903 0 0 .False .False ) % remove brightness lock
		Call 	$ReadAddressFloat  ( 80156904 2 *Var[0] .False .False ) % load brightness
		SubF	*Var[0] *Fixed[26.0] % fade speed
		If *Var[0] <= *Fixed[5.0]
			SetF 	*Var[0] *Fixed[5.0]
			Call 	$WriteAddress ( 80156903 0 1 .False .False ) % enable brightness lock
			Call 	$WriteAddressFloat  ( 80156904 2 *Var[0] .False .False ) % save brightness
			BreakLoop
		EndIf
		Call 	$WriteAddressFloat  ( 80156904 2 *Var[0] .False .False ) % save brightness
		Wait 	1
	EndLoop
	Return
	End
}
	
	#new:Script $Script_Cheato_Teach_QuickSwapping
{
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Quickswap_1 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00010032 ) % Thumb Up
	Wait	30`
	Return
	End
}
	
	#new:Script $Script_Cheato_Teach_Belts
{
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Belts_1 )
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Belts_2 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00010032 ) % Thumb Up
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Set		*Flag_BadgeLists_Learned .True
	Return
	End
}
	
#string $String_Cheato_Quickswap_1
{
[STYLE:RIGHT][...]
Hey, looks like you already have
more than one Partner!
[WAIT][NEXT][...]
It's time for me to teach you
a really useful tip!
[WAIT][NEXT][...]
When you aren't inside a battle
you can press the [PushColor][Color:14][R] button[PopColor] to
switch to your [PushColor][Color:19]last used Partner[PopColor].
[WAIT][NEXT][...]
There's times when you really
need to swap between partners
quickly.
[WAIT][NEXT][...]
Especially in the Roguelike Pit.
[WAIT][NEXT][...]
Also you can find everything
I said to you on the [PushColor][Color:19]Stats
Tab[PopColor] on the [PushColor][Color:19]Pause Menu[PopColor].
[WAIT][NEXT][...]
Just hover the cursor over
[PushColor][Color:19]Mario's face to find it[PopColor].
[WAIT][NEXT][...]
So keep that in mind.
Hey why not give it a shot right
now?
[WAIT][END]
}
	
#string $String_Cheato_Belts_1
{
[STYLE:RIGHT][...]
Hey, looks like you already have
a few Badges!
[WAIT][NEXT][...]
It's time for me to teach you
some really useful stuff!
[WAIT][NEXT][...]
Do you know you can [PushColor][Color:19]create and
load Badge Lists[PopColor] by pressing
[PushColor][Color:14]D-Pad [UP][PopColor]?
[WAIT][NEXT][...]
A Badge list is known as a
[PushColor][Color:19]Badge Belt[PopColor] and you can have a
total of [PushColor][Color:19]3 Badge Belts[PopColor].
[WAIT][NEXT][...]
Each Belt is assigned to each
direction on your D-Pad.
[WAIT][NEXT][...]
So it goes in the following way:
[WAIT][NEXT][...]
[PushColor][Color:14][UP]Pad[PopColor]: Manage each Belt.
[PushColor][Color:14][LEFT]Pad[PopColor]: Left Belt
[PushColor][Color:14][RIGHT]Pad[PopColor]: Right Belt
[PushColor][Color:14][DOWN]Pad[PopColor]: Bottom Belt
[WAIT][NEXT][...]
If you [PushColor][Color:19]press[PopColor] a belt button [PushColor][Color:19]you
will load all the Badges saved
inside that Belt[PopColor].
[WAIT][NEXT][...]
If you [PushColor][Color:19]hold[PopColor] a belt button [PushColor][Color:19]you will
save all your current equipped
Badges on that Belt[PopColor].
[WAIT][NEXT][...]
Although If you don't want to 
use those shortcuts you can
always, open the Belts menu
by just pressing [PushColor][Color:14]D-Pad [UP][PopColor]
[WAIT][NEXT][...]
Oh, one last thing...
[WAIT][NEXT][...]
If you hold [PushColor][Color:14]D-Pad [UP][PopColor] [PushColor][Color:19]you will
pause the game and open the
Badge tab automatically.[PopColor]
[WAIT][NEXT][...]
Yeah I know, it's a lot of
information.
[WAIT][END]
}
	
	
#string $String_Cheato_Belts_2
{
[STYLE:RIGHT][...]
But don't worry you can always
find everything I said to you
on the [PushColor][Color:19]Stats Tab[PopColor] in the [PushColor][Color:19]Pause
Menu[PopColor].
[WAIT][NEXT][...]
Just hover the cursor over
[PushColor][Color:19]Mario's face to find it[PopColor].
[WAIT][NEXT][...]
So keep that in mind.
Hey why not give it a shot right
now?
[WAIT][END]
}


#new:Script $Script_Cutscene_Intro0
{
ExecWait $Script_Cutscene_Intro
Return
End
}
	
	% After cheato look after mario when Mario fall from above
	#new:Script $Script_Cutscene_Intro
{
	Call DisablePlayerPhysics ( .True )
	Call SetPlayerAnimation ( 00080009 ) % sleeping
	Wait 30`
	Call SetPlayerAnimation ( 00080024 ) % sitting
	Wait 20`
	% Jump
	Call	PlaySoundAtPlayer	( 2081 .Default  ) % Jump
	Call	InterpPlayerYaw		( -90` 1 )
	Call	GetPlayerPos   		( *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 1` % y
	Call    SetPlayerJumpscale 	  ( *Fixed[1.0] )
	Call	PlayerJump ( *Var[0] *Var[1] *Var[2] F ) % xyz, height
	Wait	15`
	% Get off the bed
	Call 	DisablePlayerPhysics ( .False )
	Add		*Var[2] 50` % z
	Call	PlayerMoveTo   		( *Var[0] *Var[2] 13` ) % x z speed
	% Cheato Script
	Call    PlaySoundAtNpc ( .Npc_Cheato 0262 .Cam:Default )
	Call    ShowEmote   	( .Npc_Cheato .Emote:Exclamation -45` 20` 1 0 0 0 0 )
	% Look at Mario
	Set		*Var[2] .Npc_Cheato % npcID
	Set		*Var[3] 180` % angle
	Set		*Var[4] 10` % time
	ExecWait $InterpNpcYaw
	Wait	10`
	Call    SetNpcRotation ( .Npc_Cheato 0 0 0 )
	Call	SetNpcYaw 	( .Npc_Cheato 90` )
	% Move Cheato to Mario's position
	Call 	GetPlayerPos ( *Var[0] .False *Var[1] )
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0003 ) % Running
	Sub		*Var[0]		50`
	Call	NpcMoveTo	( .Npc_Cheato *Var[0] *Var[1] 15` )
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_1 )
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_2 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080007 ) % hand to the ear
	Wait	35`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_3 )
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_4 )
	Call 	SetPlayerAnimation ( 00010029 ) % yes
	Wait	20`
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_5 )
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_6 )
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_7 )
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Intro_8 )
	Set 	*Flag_Skip .False
	Call 	SetPlayerAnimation ( 00010032 ) % Thumb Up
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call 	DisablePlayerInput ( .False )
	Set		*Flag_Intro .True
	Call	$ActivateHammer
	Return
	End
}

#new:Script $SkipCutscene_Cutscene_Intro
{
	Set 	*Flag_Skip .True % show skip text
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Kill	*Var[A]
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			ResumeAll .True
			% after cutscene code
			% move mario off the bed
			Set 	*Var[0] 6	% entryID ~Entry:Respawn
			Call    $Function_GetPos % GetEntryPos % save xyz in var1/2/3
			Sub		*Var[2] 14` % y
			Add		*Var[3] 50` % z
			Call	SetPlayerPos ( *Var[1] *Var[2] *Var[3] )
			Call	InterpPlayerYaw ( -90` 1 )
			% move cheato
			Call	GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			Sub		*Var[0] 50`
			Call	SetNpcPos 	( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
			Call	SetNpcRotation ( .Npc_Cheato 0 0 0 )
			Call	SetNpcYaw 	( .Npc_Cheato 90` )
			Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
			Call 	SetPlayerAnimation ( 00010002 ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			ExecWait $RestoreInputs
			Set		*Flag_Intro .True
			Call	$ActivateHammer
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

#new:Script $SkipCutscene_Cutscene_MeetingOaklieFish
{
	% The tracker get turned on outside this script
	Loop
		If *Flag_Skip == .True
			BreakLoop
		EndIf
		Wait 1
	EndLoop
	Call 	$WriteAddress ( $SkipCs_Data 2 0 .False .False ) % nuke data
	Loop % track Start Button
		Call 	$ReadAddress ( $SkipCs_Data 0 *Var[0] .False .False )
		If *Var[0] >= 3B % Start Button Holded Progress % 3B = Max
			Set 	*Flag_Skip .False
			% Fade Screen Brightness
			SetGroup 0
			SuspendAll .True
			SetF	*Var[0] *Fixed[25.0]  % speed
			SetF	*Var[1] *Fixed[255.0] % fully dark
			ExecWait $Script_FadeScreenOut
			% -156` -235` -298` % position after falling from pipe
			Call	GetNpcPos ( .Npc_Cheato *Var[0] *Var[1] *Var[2] )
			Add		*Var[0] 50` % x
			Call	SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
			% restore everything
			Call	SetNpcAnimation 	( .Npc_Cheato 00AE0001 ) % idle
			Call 	SetPlayerAnimation 	( 00010002 ) % idle
			Thread % Fade Screen Brightness
				SetF	*Var[0] *Fixed[25.0] % speed
				SetF	*Var[1] *Fixed[5.0]  % fully bright
				ExecWait $Script_FadeScreenIn
			EndThread
			Kill	*Var[A]
			ResumeAll .True
			ExecWait $RestoreInputs
		EndIf
		Wait 1
		If *Flag_Skip == .False
			BreakLoop
		EndIf
	EndLoop
	Return
	End
}

	#new:Function $ActivateHammer
{
	SAB		R0, 8010F291
	JR RA
	RESERVED
}
	
#string $String_Cheato_Intro_1
{
[STYLE:RIGHT][...]
Hey! Did you wake up!
[WAIT][NEXT][...]
Good to see that, I was
starting to get worried.
[WAIT][NEXT][...]
Is everything okay? how did
you even manage to get into
this place?!
[WAIT][END]
}
	
#string $String_Cheato_Intro_2
{
	[STYLE:RIGHT][...]
	I see, hmm... hey wait a minute!
	[WAIT][NEXT][...]
	My bad! I never introduced
	myself hehe. I'm Cheato and
	you are?
	[WAIT][END]
}
	
#string $String_Cheato_Intro_3
{
	[STYLE:RIGHT][...]
	Nice to meet you Mario!
	[WAIT][END]
}
	
#string $String_Cheato_Intro_4
{
[STYLE:RIGHT][...]
Okay, you want to know a
way to get out of here, is that
right?
[WAIT][END]
}
	
#string $String_Cheato_Intro_5
{
[STYLE:RIGHT][...]
Hmm... about that...
[WAIT][NEXT][...]
To be honest, I'm not really that
certain there's even a way to
get out of this place...
[WAIT][END]
}
	
#string $String_Cheato_Intro_6
{
[STYLE:RIGHT][...]
The only thing I know about
is that pipe.
[WAIT][NEXT][...]
Nobody truly knows how deep
the pit really goes.
[WAIT][END]
}
	
#string $String_Cheato_Intro_7
{
[STYLE:RIGHT][...]
Yes, that pipe takes you to a
pit full of enemies and it looks
to me that right now, that's your
only alternative.
[WAIT][END]
}
	
#string $String_Cheato_Intro_8
{
[STYLE:RIGHT][...]
Hmm... what about this!
[WAIT][NEXT][...]
What if you check some floors
inside the Pit, so you can get
a better idea of what I'm
talking about?
[WAIT][NEXT][...]
Remember my house is your house,
you can use the bed if you want
too. I'll be cheering on you.
[WAIT][NEXT][...]
Oh by the way, I want to
introduce you some friends after
you come back from the pit.
[WAIT][NEXT][...]
I know they will be useful for
you on your quest for beating
this Pit!
[WAIT][NEXT][...]
Wish you the best of luck Mario!
[WAIT][END]
}

#string $String_Cheato_Intro_9
{
[STYLE:RIGHT][...]
Remember my house is your house,
you can use the bed if you want
too. I'll be cheering on you.
[WAIT][NEXT][...]
Wish you the best of luck Mario!
[WAIT][END]
}
	
#string $String_Cheato_Intro_GL
{
	[STYLE:RIGHT][...]
	Wish you the best of luck Mario!
	[WAIT][END]
}

#string $String_Cheato_Intro_GL_LostCoins
{
	[STYLE:RIGHT][...]
	Wish you the best of luck Mario!
	Also your coins are at Level [PushColor][Color:19][Var:02][PopColor]!
	[WAIT][END]
}
	
	% After saving goombario for 1st time
	#new:Script $Script_Cutscene_MeetingOaklieFish
{
	Call 	DisablePlayerInput ( .True )
	% set npc positions % fishmael
	Call	SetNpcPos ( .Npc_Fishmael -308` -237` -344` )
	Call	GetNpcPos ( .Npc_Fishmael *Var[0] *Var[1] *Var[2] )
	% oaklie
	Sub		*Var[0] 90` % x
	Call	SetNpcPos ( .Npc_Oaklie *Var[0] *Var[1] *Var[2] )
	% chuck
	Call	SetNpcYaw ( 8 90` )
	Add		*Var[0] 35` % x
	Sub		*Var[2] 45` % z
	Call	SetNpcPos ( 8 *Var[0] *Var[1] *Var[2] )
	Wait 	70`
	Set 	*Flag_Skip .True % show skip text
	Call	GetNpcPos ( .Npc_Cheato *Var[0] 0 *Var[1] )
	Add		*Var[0] 50` % x
	Call	PlayerMoveTo ( *Var[0] *Var[1] 20` )
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_1 )
	Call 	SetPlayerAnimation ( 00010032 ) % Thumb Up
	Wait	30`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_2 )
	Wait	5
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_Meeting_3 )
	Set 	*Flag_Skip .False
	Call 	DisablePlayerInput ( .False )
	Return
	End
}
	
% Cheato
#string $String_Cheato_Meeting_1
{
	[STYLE:RIGHT][...]
	Hey, you arrived!
	[WAIT][NEXT][...]
	How was everything there so far?
	[WAIT][END]
}
	
#string $String_Cheato_Meeting_2
{
	[STYLE:RIGHT][...]
	Good to see that. Also looks
	like you got a new friend!
	[WAIT][END]
}
	
#string $String_Cheato_Meeting_3
{
[STYLE:RIGHT][...]
Okay, as I told you before
there's some friends that
I want to introduce you to.
[WAIT][NEXT][...]
I know they will be useful
for you on this Quest.
[WAIT][NEXT][...]
What if you go with each
one and give them a talk!
[WAIT][END]
}
	
#string $String_Cheato_Meeting_4
{
[STYLE:RIGHT][...]
Hey, don't be shy go and talk
to them, they're waiting
for you.
[WAIT][END]
}
	
% after meeting oaklie and fish
#string $String_Cheato_Meeting_5
{
[STYLE:RIGHT][...]
Okay, is time to tell you my
task here.
[WAIT][NEXT][...]
And this is everything I know so
far.
[WAIT][END]
}
	
#string $String_Cheato_Meeting_6
{
[STYLE:RIGHT][...]
What is this place?
Why we're here? and
How do we get out of here?
[WAIT][NEXT][...]
I know you still have a lot of
questions, and let me tell you
that's the same for everyone
of us.
[WAIT][NEXT][...]
The only alternative we have
right now is those Pits.
[WAIT][END]
}
	
#string $String_Cheato_Meeting_7
{
[STYLE:RIGHT][...]
"Pits" you ask?
[WAIT][NEXT][...]
Yes, there's more than one Pit.
There's actually two Pits.
[WAIT][NEXT][...]
I will assist you by giving you
intel about each Pit and by
opening the gates for you.
[WAIT][NEXT][...]
I think our questions will be
answered when you reach to the
last floor of each Pit.
[WAIT][NEXT][...]
We're counting on you Mario.
And remember we're working
on this as a team.
[WAIT][NEXT][...]
One last thing!
[WAIT][NEXT][...]
Right now you tried one kind of
Pit, what if you take a
look at the other one?
[WAIT][NEXT][...]
Each Pit has different
conditions and rules.
[WAIT][NEXT][...]
If you want know more about
each Pit, you come talk to me,
anytime son.
[WAIT][END]
}

	
#string $String_Cheato_Meeting_AskActivateRogue
{
	[STYLE:RIGHT][...]
	Do you want me to activate the
	Roguelike Pit?
	[Func_04][END]
}
	
#string $String_Cheato_Meeting_8
{
[STYLE:RIGHT][...]
I suggest you try that Pit...
only for now.
[WAIT][NEXT][...]
Will be a better idea to
try the other one when you
have a little more experience.
[WAIT][NEXT][...]
Are you sure, you don't want
to try the Roguelike Pit?
[Color:0B](You can activate each Pit
any time you want)
[Func_04][END]
}
	
#string $String_Cheato_Meeting_AskHearRules	
{
	[STYLE:RIGHT][...]
	Do you want to know, the rules
	about that Pit?
	[Func_04][END]
}
	
#string $String_Cheato_Meeting_9
{
[STYLE:RIGHT][...]
I see, so you are the kind of
person that likes surprises.
[WAIT][END]
}
	
	#string $String_Cheato_Meeting_10
{
	[STYLE:RIGHT][...]
	Good luck over there Mario.
	[WAIT][END]
}

#string $String_GlMario
{
	[STYLE:RIGHT][...]
	Good luck over there Mario!
	[WAIT][END]
}

% Fishmael
#string $String_Fishmael_Meeting_1
{
[STYLE:RIGHT][...]
Hi, you are Mario right?
Cheato told me about you.
[WAIT][NEXT][...]
Nice to meet you, I'm Fishmael.
[WAIT][NEXT][...]
I will be helping you on managing
your coins, you can basically
look at me as a bank.
[WAIT][NEXT][...]
Coins will be really important in
your journey so remember to come
to me time to time.
[WAIT][END]
}
	
#string $String_Fishmael_Meeting_2
{
[STYLE:RIGHT][...]
Ah, you ask why we're helping
you all of the sudden?
[WAIT][NEXT][...]
To be honest...
I would like to know that exact
reason as well...
[WAIT][END]
}
		
#string $String_Fishmael_Meeting_3
{
[STYLE:RIGHT][...]
I dunno, everything just gets
blurry when I try to
remember...
[WAIT][NEXT][...]
Sorry Mario, I would love to
tell you more but that's
currently all I know...
[WAIT][NEXT][...]
The only thing I can tell you
for sure is.
[WAIT][NEXT][...]
We are all stuck here and
looks like that Pit is our
only way out.
[WAIT][NEXT][...]
So the only thing we can do
right now is work as a team
and help you to conquer that
Pit!
[WAIT][END]
}	
	
	% Fishmael - Creating Bank Account
	#string $String_Fishmael_CreatingAccount_1
{
	[STYLE:RIGHT][...]
	Oh yeah, I also have something
	really important for you take
	this.
	[WAIT][END]
}
	
	#string $String_Fishmael_CreatingAccount_2
{
	[STYLE:RIGHT][...]
	With that card you can withdraw
	and deposit all the coins you want.
	[WAIT][END]
}
	
	#string $String_Fishmael_CreatingAccount_3
{
	[STYLE:RIGHT][...]
	You can use that card to buy
	upgrades from Oaklie inside the
	Pit too, although this is [PushColor][Color:19]only
	available on the Classic Pit[PopColor].
	[WAIT][END]
}
	
% After mario died for 1st time on Classic mode
#new:Script $Script_Cutscene_1stDead
{
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_1stTimeDead_1 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Call 	PlaySoundAtPlayer 	( 0262 .Default ) % !
	Call 	ShowEmote 		  	( .Default .Emote:Exclamation -45` 20` 0 0 0 0 0 )
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_1stTimeDead_2 )
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Wait	1
	Call 	SetPlayerAnimation ( 00080016 ) % surprised
	Call 	PlaySoundAtPlayer 	( 0262 .Default ) % !
	Call 	ShowEmote 		  	( .Default .Emote:Exclamation -45` 20` 0 0 0 0 0 )
	Wait	35`
	Call 	SetPlayerAnimation ( 00010002 ) % idle
	Call    SpeakToPlayer ( .Npc_Cheato 00AE0004 00AE0001 00000000 $String_Cheato_1stTimeDead_3 )
	Return
	End
}
	
	#new:Script $Script_Cutscene_WalkOffBed
{
	% Get off the bed
	Call	GetPlayerPos   		( *Var[0] *Var[1] *Var[2] )
	Add		*Var[2] 50` % z
	Call	PlayerMoveTo   		( *Var[0] *Var[2] 13` ) % x z speed
	% Cheato stuff
	Call	SetNpcYaw 		( .Npc_Cheato 90` ) % Look at Mario
	Wait	20`
	% Move Cheato to Mario's position
	Call 	GetPlayerPos ( *Var[0] .False *Var[1] )
	Call	SetNpcSpeed ( .Npc_Cheato *Fixed[6.0] )
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0003 ) % Running
	Sub		*Var[0]		50`
	Call	NpcMoveTo	( .Npc_Cheato *Var[0] *Var[1] 0 )
	Call	SetNpcSpeed ( .Npc_Cheato *Fixed[1.0] )
	Call	SetNpcAnimation	( .Npc_Cheato 00AE0001 ) % Idle
	Call 	SetNpcVar ( .Npc_Cheato .Default .True ) % cheato has already walked to Mario
	Return
	End
}
	
#string $String_Cheato_1stTimeDead_1
{
[STYLE:RIGHT][...]
Hey! You're finally awake!
[WAIT][NEXT][...]
I figured the situation
wasn't in your favor.
[WAIT][NEXT][...]
So I brought you back here.
[WAIT][NEXT][...]
Also looks like you lost
all your coins.
[WAIT][END]
}
		
#string $String_Cheato_1stTimeDead_2
{
[STYLE:RIGHT][...]
You need to go back for your
coins Mario!
[WAIT][NEXT][...]
Just keep in mind [PushColor][Color:19]if you die on
the Pit without having saved
your previously lost coins,
those coins will be lost  forever![PopColor]
[WAIT][END]
}
		
#string $String_Cheato_1stTimeDead_3
{
[STYLE:RIGHT][...]
Remember this only applies on
[PushColor][Color:19]Classic Pit[PopColor].
[WAIT][NEXT][...]
If you die in the Roguelike
Pit, [PushColor][Color:19]you will not lose any
coins.[PopColor]
[WAIT][NEXT][...]
So you can use that to your
advantage, maybe you can try
farming some coins on Roguelike
[WAIT][NEXT][...]
before trying to get your
coins back.
[WAIT][NEXT][...]
But well that's up to you.
[WAIT][NEXT][...]
If you [PushColor][Color:19]want to know on what
floor you lost your coins[PopColor],
just talk to me anytime.
[WAIT][NEXT][...]
Well, see ya.
[WAIT][END]
}	
	
 %
% Roguelike Mode functions
 %

/%
	*Rogue_SavedBadge1  = 800DBE50
	*Rogue_SavedBadge2  = 800DBE52
%/
#new:Function $Function_SaveActivatedBadges
{
PUSH	T0
LAH		T0, 8010F498 % Activated Badge 1
SAH		T0, 800DBE50 % Saved Badge 1
LAH		T0, 8010F49A % Activated Badge 2
SAH		T0, 800DBE52 % Saved Badge 2
LAH		T0, 8010F49C % Activated Badge 3
SAH		T0, 800DBE54 % Saved Badge 3
LAH		T0, 8010F49E % Activated Badge 4
SAH		T0, 800DBE56 % Saved Badge 4
LAH		T0, 8010F4A0 % Activated Badge 5
SAH		T0, 800DBE58 % Saved Badge 5
LAH		T0, 8010F4A2 % Activated Badge 6
SAH		T0, 800DBE5A % Saved Badge 6
LAH		T0, 8010F4A4 % Activated Badge 7
SAH		T0, 800DBE5C % Saved Badge 7
LAH		T0, 8010F4A6 % Activated Badge 8
SAH		T0, 800DBE5E % Saved Badge 8
LAH		T0, 8010F4A8 % Activated Badge 9
SAH		T0, 800DBE60 % Saved Badge 9
LAH		T0, 8010F4AA % Activated Badge 10
SAH		T0, 800DBE62 % Saved Badge 10
LAH		T0, 8010F4AC % Activated Badge 11
SAH		T0, 800DBE64 % Saved Badge 11
LAH		T0, 8010F4AE % Activated Badge 12
SAH		T0, 800DBE66 % Saved Badge 12
LAH		T0, 8010F4B0 % Activated Badge 13
SAH		T0, 800DBE68 % Saved Badge 13
LAH		T0, 8010F4B2 % Activated Badge 14
SAH		T0, 800DBE6A % Saved Badge 14
LAH		T0, 8010F4B4 % Activated Badge 15
SAH		T0, 800DBE6C % Saved Badge 15
LAH		T0, 8010F4B6 % Activated Badge 16
SAH		T0, 800DBE6E % Saved Badge 16
LAH		T0, 8010F4B8 % Activated Badge 17
SAH		T0, 800DBE70 % Saved Badge 17
LAH		T0, 8010F4BA % Activated Badge 18
SAH		T0, 800DBE72 % Saved Badge 18
LAH		T0, 8010F4BC % Activated Badge 19
SAH		T0, 800DBE74 % Saved Badge 19
LAH		T0, 8010F4BE % Activated Badge 20
SAH		T0, 800DBE76 % Saved Badge 20
LAH		T0, 8010F4C0 % Activated Badge 21
SAH		T0, 800DBE78 % Saved Badge 21
LAH		T0, 8010F4C2 % Activated Badge 22
SAH		T0, 800DBE7A % Saved Badge 22
LAH		T0, 8010F4C4 % Activated Badge 23
SAH		T0, 800DBE7C % Saved Badge 23
LAH		T0, 8010F4C6 % Activated Badge 24
SAH		T0, 800DBE7E % Saved Badge 24
LAH		T0, 8010F4C8 % Activated Badge 25
SAH		T0, 800DBE80 % Saved Badge 25
LAH		T0, 8010F4CA % Activated Badge 26
SAH		T0, 800DBE82 % Saved Badge 26
LAH		T0, 8010F4CC % Activated Badge 27
SAH		T0, 800DBE84 % Saved Badge 27
LAH		T0, 8010F4CE % Activated Badge 28
SAH		T0, 800DBE86 % Saved Badge 28
LAH		T0, 8010F4D0 % Activated Badge 29
SAH		T0, 800DBE88 % Saved Badge 29
LAH		T0, 8010F4D2 % Activated Badge 30
SAH		T0, 800DBE8A % Saved Badge 30
POP		T0
JR		RA
NOP
}
   
#new:Function $RestoreBadges
{
   PUSH		T0
   LAH		T0, 800DBE50 % Load BadgeSaved 1
   SAH		T0, 8010F498 % Activate BadgeSaved 1
   LAH		T0, 800DBE52 % Load BadgeSaved 2
   SAH		T0, 8010F49A % Activate BadgeSaved 2
   LAH		T0, 800DBE54 % Load BadgeSaved 3
   SAH		T0, 8010F49C % Activate BadgeSaved 3
   LAH		T0, 800DBE56 % Load BadgeSaved 4
   SAH		T0, 8010F49E % Activate BadgeSaved 4
   LAH		T0, 800DBE58 % Load BadgeSaved 5
   SAH		T0, 8010F4A0 % Activate BadgeSaved 5
   LAH		T0, 800DBE5A % Load BadgeSaved 6
   SAH		T0, 8010F4A2 % Activate BadgeSaved 6
   LAH		T0, 800DBE5C % Load BadgeSaved 7
   SAH		T0, 8010F4A4 % Activate BadgeSaved 7
   LAH		T0, 800DBE5E % Load BadgeSaved 8
   SAH		T0, 8010F4A6 % Activate BadgeSaved 8
   LAH		T0, 800DBE60 % Load BadgeSaved 9
   SAH		T0, 8010F4A8 % Activate BadgeSaved 9
   LAH		T0, 800DBE62 % Load BadgeSaved 10
   SAH		T0, 8010F4AA % Activate BadgeSaved 10
   LAH		T0, 800DBE64 % Load BadgeSaved 11
   SAH		T0, 8010F4AC % Activate BadgeSaved 11
   LAH		T0, 800DBE66 % Load BadgeSaved 12
   SAH		T0, 8010F4AE % Activate BadgeSaved 12
   LAH		T0, 800DBE68 % Load BadgeSaved 13
   SAH		T0, 8010F4B0 % Activate BadgeSaved 13
   LAH		T0, 800DBE6A % Load BadgeSaved 14
   SAH		T0, 8010F4B2 % Activate BadgeSaved 14
   LAH		T0, 800DBE6C % Load BadgeSaved 15
   SAH		T0, 8010F4B4 % Activate BadgeSaved 15
   LAH		T0, 800DBE6E % Load BadgeSaved 16
   SAH		T0, 8010F4B6 % Activate BadgeSaved 16
   LAH		T0, 800DBE70 % Load BadgeSaved 17
   SAH		T0, 8010F4B8 % Activate BadgeSaved 17
   LAH		T0, 800DBE72 % Load BadgeSaved 18
   SAH		T0, 8010F4BA % Activate BadgeSaved 18
   LAH		T0, 800DBE74 % Load BadgeSaved 19
   SAH		T0, 8010F4BC % Activate BadgeSaved 19
   LAH		T0, 800DBE76 % Load BadgeSaved 20
   SAH		T0, 8010F4BE % Activate BadgeSaved 20
   LAH		T0, 800DBE78 % Load BadgeSaved 21
   SAH		T0, 8010F4C0 % Activate BadgeSaved 21
   LAH		T0, 800DBE7A % Load BadgeSaved 22
   SAH		T0, 8010F4C2 % Activate BadgeSaved 22
   LAH		T0, 800DBE7C % Load BadgeSaved 23
   SAH		T0, 8010F4C4 % Activate BadgeSaved 23
   LAH		T0, 800DBE7E % Load BadgeSaved 24
   SAH		T0, 8010F4C6 % Activate BadgeSaved 24
   LAH		T0, 800DBE80 % Load BadgeSaved 25
   SAH		T0, 8010F4C8 % Activate BadgeSaved 25
   LAH		T0, 800DBE82 % Load BadgeSaved 26
   SAH		T0, 8010F4CA % Activate BadgeSaved 26
   LAH		T0, 800DBE84 % Load BadgeSaved 27
   SAH		T0, 8010F4CC % Activate BadgeSaved 27
   LAH		T0, 800DBE86 % Load BadgeSaved 28
   SAH		T0, 8010F4CE % Activate BadgeSaved 28
   LAH		T0, 800DBE88 % Load BadgeSaved 29
   SAH		T0, 8010F4D0 % Activate BadgeSaved 29
   LAH		T0, 800DBE8A % Load BadgeSaved 30
   SAH		T0, 8010F4D2 % Activate BadgeSaved 30
   POP		T0
   JR		RA
   NOP
}
   
#new:Script $RestoreBadgesFlags
{
   Set		*Flag_HPDrain2 .False
   Set		*Flag_DamageDodgeA2 .False
   Set		*Flag_DamageDodgeB2 .False
   Set		*Flag_LastStand2 .False
   Set		*Flag_PowerBounce2 .False
   Set		*Flag_MegaRush2 .False
   Set		*Flag_AllorNothing2 .False
   Set		*Flag_PUpDDown2 .False
   Set		*Flag_DDownJump2 .False
   Set		*Flag_PowerRush2 .False
   Set		*Flag_DoubleDip2 .False
   Set		*Flag_PowerQuake2 .False
   Set		*Flag_QuakeHammer2 .False
   Set		*Flag_QuickChange2 .False
   Set		*Flag_PowerPlusA2 .False
   Set		*Flag_PowerPlusB2 .False
   Set		*Flag_PDownDUp2 .False
   Set		*Flag_DefendPlus2 .False
   Set		*Flag_CloseCall2 .False
   Set		*Flag_FlowerFinder2 .False
   Set		*Flag_HeartFinder2 .False
   Set		*Flag_FlowerSaverA2 .False
   Set		*Flag_FlowerSaverB2 .False
   Set		*Flag_PowerJump2 .False
   Set		*Flag_DizzyAttack2 .False
   Set		*Flag_Multibounce2 .False
   Set		*Flag_ZapTap2 .False
   Set		*Flag_DodgeMaster2 .False
   Set		*Flag_HappyFlowerA2 .False
   Set		*Flag_HappyFlowerB2 .False
   Set		*Flag_DeepFocusA2 .False
   Set		*Flag_DeepFocusB2 .False
   Set		*Flag_DeepFocusC2 .False
   Set		*Flag_JumpCharge2 .False
   Set		*Flag_SJumpChg2 .False
   Set		*Flag_FeelingFine2 .False
   Set		*Flag_IcePower2 .False
   Set		*Flag_HappyHeartA2 .False
   Set		*Flag_HappyHeartB2 .False
   Set		*Flag_FireShield2 .False
   Set		*Flag_GroupFocus2 .False
   Set		*Flag_ShrinkStomp2 .False
   Set		*Flag_TripleDip2 .False
   Set		*Flag_MegaQuake2 .False
   Set		*Flag_DizzyStomp2 .False
   Set		*Flag_SleepStomp2 .False
   Set		*Flag_PowerSmash2 .False
   Set		*Flag_DDownPound2 .False
   Set		*Flag_SpikeShield2 .False
   Set		*Flag_SmashCharge2 .False
   Set		*Flag_Refund2 .False
   Set		*Flag_MegaJump2 .False
   Set		*Flag_MegaSmash2 .False
   Set		*Flag_Hammer_Throw2 .False
   Set		*Flag_Pretty_Lucky2 .False
   Set		*Flag_Chill_Out2 .False
   Set		*Flag_Money_Money2 .False
   Set		*Flag_PayOff2 .False
   Set		*Flag_Spin_Smash2 .False
   %Set		*Flag_Runaway_Pay2 .False % unused badge
   Set		*Flag_SSmashChg2 .False
   Set		*Flag_Peekaboo2 .False
   Set		*Flag_LuckyDay2 .False
   Set		*Flag_SlowGo2 .False
   % Partners
   Set		*Flag_Goombario2 .False
   Set		*Flag_Kooper2 .False
   Set		*Flag_Bombette2 .False
   Set		*Flag_Parakarry2 .False
   Set		*Flag_Bow2 .False
   Set		*Flag_Watt2 .False
   Set		*Flag_Sushie2 .False
   Set		*Flag_Lakilester2 .False
   Return
   End
}

#new:Function $Function_ResetHighscores
{
   SAW	R0, $Timer_Total
   SAW	R0, $Timer_Floor
   SAW	R0, $Timer_Floor_Highest
   SAB	R0, $Timer_Speed
   SAH	R0, $TotalDamage_Dealt
   SAH	R0, $TotalDamage_Received
   SAB	R0, $TotalItemsUsed
   SAH	R0, $TotalFloors
   JR	RA
   NOP
}
   
#new:Script $ComingDownPipe
{
	Set *Var[A] 3					% entry index
 	Set *Var[B] ~Collider:Col3		% pipe collider id
	ExecWait $FallingDownPipe		% loaded from FallingDownPipe.mpat
	Return
	End
}

#new:Script $Script_Exit0
{
	Call     UseExitHeading  	( 3C 1 )
	Exec     ExitWalk
	%Set	 	 *PitMapID 40`	% Testing Code
	%Call     GotoMap	( "pt_00" 9 )
	Call     GotoMap	( "pt_255" 1 )
	Wait     100`
	Return
	End
}

#new:Script $Script_Exit2
{
	Call     UseExitHeading  	( 3C 4 )
	Exec     ExitWalk 
	Call     GotoMap         	( "mze_00" 0 )
	Wait     100` 
	Return
	End
}
   
   
#new:Function $Function_BedAnimation
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  DADDU     A0, S1, R0
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  DADDU     S1, V0, R0
   34:  DADDU     A0, R0, R0
   38:  DADDU     A1, A0, R0
   3C:  DADDU     S0, V0, R0
   40:  ADDIU     A2, R0, BE
   44:  JAL       80137E4C
   48:  ADDIU     A3, R0, 91
   4C:  MTC1      S0, F0
   50:  NOP
   54:  CVT.S.W   F0, F0
   58:  MFC1      A1, F0
   5C:  JAL       80137D88
   60:  ANDI      A0, S1, FF
   64:  LW        RA, 18 (SP)
   68:  LW        S1, 14 (SP)
   6C:  LW        S0, 10 (SP)
   70:  ADDIU     V0, R0, 2
   74:  JR        RA
   78:  ADDIU     SP, SP, 20
}
   
#new:Function $RespawnPartner
{
	PUSH	RA
	LW      V0, C (A0)
    JAL     ~Func:get_variable
   	LW      A1, 0 (V0)
   	SLL     V0, V0, 18
   	JAL     800EB168
   	SRA     A0, V0, 18
   	POP		RA
   	JR      RA
	ADDIU   V0, R0, 2
}

#new:Function $RespawnPartner_PartnerBeforeEnteringRoguelike % Load Mario's partner before entering Rogue and spawn it
{
	PUSH	RA, A1, A2, V0
	LIO 	A1, *Rogue_LastPartner
	JAL 	~Func:get_variable
	RESERVED
   	SLL     V0, V0, 18
   	JAL     800EB168
   	SRA     A0, V0, 18
   	POP		RA, A1, A2, V0
   	JR      RA
	ADDIU   V0, R0, 2
}
   
#new:Function $DespawnPartner
{
    PUSH	RA
    LW      V0, C (A0)
    LAB     A2, 8010F2A2
    JAL     ~Func:set_variable
    LW      A1, 0 (V0)
    JAL     800EB168
    DADDU   A0, R0, R0
    POP		RA
    JR      RA
    ADDIU   V0, R0, 2
}
	
%%
% Strings
%%

#string $TauntString
{
[STYLE:RIGHT][...]
Hi Mario.
good luck over there,
you will really need it, hehe
[WAIT][END]
}

#string $BedString
{
[STYLE:RIGHT][...]
Looking for a little nap, Mario?
[Func_04][END]
}

% Rank stuff got removed
/%#string $SignString_2
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF]Rank:   [STAR]  [STAR]
Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}

#string $SignString_3
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF]Rank:   [STAR]  [STAR]  [STAR]
Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}

#string $SignString_4
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF]Rank:   [STAR]  [STAR]  [STAR]  [STAR]
Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}

#string $SignString_5
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF]Rank:   [STAR]  [STAR]  [STAR]  [STAR]  [STAR]
Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}

#string $SignString_6
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF]Rank:   [STAR]  [STAR]  [STAR]  [STAR]  [STAR]  [STAR]
Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}

#string $SignString_7
{
[DelayOff][STYLE:SIGN][...]
[Func_29:FF][PushColor]Rank:   [Color:26][STAR]  [Color:1A][STAR]  [Color:22][STAR]  [Color:24][STAR]  [Color:28][STAR]  [Color:2F][STAR]  [Color:25][STAR]
[PopColor]Deepest Level Reached:  [Var:00]/100
Total Badges:              [Var:01]/65
Total Floors Reached:     [Var:02]
[DelayOn][WAIT][END]
}%/


#string $Tattle_Cheato
{
[STYLE:TATTLE][...]
That's Rip Cheato.
[WAIT][NEXT][...]
He has been kind enough
to receive us at his home.
[WAIT][NEXT][...]
You can talk to him to
change the mode, difficulty
or gather intel about the Pit.
[WAIT][NEXT][...]
When you have coins that are lost
inside the Pit he can tell you where
your coins are.
[WAIT][END]
}

#string $Tattle_Fishmael
{
[STYLE:TATTLE][...]
He is Fishmael.
You can talk to him to deposit
or withdraw coins from your
bank account.
[WAIT][NEXT][...]
Remember to always save coins
from time to time.
[WAIT][NEXT][...]
You never know when you'll lose all
of your coins!
[WAIT][NEXT][...]
Plus [PushColor][Color:19]there's some really
pricey stuff out there[PopColor], stuff
that is only available
[WAIT][NEXT][...]
to be purchased through your
Bank Account because the price
it's just too high.
[WAIT][NEXT][...]
And you will not even be able
to carry all those coins needed
to buy that all by yourself.
[WAIT][NEXT][...]
So keep that in mind too Mario.
[WAIT][NEXT][...]
And Remember to always save coins
from time to time!
[WAIT][END]
}

%%
% Map Tattle
%%

#new:Function $Function_GetTattle
{
LIO       V0, $MapTattle
JR        RA
RESERVED
}
	
#string $MapTattle
{
[STYLE:TATTLE][...]
[Func_2B]This is the entrance to the
Pit of 100 Trials.
[WAIT][NEXT][...]
This place is also [PushColor][Color:19]Cheato's[PopColor]
home too.
[WAIT][NEXT][...]
You can talk to him to get
[PushColor][Color:19]intel about the pit[PopColor] or to
change the [PushColor][Color:19]difficulty[PopColor] and
the pit [PushColor][Color:19]mode[PopColor].
[WAIT][NEXT][...]
There is also [PushColor][Color:19]Fishmael[PopColor], he
will assist you in [PushColor][Color:19]saving and
withdrawing money[PopColor]
[WAIT][NEXT][...]
remember to always save some
money!
[WAIT][NEXT][...]
There is also [PushColor][Color:19]Oaklie[PopColor], you can
buy new [PushColor][Color:19]upgrades[PopColor] for you
and your partners from him
[WAIT][NEXT][...]
you can [PushColor][Color:19]buy Badges[PopColor] from him
too, just keep in mind they
are kinda pricy.
[WAIT][NEXT][...]
And for last but not least
There is also [PushColor][Color:19]Chuck[PopColor].
[WAIT][NEXT][...]
You can buy some new
[PushColor][Color:19]furniture for the Pit[PopColor] to
decorate this place a bit
and lift the mood a bit here.
[WAIT][NEXT][...]
You can buy new [PushColor][Color:19]skins[PopColor] for you
Mario.
[WAIT][NEXT][...]
A new change of clothes is
always good once in a while
doesn't it?
[WAIT][END]
}

%% Define stuff
#define .CurrentMode *MapVar[1]
#define .LastModeActivated *MapVar[2]
#define .Cancel 2
#define .Npc_Cheato 1
#define .Npc_Fishmael 5
#define .Npc_Oaklie 6
#define .Npc_Chuck 8
#define .Npc_RubyK B

% Used for the bank npc
#define .CursorX 	*MapVar[4]
#define .CursorL 	*MapVar[5]
#define .CursorM 	*MapVar[6]
#define .CursorR 	*MapVar[7]
#define .CursorRR 	*MapVar[C]
#define .Amount	 	*MapVar[8]
#define .Bank	 	*MapVar[9]
#define .Function 	2 % Used as an NpcVar
#define .Deposit 	1
#define .Withdraw 	2
%
% ModelID 30 = Numbers Group
% 0X00
#define .Number_00 100
#define .Number_0100 101
#define .Number_0200 102
#define .Number_0300 103
#define .Number_0400 104
#define .Number_0500 105
#define .Number_0600 106
#define .Number_0700 107
#define .Number_0800 108
#define .Number_0900 109
% X000
#define .Number_0 10A
#define .Number_1000 10B
#define .Number_2000 10C
#define .Number_3000 10D
#define .Number_4000 10E
#define .Number_5000 10F
#define .Number_6000 110
#define .Number_7000 111
#define .Number_8000 112
#define .Number_9000 113
% 000X
#define .Number_0000 114
#define .Number_0001 115
#define .Number_0002 116
#define .Number_0003 117
#define .Number_0004 118
#define .Number_0005 119
#define .Number_0006 11A
#define .Number_0007 11B
#define .Number_0008 11C
#define .Number_0009 11D
#define .Number_Pos_Left 	-50`
#define .Number_Pos_Center 	-25`
#define .Number_Pos_Right 	0
#define .Number_Pos_RRight 	25`
