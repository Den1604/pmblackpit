%Initiate Enemy, Script
#new:Script $Script_Init_EnemyNPC
{
      %Call     BindNpcIdle    ( .Npc:Self $Script_FloorEnemy_Idle )
	Call     BindNpcDefeat 	( .Npc:Self $Script_TrackOutcome )
	Return
	End
}
	
% Used just on pt61_66 % Used to despawn levitating spinies
#new:Script $Script_Init_Lakitu
{
      %Call     BindNpcIdle    ( .Npc:Self $Script_FloorEnemy_Idle )
	Call     BindNpcDefeat 	( .Npc:Self $Script_LakituOutcome )
	Return
	End
}

% Handle current battle outcome
#new:Script $Script_TrackOutcome
{
	Call     GetBattleOutcome 	( *Var[0] )
	Switch  *Var[0] 
		Case  ==  0 % When you won
                  If *Flag_Mode_Rogue == .False
			      Exec	$Script_AddCoins
                  EndIf
                  Exec	$PipeSpawning
                  % Check if the Player is on Rogue, to spawn a key too
                  Thread
                        If *Flag_Mode_Rogue == .True
                              % Time to Spawn a key?
                              Set   *Var[0] 8 % single key
                              Call  RandInt ( 100` *Var[1] )
                              If *Var[1] < 15`
                                    % spawn two keys instead?
                                    If *Var[1] < 5
                                          Add   *Var[0] 1 % 2 keys
                                    EndIf
                                    Call  GetNpcPos ( .Npc:Self *Var[2] *Var[3] *Var[4] )
                                    Call  MakeItemEntity   ( *Var[0] *Var[2] *Var[3] *Var[4] 3 .False )
                                    Call  PlaySound ( 000B ) % key spawned
                              EndIf
                        EndIf
                  EndThread
                  Call	DoNpcDefeat
		Case  ==  1 % When you die
                  SuspendOthers .True
                  % Set Mario Animation
                  Call SetPlayerAnimation ( 0001000F ) % Dead
			ExecWait $Script_SetEnemyIdle		 % Set the Enemy NPC animation to idle
			Call GetCurrentPartnerID 	( *Var[0] )
			If  *Var[0]  !=  0 
				Call DisablePartnerAI ( .True )
			EndIf
			Call     $Function_RevivePlayer
                  WaitSeconds 1
			Call DisablePlayerInput	( .True )
                  % bypass if rogue is active
                  If *Flag_Mode_Rogue == .True
                        % Roguelike - Give half of the total gained coins on this playthrough
                        ExecWait $Script_Rogue_GiveHalfCoins
                        If *Flag_Demo == .True
                              Call GotoMap ( "dmo_00" 0 )
                        Else
                              Call GotoMap ( "pt_00" 6 )
                        EndIf
                        Return
                  EndIf
                  Call ShowCoinCounter ( .True )
			Jump $Script_SubstractCoins
		Case  ==  2 % When you run % Testing Purposes
			/%Exec	$PipeSpawning
			Call	DoNpcDefeat	( )%/
	EndSwitch
	Return
      End
}
	
% Used just on pt61_66 % Used to despawn levitating spinies
#new:Script $Script_LakituOutcome
{
	Call     GetBattleOutcome 	( *Var[0] )
	Switch  *Var[0] 
		Case  ==  0 % When you won
		% After Mario won check each Spiny Y Coords
			Set		*Var[0] 32 % Spiny1 NpcID
			Loop 4
				Call	GetNpcPos ( *Var[0] .False *Var[1] .False )
				If	*Var[1] > 49`
					If	*Var[1] < 75`
						% Check if any Spiny have a Y Coordinates between 49 - 75 after winning the battle
						% if True, remove the NPC, to evade having the Spiny suspend in the air. This doesn't happen in
						% Vanilla because if you beat the Lakitu, all spinies get defeated too.
						Call	RemoveNpc ( *Var[0] )
					EndIf
				EndIf
				Add *Var[0] 1
			EndLoop
			If *Flag_Mode_Rogue == .False
			      Exec	$Script_AddCoins
                  EndIf
                  Exec	$PipeSpawning
                  % Check if the Player is on Rogue, to spawn a key too
                  Thread
                        If *Flag_Mode_Rogue == .True
                              % Time to Spawn a key?
                              Set   *Var[0] 8 % single key
                              Call  RandInt ( 100` *Var[1] )
                              If *Var[1] < 15`
                                    % spawn two keys instead?
                                    If *Var[1] < 5
                                          Add   *Var[0] 1 % 2 keys
                                    EndIf
                                    Call  GetNpcPos ( .Npc:Self *Var[2] *Var[3] *Var[4] )
                                    Call  MakeItemEntity   ( *Var[0] *Var[2] *Var[3] *Var[4] 3 .False )
                                    Call  PlaySound ( 000B ) % key spawned
                              EndIf
                        EndIf
                  EndThread
                  Call	DoNpcDefeat
		Case  ==  1 % When you die
			SuspendOthers .True
                  Call SetPlayerAnimation ( 0001000F ) % Dead
                  % bypass if rogue is active, because the spring keepers
                  ExecWait $Script_SetEnemyIdle		 % Set the Enemy NPC animation to idle
			Call GetCurrentPartnerID 	( *Var[0] )
			If  *Var[0]  !=  0 
				Call DisablePartnerAI ( 1 )
			EndIf
			Call     $Function_RevivePlayer
			WaitSeconds 1
			Call ShowCoinCounter ( .True )
                  Call DisablePlayerInput	( .True )
                  % bypass if rogue is active
                  If *Flag_Mode_Rogue == .True
                        WaitSeconds 1
                        % Roguelike - Give half of the total gained coins on this playthrough
                        ExecWait $Script_Rogue_GiveHalfCoins
                        Call GotoMap ( "pt_00" 6 )
                        Return
                  EndIf
			Jump $Script_SubstractCoins
	EndSwitch
	Return
	End
}

% Track if the enemy gets out of bounds to put it
% inside the floor again
#new:Script $Script_FloorEnemy_Idle
{
      Loop
            % Is a flying enemy?
            Switch *PitMapID
                  % Levels with flying NPCs
                  CaseOR == 3`
                  CaseOR == 5`
                  CaseOR == 8`
                  CaseOR == 14`
                  CaseOR == 19`
                  CaseOR == 23`
                  CaseOR == 28`
                  CaseOR == 32`
                  CaseOR == 33`
                  CaseOR == 37`
                  CaseOR == 38`
                  CaseOR == 73`
                  CaseOR == 78`
                        Set *Var[3] 3 % Flying NPC
                  EndCaseGroup
                  CaseOR == 51`
                  CaseOR == 56`
                  CaseOR == 63`
                  CaseOR == 68`
                  CaseOR == 75`
                  CaseOR == 92`
                  CaseOR == 97`
                        Set *Var[3] 2 % LavaBubble/Ember & Ruff Puff
                  EndCaseGroup
                  CaseOR == 61`
                  CaseOR == 66`
                        Set *Var[3] 1 % Lakitus
                  EndCaseGroup
                  Default
                        Set *Var[3] 0 % Grounded NPC
            EndSwitch
            Set  *Var[4] .False
            Call  GetNpcPos ( .Default *Var[0] *Var[1] *Var[2] )
            % X Checks
            Switch *Var[0]
                  Case > -310` % Left wall
                        Set *Var[4] .True
                  Case < -754` % Right wall
                        Set *Var[4] .True
            EndSwitch
            % Y Checks
            Switch *Var[1]
                  Case < -70` % Bottom Floor
                        Set *Var[4] .True
                  Case > 185` % Top Floor
                        Set *Var[4] .True
            EndSwitch
            % Z Checks
            Switch *Var[2]
                  Case < -90` % Far Wall
                        Set *Var[4] .True
                  Case > 190` % Closest Wall
                        Set *Var[4] .True
            EndSwitch
            If *Var[4] == .True
                  Switch *Var[3]
                        Case == 0 % Ground
                              Call  SetNpcPos ( .Default -534` -12` 35` )
                        Case == 1 % Lakitu
                              Call  SetNpcPos ( .Default -534` 70` 35` )
                        Case == 2 % Embers & Ruff Puff
                              Call  SetNpcPos ( .Default -534` -3` 35` )
                        Case == 3 % Flying Enemy
                              Call  SetNpcPos ( .Default -534` 43` 35` )
                  EndSwitch
            EndIf
            Wait 1
      EndLoop
      Return
      End
}

#new:Script $Script_Rogue_GiveTotalCoins
{
	Call  ShowMessageAtScreenPos  ( $String_Rogue_CoinsGained_Success 000000A0 00000028 )
	Call 	$ReadAddress ( 8010F2AA 1 *Var[0] .False .False ) % load Total Gained Coins in actual Pit playthrough
      If *Var[0] == 0 % Zero coins
            Return
      EndIf
      Set   *Var[A] *Var[0]
	% show bank's coin box
	Set	*BankTextBoxPosition 1
	Set	*TalkingToFishmael .True
	Wait 10`
	% save coins
	Call 	$ReadAddress  ( 8010F2AA 1 *Var[0] .False .False ) % load total coins
	Call 	$ReadAddress  ( 803560DC 2 *Var[1] .False .False ) % load bank account
	Add		*Var[1] *Var[0]
	SetTimescale *Fixed[15.0]
	Loop
		Call 	$ReadAddress  ( 803560DC 2 *Var[2] .False .False ) % load bank account
		Add	*Var[2] 1
		% Bank Account Cap
		If *Var[2] > 9999999` % 9,999,999 / 0098967F
			BreakLoop
		EndIf
		Call 	$WriteAddress ( 803560DC 2 *Var[2] .False .False ) % save bank account
		Call	PlaySound ( 0211 ) % coin
		If *Var[2] == *Var[1]
			BreakLoop
		EndIf
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
      Call $ReadAddress ( 803560DC 2 *Var[1] .False .False ) % load bank account
	% Check Challenges
	Switch *Var[1]
		Case >= 40000`
			Set *Flag_Cheev_Global_13 .True
			Set *Flag_Cheev_Global_12 .True
			Set *Flag_Cheev_Global_11 .True
		Case >= 10000`
			Set *Flag_Cheev_Global_12 .True
			Set *Flag_Cheev_Global_11 .True
		Case >= 1000`
			Set *Flag_Cheev_Global_11 .True
	EndSwitch
      Call	SetMessageValue ( *Var[A] 1 )
	Call  ShowMessageAtScreenPos  ( $String_Rogue_CoinsAdded 000000A0 00000028 )
	% close bank's coin box
	Call 	$WriteAddress ( $BoxAnimation_State  2 2 .False .False )
	Call 	$WriteAddress ( $BoxAnimation_Offset 2 7 .False .False )
	Wait	10`
	Return
	End
}

/% is at globals/patch/RoguelikeMain.patch
#new:Script $Script_Rogue_GiveHalfCoins
{
	Call  ShowMessageAtScreenPos  ( $String_Rogue_CoinsGained_Failed 000000A0 00000028 )
	Call 	$ReadAddress ( 8010F2AA 1 *Var[0] .False .False ) % load Total Gained Coins in actual Pit playthrough
      If *Var[0] <= 1 % 1 or zero coins
            Return
      EndIf
      Div   *Var[0] 2 % get half of the coins
      Set   *Var[A] *Var[0]
	% show bank's coin box
	Set	*BankTextBoxPosition 1
	Set	*TalkingToFishmael .True
	Wait 10`
	% save coins
	Call 	$ReadAddress  ( 803560DC 2 *Var[1] .False .False ) % load bank account
	Add	*Var[1] *Var[0]
	SetTimescale *Fixed[15.0]
	Loop
		Call 	$ReadAddress  ( 803560DC 2 *Var[2] .False .False ) % load bank account
		Add	*Var[2] 1
		% Bank Account Cap
		If *Var[2] > 9999999` % 9,999,999 / 0098967F
			BreakLoop
		EndIf
		Call 	$WriteAddress ( 803560DC 2 *Var[2] .False .False ) % save bank account
		Call	PlaySound ( 0211 ) % coin
		If *Var[2] == *Var[1]
			BreakLoop
		EndIf
		Wait	1
	EndLoop
	SetTimescale *Fixed[1.0] % Back to Normal
      Call $ReadAddress ( 803560DC 2 *Var[1] .False .False ) % load bank account
	% Check Challenges
	Switch *Var[1]
            Case >= 40000`
                  Set *Flag_Cheev_Global_13 .True
                  Set *Flag_Cheev_Global_12 .True
                  Set *Flag_Cheev_Global_11 .True
            Case >= 10000`
                  Set *Flag_Cheev_Global_12 .True
                  Set *Flag_Cheev_Global_11 .True
            Case >= 1000`
                  Set *Flag_Cheev_Global_11 .True
	EndSwitch
      Call	SetMessageValue ( *Var[A] 1 )
	Call  ShowMessageAtScreenPos  ( $String_Rogue_CoinsAdded 000000A0 00000028 )
	% close bank's coin box
	Call 	$WriteAddress ( $BoxAnimation_State  2 2 .False .False )
	Call 	$WriteAddress ( $BoxAnimation_Offset 2 7 .False .False )
	Wait	10`
	Return
	End
}%/

#string $String_Rogue_CoinsGained_Success
{
[STYLE:EPILOGUE][...]
You left the Roguelike Pit
succesfully.
[WAIT][NEXT][...]
All the coins you got from
battles will get added to
your bank account.
[WAIT][END]
}
	
#new:Script $Script_SetEnemyIdle
{
	Call	 $GetFloorSign_Rogue ( *Var[1] ) % Loaded from SignStringLoader.mpat
	Switch   *Var[1]
		Case == 1` % pit1_6
			Call	SetNpcAnimation ( .Npc:Self 00260001 ) % Goomba
		Case == 2` % pit2_7
			Call	SetNpcAnimation ( .Npc:Self 00270001 ) % Spiked Goomba
		Case == 3` % ...
			Call	SetNpcAnimation ( .Npc:Self 00280001 ) % Paragoomba
		Case == 4`
			Call	SetNpcAnimation ( .Npc:Self 00260101 ) % Koopa
		Case == 5`
			Call	SetNpcAnimation ( .Npc:Self 002A0102 ) % Paratroopa
		Case == 6`
			Call	SetNpcAnimation ( .Npc:Self 00330001 ) % Buzzy Beetle
		Case == 7`
			Call	SetNpcAnimation ( .Npc:Self 00320012 ) % Bandit
		Case == 8`
			Call	SetNpcAnimation ( .Npc:Self 00310104 ) % Pokey Mummy
		Case == 9`
			Call	SetNpcAnimation ( .Npc:Self 00340002 ) % Swooper
		Case == 10`
			Call	SetNpcAnimation ( .Npc:Self 002B0102 ) % Forest Fuzzy
		Case == 11`
			Call	SetNpcAnimation ( .Npc:Self 00370001 ) % Piranha Plant
		Case == 12`
			Call	SetNpcAnimation ( .Npc:Self 00260101 ) % Red Goomba
		Case == 13`
			Call	SetNpcAnimation ( .Npc:Self 00280101 ) % Red Paragoomba
		Case == 14`
			Call	SetNpcAnimation ( .Npc:Self 00300902 ) % Bleft
		Case == 15`
			Call	SetNpcAnimation ( .Npc:Self 00390002 ) % Clubba
		Case == 16`
			Call	SetNpcAnimation ( .Npc:Self 003B0013 ) % Shy Guy
		Case == 17`
			Call	SetNpcAnimation ( .Npc:Self 003D0033 ) % Sky Guy
		Case == 18`
			Call	SetNpcAnimation ( .Npc:Self 00400001 ) % Medi Guy
		Case == 19`
			Call	SetNpcAnimation ( .Npc:Self 003E0001 ) % Pyro Guy
		Case == 20`
			Call	SetNpcAnimation ( .Npc:Self 003F0002 ) % Spy Guy
		Case == 21`
			Call	SetNpcAnimation ( .Npc:Self 00420010 ) % Jungle Guy
		Case == 22`
			Call	SetNpcAnimation ( .Npc:Self 00440002 ) % Hurt Plant
		Case == 23`
			Call	SetNpcAnimation ( .Npc:Self 00450009 ) % M Bush
		Case == 24`
			Call	SetNpcAnimation ( .Npc:Self 004D0003 ) % Spike Top
		Case == 25`
			Call	SetNpcAnimation ( .Npc:Self 002B0302 ) % Jungle Fuzzy
		Case == 26`
			Call	SetNpcAnimation ( .Npc:Self 00460001 ) % Lava Bubble
		Case == 27`
			Call	SetNpcAnimation ( .Npc:Self 00360001 ) % Putrid Piranha
		Case == 28`
			Call	SetNpcAnimation ( .Npc:Self 004B0001 ) % Bzzap
		Case == 29`
			Call	SetNpcAnimation ( .Npc:Self 00480001 ) % Crazee Dayzee
		Case == 30`
			Call	SetNpcAnimation ( .Npc:Self 00560201 ) % Y Magikoopa
		Case == 31`
			Call	SetNpcAnimation ( .Npc:Self 00490001 ) % Lakitu
		Case == 32`
			Call	SetNpcAnimation ( .Npc:Self 004A0001 ) % Spiny
		Case == 33`
			Call	SetNpcAnimation ( .Npc:Self 007D0001 ) % Ruff Puff
		Case == 34`
			Call	SetNpcAnimation ( .Npc:Self 00360101 ) % Frost Piranha
		Case == 35`
			Call	SetNpcAnimation ( .Npc:Self 00560501 ) % G Magikoopa
		Case == 36`
			Call	SetNpcAnimation ( .Npc:Self 00520001 ) % Gulpit
		Case == 37`
			Call	SetNpcAnimation ( .Npc:Self 004E0002 ) % Duplighost
		Case == 38`
			Call	SetNpcAnimation ( .Npc:Self 00340102 ) % Swoopula
		Case == 39`
			Call	SetNpcAnimation ( .Npc:Self 00390102 ) % White Clubba
		Case == 40`
			Call	SetNpcAnimation ( .Npc:Self 00460101 ) % Ember
		Case == 41`
			Call	SetNpcAnimation ( .Npc:Self 00590001 ) % Koopatrol
		Case == 42`
			Call	SetNpcAnimation ( .Npc:Self 005A0002 ) % Hammer Bros.
		Case == 43`
			Call	SetNpcAnimation ( .Npc:Self 00550004 ) % Bony Beetle
		Case == 44`
			Call	SetNpcAnimation ( .Npc:Self 00530002 ) % Dry Bones
		Case == 45`
			Call	SetNpcAnimation ( .Npc:Self 00590001 ) % Koopatrol
		Case == 46`
			Call	SetNpcAnimation ( .Npc:Self 002B1102 ) % Poison Fuzzy
		Case == 47`
			Call	SetNpcAnimation ( .Npc:Self 007D0501 ) % Poison Puff
		Case == 48` % ...
			Call	SetNpcAnimation ( .Npc:Self 003E0801 ) % Ember Guy
		Case == 49` % pt94_99
			Call	SetNpcAnimation ( .Npc:Self 00561901 ) % Black Magikoopa
		Case == 50` % pt_95
			Call	SetNpcAnimation ( .Npc:Self 00690405 ) % Negative Chomp
	EndSwitch
	Return
	End
}
	
	% Handle if Mario will take back his lost coins
	#new:Script $Script_AddCoins
{
	Call	$Function_LoadCoinsLosted ( *Var[1] )
	If	*Var[1] == 0 % Mario has even lost some coins?
		Goto End
	EndIf
	Call	 $GetFloorSign ( *Var[1] ) % Loaded from SignStringLoader.mpat
	%Set *LostCoinsMapID *Var[1] /% testing purposes %/
	If	*LostCoinsMapID ==	*Var[1] % If Mario is at same floor when he lost his coins
		Call	SetNpcVar	( 40 00000000 1 ) % Set Coins Sack Var0 as true to start his leaving animation
		Call	SetNpcVar	( 40 00000001 1 ) % Set Coins Sack Var1 to load the appearing Animation instead
	EndIf
	Label End
	Return
	End
}
	
% Subtract all Mario coins if he died
#new:Script $Script_SubstractCoins
{
      If *LostCoinsMapID != 0 % If mario just lost his coins forever
            Set   *Flag_Cheev_Classic_03 .True % Challenged Completed
      EndIf
	Set *LostCoinsMapID *PitMapID % Set LostCoinsMapID as current Pit Floor
	Call	 $Function_LoadMarioCoins% ( *Var[1] )
	% If Mario doesn't have any coins
	% just bypass everything
	If	*Var[1] == 0
		Call	$Function_ResetCoinsLosted
		Goto	BypassCoins
	EndIf
      Wait	6
	Call	 $Function_SaveCoinsLosted
	Call	 $Function_LoadMarioCoins% ( *Var[1] )
	Mul	*Var[1] -1			% Set Coins to Negative
	Call	AddCoin ( *Var[1] )	% Substract all Mario current coins
	Call	SetNpcVar	( 40 .Default 1 ) % Set Coins Sack Var0 as true to start his leaving animation
	Return	% Finish the Script if the Sack Animation is about to start
	Label	BypassCoins
	Call   ShowCoinCounter ( .False )
	WaitSeconds 1
	Call GotoMap ( "pt_00" 6 )
	Return
	End
}
	
%%
% Money Sack
%%

#define .Npc_Sack	00000040
	
#new:NpcSettings $NPC_Settings_Sack
{
	00000000 00180028 00000000 00000000 00000000 00000000 00000000 00000000 
	00000000 00000000 000D0000 
}

#new:Script $Script_Init_Bag
{
      Call     SetSelfVar 	( 00000000 00000000 )
	Call     BindNpcIdle 	( .Npc:Self $NPC_Sack_AnimationStart )
	Return
	End
}
	
#new:Script $Script_Init_Bag_HitBox
{
	Call     EnableNpcShadow 	( .Npc:Self .False )
	Call     BindNpcHit  	( .Npc:Self $Script_NPC_SackHit_Init )
	Return
	End
}
	
#new:Script $Script_NPC_SackHit_Init
{
	Call   SetSelfEnemyFlagBits 	( 1F000000 .True ) % Disable NPC HitBox after being hit
	Kill	 $Script_Init_Bag	% Stop the Init Scrip and all their childers
	% Jump
	Thread
		Exec	$Script_NPC_Sack_FX % FX Script
		Call	PlaySoundAtNpc	( .Npc_Sack 333 0 )	% Fuzzy Jump
		Call	GetNpcPos ( .Npc_Sack *Var[0] *Var[1] *Var[2] )
		Add	*Var[1] 20`	% Y Coords
		Call  SetNpcJumpscale 	( .Npc_Sack *Fixed[1.0] )	% Set Jump Height
            Call  NpcJump1    	( .Npc_Sack *Var[0] *Var[1] *Var[2] A )	% Set Cordinates to set after the Jump
            % Coins Sounds
		Loop 4
			Wait 4
			Call	PlaySound	( 211 ) % Coin
		EndLoop
	EndThread
	% Message
	Call	$Function_LoadCoinsLosted ( *Var[1] )
      Call	SetMessageValue	( *Var[1] 0 )
      Call  DisablePlayerInput ( .True )
      Wait  5
      Call	ShowMessageAtScreenPos 	( $String_CoinsGained 000000A0 00000028 )
      Call  DisablePlayerInput ( .False )
      Set   *Flag_Cheev_Classic_02 .True % Challenged Completed
	Call	AddCoin ( *Var[1] )
	Call	$Function_ResetCoinsLosted
	Set	*LostCoinsMapID 0
	Return
	End
}
	
	#new:Script $Script_NPC_Sack_FX
{
	Call	GetNpcPos ( .Npc_Sack *Var[3] *Var[4] *Var[5] )
	Add	*Var[4] 20`	% Y Coords
	Call  PlayEffect  	( ~FX:Sparkles:Star *Var[3] *Var[4] *Var[5] *Fixed[5.0] )
	Wait	10`
	Call   PlayEffect  	( ~FX:SmallGoldSparkle *Var[3] *Var[4] *Var[5] *Fixed[2.8007812] 00000032 )
	%Sub	*Var[1] 1000` % Put the NPC 1000 pixels below
	Call	RemoveNpc ( .Npc_Sack )
	Return
	End
}
	
#string $String_CoinsGained
{
[STYLE:EPILOGUE][...]
You got [PushColor][Color:7][Var:00] coins[PopColor] back!
[WAIT][END]
}
	
	#new:Script $NPC_Sack_AnimationStart
{
	Loop     
		Call     GetNpcVar 	( .Npc:Self 00000000 *Var[0] )
		If  *Var[0]  ==  1 
			BreakLoop
		EndIf
		Wait     1 
	EndLoop
	Call     GetNpcVar 	( .Npc:Self 00000001 *Var[0] )
	If	*Var[0] == 1 % Mario got back his coins?
		Call	DisablePlayerInput ( .True )
		Jump	$NPC_Sack_AnimationEnd
	EndIf
	Thread	% Thread only used when the coins are about to being extracted
		Call     SetNpcFlagBits ( .Npc:Self 00000100 .True ) % Disable Collitions
		Wait 35`
		Call ShowCoinCounter ( .False )
		Wait 35`
		Call GotoMap ( "pt_00" 6 ) 
	EndThread
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	If	*Var[0]	<= -530` % The Sack will go to the Right
		ExecWait	$Script_SackAnimation_Start_GoToTheRight
	Else % The Sack will go to the Left
		ExecWait	$Script_SackAnimation_Start_GoToTheLeft
	EndIf
	Return
	End
}
	
	#new:Script $NPC_Sack_AnimationEnd
{
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	If	*Var[0]	<= -530` % The Sack will come from the Right
		ExecWait	$Script_SackAnimation_End_Right
	Else % The Sack will come from the Left
		ExecWait	$Script_SackAnimation_End_Left
	EndIf
	Call	DisablePlayerInput ( .False )
	Call	BindNpcAI ( .Npc:Self $Script_NpcAI_MoneySack ) % Bind Sack AI when his animation just finished
	Return
	End
}
	
	#new:Script	$Script_SackAnimation_Start_GoToTheRight
{
	Call	 SetNpcRotation		( .Npc:Self	0 -180` 0 )
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] -30`% Y Coords
	Call	SetNpcPos		( .Npc:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 30`	% Y Coords
	Add		*Var[0] 50`	% X Coords
	% 1st Jump
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 2nd Jump
	Add		*Var[0] 50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 3rd Jump
	Add		*Var[0] 50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 4th Jump
	Add		*Var[0] 50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Call	 SetNpcRotation		( .Npc:Self	0 0 0 )
	Return
	End
}
	
	#new:Script	$Script_SackAnimation_Start_GoToTheLeft
{
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] -30`% Y Coords
	Call	SetNpcPos		( .Npc:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 30`	% Y Coords
	Add		*Var[0] -50`	% X Coords
	% 1st Jump
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 2nd Jump
	Add		*Var[0] -50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 3rd Jump
	Add		*Var[0] -50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 4th Jump
	Add		*Var[0] -50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] *Var[1] *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Return
	End
}
	
	#new:Script	$Script_SackAnimation_End_Right
{
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	% Handle if the mover is about to jump on top of the pipe
	If *Var[2] >= 10`
		If *Var[2] <= 60`
			Set	*Var[2] 65` % If Mario is between Z Coords 10-60 set Mover to Z Coordinates 65
		EndIf
	EndIf
	Add		*Var[0] 200`% X Coords
	Call	SetNpcPos		( .Npc:Self *Var[0] -13` *Var[2] )
	Add		*Var[0] -50`	% X Coords
	% 1st Jump
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] -13` *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 2nd Jump
	Add		*Var[0] -50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] -13` *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Return
	End
}
	
	#new:Script	$Script_SackAnimation_End_Left
{
	Call	 SetNpcRotation		( .Npc:Self	0 -180` 0 )
	Call	GetPlayerPos	( *Var[0] *Var[1] *Var[2] )
	Add		*Var[0] -200`% X Coords
	Call	SetNpcPos		( .Npc:Self *Var[0] -13` *Var[2] )
	Add		*Var[0] 50`	% X Coords
	% 1st Jump
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] -13` *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Wait	1
	% 2nd Jump
	Add		*Var[0] 50`	% X Coords
	Call    SetNpcJumpscale 	( .Npc:Self *Fixed[1.0] )	% Set Jump Height
	Call    NpcJump1    	( .Npc:Self *Var[0] -13` *Var[2] D )	% Set Cordinates to set after the Jump (you need to set this manually)
	Call	PlaySoundAtNpc	( .Npc:Self 333 0 )	
	Call	 SetNpcRotation		( .Npc:Self	0 0 0 )
	Return
	End
}
	
	#new:Function $Function_LoadMarioCoins
{
	PUSH RA, A1, A2, V0
	LAHU	A2, 8010F29C % Coins % A2 = New value to set
	LIO   A1, *Var[1] % Var[1]% A1 = Variable to Set
	JAL   ~Func:set_variable 
	RESERVED
	JPOP RA, A1, A2, V0
}
	
	#new:Function $Function_LoadCoinsLosted
{
	PUSH  RA, A1, A2, V0
	LAHU	A2, 8010F2B0 % Coins Losted
	LIO   A1, *Var[1]
	JAL   ~Func:set_variable 
	RESERVED
	JPOP  RA, A1, A2, V0
}
	
      #new:Function $Function_SaveCoinsLosted
{
      PUSH        T0
	LAHU		T0, 8010F29C % Mario's Coins
      SAH		T0, 8010F2B0 % Coins Losted
      POP		T0
      JR          RA
	ADDIU 	V0, R0, 2
}
	
	#new:Function $Function_ResetCoinsLosted
{
	SAH		R0, 8010F2B0 % Coins Losted
	JR		RA
	ADDIU 	V0, R0, 2
}
	
	% Unused
	#new:Function $Function_LoadGainedCoins
{
	PUSH ra, a1, a2, v0
	LAH a2, 8010F2AA
	LIO a1, *Var[1]
	JAL ~Func:set_variable
	RESERVED
	JPOP ra, a1, a2, v0
}
 
#new:Function $Function_RevivePlayer
{
	PUSH      RA
	ADDIU     V0, R0, 1
	SAB       V0, 8010F292
	JAL       ~Func:sync_status_menu
	NOP
	POP       RA
	JR        RA
	ADDIU     V0, R0, 2
}
	
	%% Money Sack - NPC AI
	
	#new:AISettings $AISettings_MoneySack
{
    2.5 % move speed
    50` % move time
    15` % wait time
	100.0 % alert radius
    0.0
    3`
    3.9 % chase speed
    20`
    1`
	180.0 % chase radius
    0.0
    1`
}

	#new:Script $Script_NpcAI_MoneySack
{
	Thread	% Set HitBox coordinates as Sack coordinates until you attack him
		Loop
			Call	GetNpcPos	( .Npc:Self *Var[0] *Var[1] *Var[2] )
			Call	SetNpcPos	( 41 *Var[0] *Var[1] *Var[2] )
			Wait	1
			Call	$Function_LoadCoinsLosted ( *Var[1] )
			If	*Var[1] == 0
				BreakLoop
			EndIf
		EndLoop
	EndThread
	Call     $Function_NpcAI_MoneySack ( $AISettings_MoneySack )
	Return
	End
}
	
	#new:JumpTable $JumpTable_80242448
{
	$Function_NpcAI_MoneySack[150] $Function_NpcAI_MoneySack[160] $Function_NpcAI_MoneySack[178] $Function_NpcAI_MoneySack[188] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[1A0] $Function_NpcAI_MoneySack[1B0] 
	$Function_NpcAI_MoneySack[1C8] $Function_NpcAI_MoneySack[1D8] $Function_NpcAI_MoneySack[1F0] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] 
	$Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[210] $Function_NpcAI_MoneySack[208] 
}

#new:Function $Function_NpcAI_MoneySack
{
    0:  ADDIU     SP, SP, FFB0
    4:  SW        S4, 40 (SP)
    8:  DADDU     S4, A0, R0
    C:  SW        RA, 48 (SP)
   10:  SW        S5, 44 (SP)
   14:  SW        S3, 3C (SP)
   18:  SW        S2, 38 (SP)
   1C:  SW        S1, 34 (SP)
   20:  SW        S0, 30 (SP)
   24:  LW        S1, 148 (S4)
   28:  LH        A0, 8 (S1)
   2C:  JAL       ~Func:get_npc_unsafe
   30:  DADDU     S0, A1, R0
   34:  LW        V1, C (S4)
   38:  DADDU     A0, S4, R0
   3C:  LW        A1, 0 (V1)
   40:  JAL       ~Func:get_variable
   44:  DADDU     S5, V0, R0
   48:  SW        R0, 10 (SP)
   4C:  LW        V1, D0 (S1)
   50:  LW        V1, 30 (V1)
   54:  SW        V1, 14 (SP)
   58:  LW        V1, D0 (S1)
   5C:  LW        V1, 1C (V1)
   60:  SW        V1, 18 (SP)
   64:  LW        V1, D0 (S1)
   68:  LW        V1, 24 (V1)
   6C:  SW        V1, 1C (SP)
   70:  LW        V1, D0 (S1)
   74:  LW        V1, 28 (V1)
   78:  ADDIU     S3, SP, 10
   7C:  SW        V1, 20 (SP)
   80:  LW        V1, D0 (S1)
   84:  LIF       F0, 100.0
   8C:  LW        V1, 2C (V1)
   90:  DADDU     S2, V0, R0
   94:  SWC1      F0, 28 (SP)
   98:  SH        R0, 2C (SP)
   9C:  BNE       S0, R0, .oB4
   A0:  SW        V1, 24 (SP)
   A4:  LW        V0, B0 (S1)
   A8:  ANDI      V0, V0, 4
   AC:  BEQ       V0, R0, .o12C
   B0:  NOP
        .oB4
   B4:  ADDIU     A0, R0, F7FF
   B8:  SW        R0, 70 (S4)
   BC:  SH        R0, 8E (S5)
   C0:  LW        V0, CC (S1)
   C4:  LW        V1, 0 (S5)
   C8:  LW        V0, 0 (V0)
   CC:  AND       V1, V1, A0
   D0:  SW        V1, 0 (S5)
   D4:  SW        V0, 28 (S5)
   D8:  LW        V0, D0 (S1)
   DC:  LW        V0, 34 (V0)
   E0:  BNEL      V0, R0, .oF8
   E4:  ADDIU     V0, R0, FDFF
   E8:  ORI       V0, V1, 200
   EC:  ADDIU     V1, R0, FFF7
   F0:  BEQ       R0, R0, .o100
   F4:  AND       V0, V0, V1
        .oF8
   F8:  AND       V0, V1, V0
   FC:  ORI       V0, V0, 8
        .o100
  100:  SW        V0, 0 (S5)
  104:  LW        V0, B0 (S1)
  108:  ANDI      V0, V0, 4
  10C:  BEQ       V0, R0, .o12C
  110:  ADDIU     V0, R0, 63
  114:  SW        V0, 70 (S4)
  118:  SW        R0, 74 (S4)
  11C:  LW        V0, B0 (S1)
  120:  ADDIU     V1, R0, FFFB
  124:  AND       V0, V0, V1
  128:  SW        V0, B0 (S1)
        .o12C
  12C:  LW        V1, 70 (S4)
  130:  SLTIU     V0, V1, 64
  134:  BEQ       V0, R0, .o210
  138:  SLL       V0, V1, 2
  13C:  LTW       V0, V0 ($JumpTable_80242448)
  148:  JR        V0
  14C:  NOP
% LBL: from $JumpTable_80242448 , entry 0`
  150:  DADDU     A0, S4, R0
  154:  DADDU     A1, S2, R0
  158:  JAL       800495A0
  15C:  DADDU     A2, S3, R0
% LBL: from $JumpTable_80242448 , entry 1`
  160:  DADDU     A0, S4, R0
  164:  DADDU     A1, S2, R0
  168:  JAL       800496B8
  16C:  DADDU     A2, S3, R0
  170:  BEQ       R0, R0, .o210
  174:  NOP
% LBL: from $JumpTable_80242448 , entry 2`
  178:  DADDU     A0, S4, R0
  17C:  DADDU     A1, S2, R0
  180:  JAL       80049B44
  184:  DADDU     A2, S3, R0
% LBL: from $JumpTable_80242448 , entry 3`
  188:  DADDU     A0, S4, R0
  18C:  DADDU     A1, S2, R0
  190:  JAL       80049C04
  194:  DADDU     A2, S3, R0
  198:  BEQ       R0, R0, .o210
  19C:  NOP
% LBL: from $JumpTable_80242448 , entry 10`
  1A0:  DADDU     A0, S4, R0
  1A4:  DADDU     A1, S2, R0
  1A8:  JAL       80049E3C
  1AC:  DADDU     A2, S3, R0
% LBL: from $JumpTable_80242448 , entry 11`
  1B0:  DADDU     A0, S4, R0
  1B4:  DADDU     A1, S2, R0
  1B8:  JAL       80049ECC
  1BC:  DADDU     A2, S3, R0
  1C0:  BEQ       R0, R0, .o210
  1C4:  NOP
% LBL: from $JumpTable_80242448 , entry 12`
  1C8:  DADDU     A0, S4, R0
  1CC:  DADDU     A1, S2, R0
  1D0:  JAL       $Function_80240260
  1D4:  DADDU     A2, S3, R0
% LBL: from $JumpTable_80242448 , entry 13`
  1D8:  DADDU     A0, S4, R0
  1DC:  DADDU     A1, S2, R0
  1E0:  JAL       $Function_80240844
  1E4:  DADDU     A2, S3, R0
  1E8:  BEQ       R0, R0, .o210
  1EC:  NOP
% LBL: from $JumpTable_80242448 , entry 14`
  1F0:  DADDU     A0, S4, R0
  1F4:  DADDU     A1, S2, R0
  1F8:  JAL       $Function_802409A8
  1FC:  DADDU     A2, S3, R0
  200:  BEQ       R0, R0, .o210
  204:  NOP
% LBL: from $JumpTable_80242448 , entry 99`
  208:  JAL       8004A73C
  20C:  DADDU     A0, S4, R0
% LBL: from $JumpTable_80242448 , entry 98`
        .o210
  210:  LW        RA, 48 (SP)
  214:  LW        S5, 44 (SP)
  218:  LW        S4, 40 (SP)
  21C:  LW        S3, 3C (SP)
  220:  LW        S2, 38 (SP)
  224:  LW        S1, 34 (SP)
  228:  LW        S0, 30 (SP)
  22C:  DADDU     V0, R0, R0
  230:  JR        RA
  234:  ADDIU     SP, SP, 50
}
  
  #new:Function $Function_80240260
{
    0:  ADDIU     SP, SP, FF68
    4:  SW        S6, 60 (SP)
    8:  DADDU     S6, A0, R0
    C:  SW        RA, 64 (SP)
   10:  SW        S5, 5C (SP)
   14:  SW        S4, 58 (SP)
   18:  SW        S3, 54 (SP)
   1C:  SW        S2, 50 (SP)
   20:  SW        S1, 4C (SP)
   24:  SW        S0, 48 (SP)
   28:  SDC1      F30, 90 (SP)
   2C:  SDC1      F28, 88 (SP)
   30:  SDC1      F26, 80 (SP)
   34:  SDC1      F24, 78 (SP)
   38:  SDC1      F22, 70 (SP)
   3C:  SDC1      F20, 68 (SP)
   40:  LW        S2, 148 (S6)
   44:  DADDU     S1, A1, R0
   48:  LH        A0, 8 (S2)
   4C:  JAL       ~Func:get_npc_unsafe
   50:  DADDU     S5, A2, R0
   54:  LW        A0, 20 (S1)
   58:  DADDU     S0, V0, R0
   5C:  SRL       V1, A0, 1F
   60:  ADDU      A0, A0, V1
   64:  SRA       A0, A0, 1
   68:  JAL       ~Func:rand_int
   6C:  ADDIU     A0, A0, 1
   70:  LW        V1, 20 (S1)
   74:  LWC1      F12, 38 (S0)
   78:  SRL       A0, V1, 1F
   7C:  ADDU      V1, V1, A0
   80:  SRA       V1, V1, 1
   84:  ADDU      V1, V1, V0
   88:  SH        V1, 8E (S0)
   8C:  LW        V0, CC (S2)
   90:  LWC1      F14, 40 (S0)
   94:  LW        V0, C (V0)
   98:  SW        V0, 28 (S0)
   9C:  LWC1      F0, 18 (S1)
   A0:  LAW       V0, 800F7B30
   A8:  SWC1      F0, 18 (S0)
   AC:  LW        A2, 28 (V0)
   B0:  LW        A3, 30 (V0)
   B4:  JAL       80029C80
   B8:  DADDU     S3, R0, R0
   BC:  LIF       F12, 180.0
   C4:  JAL       ~Func:clamp_angle
   C8:  ADD.S     F12, F0, F12
   CC:  MOV.S     F20, F0
   D0:  LWC1      F12, C (S0)
   D4:  JAL       ~Func:get_clamped_angle_diff
   D8:  MOV.S     F14, F20
   DC:  MOV.S     F2, F0
   E0:  LW        V0, 1C (S1)
   E4:  ABS.S     F0, F2
   E8:  MTC1      V0, F4
   EC:  NOP
   F0:  CVT.S.W   F4, F4
   F4:  C.LT.S    F4, F0
   F8:  NOP
   FC:  BC1F      .o134
  100:  NOP
  104:  MTC1      R0, F0
  108:  LWC1      F20, C (S0)
  10C:  C.LT.S    F2, F0
  110:  NOP
  114:  BC1F      .o130
  118:  SUBU      V0, R0, V0
  11C:  MTC1      V0, F0
  120:  NOP
  124:  CVT.S.W   F0, F0
  128:  BEQ       R0, R0, .o134
  12C:  ADD.S     F20, F20, F0
        .o130
  130:  ADD.S     F20, F20, F4
        .o134
  134:  JAL       ~Func:clamp_angle
  138:  MOV.S     F12, F20
  13C:  LIA       S4, 800F7B30
  144:  LWC1      F12, 38 (S0)
  148:  LWC1      F14, 40 (S0)
  14C:  LW        V0, 0 (S4)
  150:  LWC1      F2, 3C (S0)
  154:  SWC1      F0, C (S0)
  158:  MOV.S     F0, F12
  15C:  LW        A2, 28 (V0)
  160:  LW        A3, 30 (V0)
  164:  MOV.S     F4, F14
  168:  SWC1      F0, 20 (SP)
  16C:  SWC1      F2, 24 (SP)
  170:  JAL       80029C80
  174:  SWC1      F4, 28 (SP)
  178:  LIF       F12, 180.0
  180:  JAL       ~Func:clamp_angle
  184:  ADD.S     F12, F0, F12
  188:  LWC1      F2, 18 (S0)
  18C:  LIF       F29, 2.28125
  194:  MTC1      R0, F28
  198:  CVT.D.S   F2, F2
  19C:  MUL.D     F2, F2, F28
  1A0:  NOP
  1A4:  MOV.S     F20, F0
  1A8:  ADDIU     A1, SP, 20
  1AC:  ADDIU     A2, SP, 24
  1B0:  ADDIU     A3, SP, 28
  1B4:  SWC1      F20, 14 (SP)
  1B8:  CVT.S.D   F2, F2
  1BC:  SWC1      F2, 10 (SP)
  1C0:  LH        V0, A8 (S0)
  1C4:  MTC1      R0, F22
  1C8:  MTC1      V0, F0
  1CC:  NOP
  1D0:  CVT.S.W   F0, F0
  1D4:  SWC1      F0, 18 (SP)
  1D8:  LH        V0, A6 (S0)
  1DC:  MOV.S     F24, F22
  1E0:  MTC1      V0, F0
  1E4:  NOP
  1E8:  CVT.S.W   F0, F0
  1EC:  SWC1      F0, 1C (SP)
  1F0:  LW        A0, 80 (S0)
  1F4:  JAL       800DDCEC
  1F8:  MOV.S     F26, F24
  1FC:  BEQ       V0, R0, .o584
  200:  NOP
  204:  LWC1      F12, 38 (S0)
  208:  LWC1      F14, 40 (S0)
  20C:  LW        A2, 20 (SP)
  210:  JAL       ~Func:dist2D
  214:  LW        A3, 28 (SP)
  218:  MOV.S     F22, F0
  21C:  LWC1      F2, 38 (S0)
  220:  LWC1      F4, 3C (S0)
  224:  LIF       F30, 35.0
  22C:  LWC1      F0, 40 (S0)
  230:  ADD.S     F12, F20, F30
  234:  SWC1      F2, 2C (SP)
  238:  SWC1      F4, 30 (SP)
  23C:  JAL       ~Func:clamp_angle
  240:  SWC1      F0, 34 (SP)
  244:  LWC1      F2, 18 (S0)
  248:  CVT.D.S   F2, F2
  24C:  MUL.D     F2, F2, F28
  250:  NOP
  254:  SWC1      F0, 14 (SP)
  258:  CVT.S.D   F2, F2
  25C:  SWC1      F2, 10 (SP)
  260:  LH        V0, A8 (S0)
  264:  ADDIU     A1, SP, 2C
  268:  MTC1      V0, F0
  26C:  NOP
  270:  CVT.S.W   F0, F0
  274:  SWC1      F0, 18 (SP)
  278:  LH        V0, A6 (S0)
  27C:  ADDIU     A2, SP, 30
  280:  MTC1      V0, F0
  284:  NOP
  288:  CVT.S.W   F0, F0
  28C:  SWC1      F0, 1C (SP)
  290:  LW        A0, 80 (S0)
  294:  JAL       800DDCEC
  298:  ADDIU     A3, SP, 34
  29C:  BEQ       V0, R0, .o2BC
  2A0:  NOP
  2A4:  LWC1      F12, 38 (S0)
  2A8:  LWC1      F14, 40 (S0)
  2AC:  LW        A2, 2C (SP)
  2B0:  JAL       ~Func:dist2D
  2B4:  LW        A3, 34 (SP)
  2B8:  MOV.S     F24, F0
        .o2BC
  2BC:  LWC1      F0, 38 (S0)
  2C0:  LWC1      F2, 3C (S0)
  2C4:  LWC1      F4, 40 (S0)
  2C8:  SUB.S     F12, F20, F30
  2CC:  SWC1      F0, 38 (SP)
  2D0:  SWC1      F2, 3C (SP)
  2D4:  JAL       ~Func:clamp_angle
  2D8:  SWC1      F4, 40 (SP)
  2DC:  LWC1      F2, 18 (S0)
  2E0:  CVT.D.S   F2, F2
  2E4:  MUL.D     F2, F2, F28
  2E8:  NOP
  2EC:  SWC1      F0, 14 (SP)
  2F0:  CVT.S.D   F2, F2
  2F4:  SWC1      F2, 10 (SP)
  2F8:  LH        V0, A8 (S0)
  2FC:  ADDIU     A1, SP, 38
  300:  MTC1      V0, F0
  304:  NOP
  308:  CVT.S.W   F0, F0
  30C:  SWC1      F0, 18 (SP)
  310:  LH        V0, A6 (S0)
  314:  ADDIU     A2, SP, 3C
  318:  MTC1      V0, F0
  31C:  NOP
  320:  CVT.S.W   F0, F0
  324:  SWC1      F0, 1C (SP)
  328:  LW        A0, 80 (S0)
  32C:  JAL       800DDCEC
  330:  ADDIU     A3, SP, 40
  334:  BEQ       V0, R0, .o354
  338:  NOP
  33C:  LWC1      F12, 38 (S0)
  340:  LWC1      F14, 40 (S0)
  344:  LW        A2, 38 (SP)
  348:  JAL       ~Func:dist2D
  34C:  LW        A3, 40 (SP)
  350:  MOV.S     F26, F0
        .o354
  354:  LWC1      F12, 38 (S0)
  358:  LW        V0, 0 (S4)
  35C:  LWC1      F14, 40 (S0)
  360:  LW        A2, 28 (V0)
  364:  JAL       ~Func:dist2D
  368:  LW        A3, 30 (V0)
  36C:  LWC1      F0, 18 (S0)
  370:  LIF       F3, 1.9375
  378:  MTC1      R0, F2
  37C:  CVT.D.S   F0, F0
  380:  MUL.D     F2, F0, F2
  384:  NOP
  388:  CVT.D.S   F0, F22
  38C:  C.LT.D    F0, F2
  390:  NOP
  394:  BC1F      .o3E0
  398:  NOP
  39C:  CVT.D.S   F0, F24
  3A0:  C.LT.D    F0, F2
  3A4:  NOP
  3A8:  BC1F      .o3E0
  3AC:  NOP
  3B0:  CVT.D.S   F0, F26
  3B4:  C.LT.D    F0, F2
  3B8:  NOP
  3BC:  BC1F      .o3E0
  3C0:  DADDU     A0, S5, R0
  3C4:  SW        R0, 10 (SP)
  3C8:  LW        A2, C (S1)
  3CC:  LW        A3, 10 (S1)
  3D0:  JAL       800490B4
  3D4:  DADDU     A1, S2, R0
  3D8:  BNEL      V0, R0, .o3E0
  3DC:  ADDIU     S3, R0, 1
        .o3E0
  3E0:  BNE       S3, R0, .o58C
  3E4:  ADDIU     V0, R0, A
  3E8:  C.LT.S    F24, F22
  3EC:  NOP
  3F0:  BC1F      .o424
  3F4:  NOP
  3F8:  C.LT.S    F26, F24
  3FC:  NOP
  400:  BC1F      .o41C
  404:  NOP
  408:  LWC1      F12, 38 (S0)
  40C:  LWC1      F14, 40 (S0)
  410:  LW        A2, 20 (SP)
  414:  BEQ       R0, R0, .o508
  418:  LW        A3, 28 (SP)
        .o41C
  41C:  C.LT.S    F24, F22
  420:  NOP
        .o424
  424:  BC1F      .o450
  428:  NOP
  42C:  C.LT.S    F24, F26
  430:  NOP
  434:  BC1F      .o450
  438:  NOP
  43C:  LWC1      F12, 38 (S0)
  440:  LWC1      F14, 40 (S0)
  444:  LW        A2, 20 (SP)
  448:  BEQ       R0, R0, .o508
  44C:  LW        A3, 28 (SP)
        .o450
  450:  C.LT.S    F22, F24
  454:  NOP
  458:  BC1F      .o484
  45C:  NOP
  460:  C.LT.S    F26, F22
  464:  NOP
  468:  BC1F      .o484
  46C:  NOP
  470:  LWC1      F12, 38 (S0)
  474:  LWC1      F14, 40 (S0)
  478:  LW        A2, 2C (SP)
  47C:  BEQ       R0, R0, .o508
  480:  LW        A3, 34 (SP)
        .o484
  484:  C.LT.S    F26, F24
  488:  NOP
  48C:  BC1F      .o4B8
  490:  NOP
  494:  C.LT.S    F22, F26
  498:  NOP
  49C:  BC1F      .o4C0
  4A0:  NOP
  4A4:  LWC1      F12, 38 (S0)
  4A8:  LWC1      F14, 40 (S0)
  4AC:  LW        A2, 2C (SP)
  4B0:  BEQ       R0, R0, .o508
  4B4:  LW        A3, 34 (SP)
        .o4B8
  4B8:  C.LT.S    F22, F26
  4BC:  NOP
        .o4C0
  4C0:  BC1F      .o4D8
  4C4:  NOP
  4C8:  C.LT.S    F24, F22
  4CC:  NOP
  4D0:  BC1T      .o4F8
  4D4:  NOP
        .o4D8
  4D8:  C.LT.S    F24, F26
  4DC:  NOP
  4E0:  BC1F      .o514
  4E4:  NOP
  4E8:  C.LT.S    F22, F24
  4EC:  NOP
  4F0:  BC1F      .o514
  4F4:  NOP
        .o4F8
  4F8:  LWC1      F12, 38 (S0)
  4FC:  LWC1      F14, 40 (S0)
  500:  LW        A2, 38 (SP)
  504:  LW        A3, 40 (SP)
        .o508
  508:  JAL       80029C80
  50C:  NOP
  510:  MOV.S     F20, F0
        .o514
  514:  LWC1      F12, C (S0)
  518:  JAL       ~Func:get_clamped_angle_diff
  51C:  MOV.S     F14, F20
  520:  MOV.S     F2, F0
  524:  LW        V0, 1C (S1)
  528:  ABS.S     F0, F2
  52C:  MTC1      V0, F4
  530:  NOP
  534:  CVT.S.W   F4, F4
  538:  C.LT.S    F4, F0
  53C:  NOP
  540:  BC1F      .o578
  544:  NOP
  548:  MTC1      R0, F0
  54C:  LWC1      F20, C (S0)
  550:  C.LT.S    F2, F0
  554:  NOP
  558:  BC1F      .o574
  55C:  SUBU      V0, R0, V0
  560:  MTC1      V0, F0
  564:  NOP
  568:  CVT.S.W   F0, F0
  56C:  BEQ       R0, R0, .o578
  570:  ADD.S     F20, F20, F0
        .o574
  574:  ADD.S     F20, F20, F4
        .o578
  578:  JAL       ~Func:clamp_angle
  57C:  MOV.S     F12, F20
  580:  SWC1      F0, C (S0)
        .o584
  584:  BEQ       S3, R0, .o59C
  588:  ADDIU     V0, R0, A
        .o58C
  58C:  SH        V0, 8E (S0)
  590:  LW        V0, CC (S2)
  594:  LW        V0, 20 (V0)
  598:  SW        V0, 28 (S0)
        .o59C
  59C:  ADDIU     V0, R0, D
  5A0:  SW        V0, 70 (S6)
  5A4:  LW        RA, 64 (SP)
  5A8:  LW        S6, 60 (SP)
  5AC:  LW        S5, 5C (SP)
  5B0:  LW        S4, 58 (SP)
  5B4:  LW        S3, 54 (SP)
  5B8:  LW        S2, 50 (SP)
  5BC:  LW        S1, 4C (SP)
  5C0:  LW        S0, 48 (SP)
  5C4:  LDC1      F30, 90 (SP)
  5C8:  LDC1      F28, 88 (SP)
  5CC:  LDC1      F26, 80 (SP)
  5D0:  LDC1      F24, 78 (SP)
  5D4:  LDC1      F22, 70 (SP)
  5D8:  LDC1      F20, 68 (SP)
  5DC:  JR        RA
  5E0:  ADDIU     SP, SP, 98
}

#new:Function $Function_80240844
{
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S3, 3C (SP)
    8:  DADDU     S3, A0, R0
    C:  SW        RA, 40 (SP)
   10:  SW        S2, 38 (SP)
   14:  SW        S1, 34 (SP)
   18:  SW        S0, 30 (SP)
   1C:  LW        S2, 148 (S3)
   20:  DADDU     S1, A1, R0
   24:  LH        A0, 8 (S2)
   28:  JAL       ~Func:get_npc_unsafe
   2C:  DADDU     S0, A2, R0
   30:  DADDU     A0, S0, R0
   34:  DADDU     A1, S2, R0
   38:  ADDIU     V1, R0, 1
   3C:  SW        V1, 10 (SP)
   40:  LW        A2, 24 (S1)
   44:  LW        A3, 28 (S1)
   48:  JAL       800490B4
   4C:  DADDU     S0, V0, R0
   50:  BNE       V0, R0, .oC8
   54:  ADDIU     A0, R0, 2
   58:  DADDU     A1, S0, R0
   5C:  DADDU     A2, R0, R0
   60:  LH        V1, A8 (S0)
   64:  LIF       F0, 1.0
   6C:  LIF       F2, 2.0
   74:  LIF       F4, -20.0
   7C:  ADDIU     V0, R0, F
   80:  SW        V0, 1C (SP)
   84:  MTC1      V1, F6
   88:  NOP
   8C:  CVT.S.W   F6, F6
   90:  MFC1      A3, F6
   94:  ADDIU     V0, SP, 28
   98:  SW        V0, 20 (SP)
   9C:  SWC1      F0, 10 (SP)
   A0:  SWC1      F2, 14 (SP)
   A4:  JAL       8006FE90
   A8:  SWC1      F4, 18 (SP)
   AC:  LW        V0, CC (S2)
   B0:  LW        V1, 0 (V0)
   B4:  ADDIU     V0, R0, 19
   B8:  SH        V0, 8E (S0)
   BC:  ADDIU     V0, R0, E
   C0:  BEQ       R0, R0, .o144
   C4:  SW        V1, 28 (S0)
        .oC8
   C8:  LW        V0, CC (S2)
   CC:  LW        V1, 28 (S0)
   D0:  LW        V0, 20 (V0)
   D4:  BEQ       V1, V0, .o128
   D8:  NOP
   DC:  LWC1      F0, 18 (S0)
   E0:  LIF       F3, 2.25
   E8:  MTC1      R0, F2
   EC:  CVT.D.S   F0, F0
   F0:  C.LT.D    F0, F2
   F4:  NOP
   F8:  BC1F      .o108
   FC:  DADDU     A1, R0, R0
  100:  BEQ       R0, R0, .o110
  104:  DADDU     A0, S0, R0
        .o108
  108:  DADDU     A0, S0, R0
  10C:  ADDIU     A1, R0, 1
        .o110
  110:  JAL       8003D660
  114:  NOP
  118:  LW        A1, 18 (S0)
  11C:  LW        A2, C (S0)
  120:  JAL       8003AA54
  124:  DADDU     A0, S0, R0
        .o128
  128:  LH        V0, 8E (S0)
  12C:  LHU       V1, 8E (S0)
  130:  BLEZ      V0, .o140
  134:  ADDIU     V0, V1, FFFF
  138:  BEQ       R0, R0, .o148
  13C:  SH        V0, 8E (S0)
        .o140
  140:  ADDIU     V0, R0, C
        .o144
  144:  SW        V0, 70 (S3)
        .o148
  148:  LW        RA, 40 (SP)
  14C:  LW        S3, 3C (SP)
  150:  LW        S2, 38 (SP)
  154:  LW        S1, 34 (SP)
  158:  LW        S0, 30 (SP)
  15C:  JR        RA
  160:  ADDIU     SP, SP, 48
}

#new:Function $Function_802409A8
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  DADDU     S0, A0, R0
    C:  SW        RA, 14 (SP)
   10:  LW        V0, 148 (S0)
   14:  JAL       ~Func:get_npc_unsafe
   18:  LH        A0, 8 (V0)
   1C:  LHU       V1, 8E (V0)
   20:  ADDIU     V1, V1, FFFF
   24:  SH        V1, 8E (V0)
   28:  SLL       V1, V1, 10
   2C:  BEQL      V1, R0, .o34
   30:  SW        R0, 70 (S0)
        .o34
   34:  LW        RA, 14 (SP)
   38:  LW        S0, 10 (SP)
   3C:  JR        RA
   40:  ADDIU     SP, SP, 18
}
